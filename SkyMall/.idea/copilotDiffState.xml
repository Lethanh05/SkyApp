<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/api/store/voucher/create.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/api/store/voucher/create.php" />
              <option name="updatedContent" value="&lt;?php&#10;require_once __DIR__ . '/../../auth/_bootstrap.php';&#10;require_once __DIR__ . '/../../_require_store.php';&#10;&#10;// Validate required fields&#10;$code = strtoupper(trim($_POST['code'] ?? ''));&#10;$type = trim($_POST['type'] ?? '');&#10;$value = isset($_POST['value']) ? (float)$_POST['value'] : 0;&#10;&#10;if ($code === '' || !in_array($type, ['percent', 'amount']) || $value &lt;= 0) {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;Invalid required fields&quot;], 400);&#10;}&#10;&#10;// Validate code format (chỉ cho phép chữ, số, gạch dưới)&#10;if (!preg_match('/^[A-Z0-9_]{3,20}$/', $code)) {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;Code must be 3-20 characters, uppercase letters, numbers, underscore only&quot;], 400);&#10;}&#10;&#10;// Validate percentage&#10;if ($type === 'percent' &amp;&amp; $value &gt; 100) {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;Percentage cannot exceed 100%&quot;], 400);&#10;}&#10;&#10;// Optional fields&#10;$min_order_value = isset($_POST['min_order_value']) ? (float)$_POST['min_order_value'] : 0;&#10;$start_date = trim($_POST['start_date'] ?? '');&#10;$end_date = trim($_POST['end_date'] ?? '');&#10;$usage_limit = isset($_POST['usage_limit']) &amp;&amp; $_POST['usage_limit'] !== '' ? (int)$_POST['usage_limit'] : null;&#10;$per_user_limit = isset($_POST['per_user_limit']) ? max(1, (int)$_POST['per_user_limit']) : 1;&#10;$description = trim($_POST['description'] ?? '');&#10;&#10;// Validate dates&#10;if ($start_date === '') $start_date = date('Y-m-d');&#10;if ($end_date === '') {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;End date is required&quot;], 400);&#10;}&#10;&#10;if (strtotime($end_date) &lt;= strtotime($start_date)) {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;End date must be after start date&quot;], 400);&#10;}&#10;&#10;// Validate usage limits&#10;if ($usage_limit !== null &amp;&amp; $usage_limit &lt;= 0) {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;Usage limit must be positive&quot;], 400);&#10;}&#10;&#10;try {&#10;    // Check if code already exists&#10;    $checkSql = &quot;SELECT id FROM Voucher WHERE code = ? LIMIT 1&quot;;&#10;    $st = $mysqli-&gt;prepare($checkSql);&#10;    $st-&gt;bind_param(&quot;s&quot;, $code);&#10;    $st-&gt;execute();&#10;    &#10;    if ($st-&gt;get_result()-&gt;fetch_row()) {&#10;        json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;Voucher code already exists&quot;], 409);&#10;    }&#10;&#10;    // Insert new voucher (chỉ dùng các cột có trong bảng)&#10;    $sql = &quot;INSERT INTO Voucher (code, type, value, min_order_value, start_date, end_date, usage_limit, per_user_limit, description) &#10;            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;    $st = $mysqli-&gt;prepare($sql);&#10;    $st-&gt;bind_param(&quot;ssddssisi&quot;, $code, $type, $value, $min_order_value, $start_date, $end_date, $usage_limit, $per_user_limit, $description);&#10;&#10;    if (!$st-&gt;execute()) {&#10;        throw new Exception(&quot;Failed to create voucher: &quot; . $st-&gt;error);&#10;    }&#10;&#10;    $voucherId = $mysqli-&gt;insert_id;&#10;&#10;    json([&#10;        &quot;success&quot; =&gt; true,&#10;        &quot;data&quot; =&gt; [&#10;            &quot;id&quot; =&gt; $voucherId,&#10;            &quot;code&quot; =&gt; $code,&#10;            &quot;message&quot; =&gt; &quot;Voucher created successfully&quot;&#10;        ]&#10;    ]);&#10;&#10;} catch (Exception $e) {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;$e-&gt;getMessage()], 500);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/api/store/voucher/update.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/api/store/voucher/update.php" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="&lt;?php&#10;require_once __DIR__ . '/../../auth/_bootstrap.php';&#10;require_once __DIR__ . '/../../_require_store.php';&#10;&#10;$id = (int)($_POST['id'] ?? 0);&#10;if ($id &lt;= 0) {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;Invalid voucher ID&quot;], 400);&#10;}&#10;&#10;// Get current voucher&#10;$checkSql = &quot;SELECT * FROM Voucher WHERE id = ? LIMIT 1&quot;;&#10;$st = $mysqli-&gt;prepare($checkSql);&#10;$st-&gt;bind_param(&quot;i&quot;, $id);&#10;$st-&gt;execute();&#10;$currentVoucher = $st-&gt;get_result()-&gt;fetch_assoc();&#10;&#10;if (!$currentVoucher) {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;Voucher not found&quot;], 404);&#10;}&#10;&#10;// Check if voucher has been used&#10;$usageSql = &quot;SELECT COUNT(*) as usage_count FROM VoucherUsage WHERE voucherId = ?&quot;;&#10;$st = $mysqli-&gt;prepare($usageSql);&#10;$st-&gt;bind_param(&quot;i&quot;, $id);&#10;$st-&gt;execute();&#10;$usageCount = $st-&gt;get_result()-&gt;fetch_assoc()['usage_count'];&#10;&#10;$hasBeenUsed = $usageCount &gt; 0;&#10;&#10;// Validate fields&#10;$code = strtoupper(trim($_POST['code'] ?? $currentVoucher['code']));&#10;$type = trim($_POST['type'] ?? $currentVoucher['type']);&#10;$value = isset($_POST['value']) ? (float)$_POST['value'] : (float)$currentVoucher['value'];&#10;&#10;// If voucher has been used, don't allow changing core properties&#10;if ($hasBeenUsed) {&#10;    if ($code !== $currentVoucher['code'] || $type !== $currentVoucher['type'] || $value != $currentVoucher['value']) {&#10;        json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;Cannot modify code, type, or value of used voucher&quot;], 400);&#10;    }&#10;}&#10;&#10;// Validate code format&#10;if (!preg_match('/^[A-Z0-9_]{3,20}$/', $code)) {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;Code must be 3-20 characters, uppercase letters, numbers, underscore only&quot;], 400);&#10;}&#10;&#10;if (!in_array($type, ['percent', 'amount']) || $value &lt;= 0) {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;Invalid type or value&quot;], 400);&#10;}&#10;&#10;if ($type === 'percent' &amp;&amp; $value &gt; 100) {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;Percentage cannot exceed 100%&quot;], 400);&#10;}&#10;&#10;// Other fields&#10;$min_order_value = isset($_POST['min_order_value']) ? (float)$_POST['min_order_value'] : (float)$currentVoucher['min_order_value'];&#10;$start_date = trim($_POST['start_date'] ?? $currentVoucher['start_date']);&#10;$end_date = trim($_POST['end_date'] ?? $currentVoucher['end_date']);&#10;$usage_limit = isset($_POST['usage_limit']) &amp;&amp; $_POST['usage_limit'] !== '' ? (int)$_POST['usage_limit'] : $currentVoucher['usage_limit'];&#10;$per_user_limit = isset($_POST['per_user_limit']) ? max(1, (int)$_POST['per_user_limit']) : (int)$currentVoucher['per_user_limit'];&#10;$description = trim($_POST['description'] ?? $currentVoucher['description'] ?? '');&#10;&#10;// Validate dates&#10;if (strtotime($end_date) &lt;= strtotime($start_date)) {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;End date must be after start date&quot;], 400);&#10;}&#10;&#10;// Validate usage limits&#10;if ($usage_limit !== null &amp;&amp; $usage_limit &lt;= 0) {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;Usage limit must be positive&quot;], 400);&#10;}&#10;&#10;// If voucher has been used, usage_limit cannot be less than current usage&#10;if ($hasBeenUsed &amp;&amp; $usage_limit !== null &amp;&amp; $usage_limit &lt; $usageCount) {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;Usage limit cannot be less than current usage ({$usageCount})&quot;], 400);&#10;}&#10;&#10;try {&#10;    // Check code uniqueness (if changed)&#10;    if ($code !== $currentVoucher['code']) {&#10;        $checkSql = &quot;SELECT id FROM Voucher WHERE code = ? AND id != ? LIMIT 1&quot;;&#10;        $st = $mysqli-&gt;prepare($checkSql);&#10;        $st-&gt;bind_param(&quot;si&quot;, $code, $id);&#10;        $st-&gt;execute();&#10;        &#10;        if ($st-&gt;get_result()-&gt;fetch_row()) {&#10;            json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;Voucher code already exists&quot;], 409);&#10;        }&#10;    }&#10;&#10;    // Update voucher (chỉ dùng các cột có trong bảng)&#10;    $sql = &quot;UPDATE Voucher SET &#10;                code = ?, &#10;                type = ?, &#10;                value = ?, &#10;                min_order_value = ?, &#10;                start_date = ?, &#10;                end_date = ?, &#10;                usage_limit = ?, &#10;                per_user_limit = ?, &#10;                description = ?&#10;            WHERE id = ?&quot;;&#10;&#10;    $st = $mysqli-&gt;prepare($sql);&#10;    $st-&gt;bind_param(&quot;ssddssisii&quot;, $code, $type, $value, $min_order_value, $start_date, $end_date, $usage_limit, $per_user_limit, $description, $id);&#10;&#10;    if (!$st-&gt;execute()) {&#10;        throw new Exception(&quot;Failed to update voucher: &quot; . $st-&gt;error);&#10;    }&#10;&#10;    if ($st-&gt;affected_rows === 0) {&#10;        json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;&quot;No changes made&quot;], 400);&#10;    }&#10;&#10;    json([&#10;        &quot;success&quot; =&gt; true,&#10;        &quot;message&quot; =&gt; &quot;Voucher updated successfully&quot;,&#10;        &quot;data&quot; =&gt; [&#10;            &quot;id&quot; =&gt; $id,&#10;            &quot;code&quot; =&gt; $code,&#10;            &quot;has_been_used&quot; =&gt; $hasBeenUsed,&#10;            &quot;usage_count&quot; =&gt; $usageCount&#10;        ]&#10;    ]);&#10;&#10;} catch (Exception $e) {&#10;    json([&quot;success&quot;=&gt;false,&quot;error&quot;=&gt;$e-&gt;getMessage()], 500);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/skymall/data/remote/ApiClient.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/skymall/data/remote/ApiClient.java" />
              <option name="originalContent" value="package com.example.skymall.data.remote;&#10;&#10;import android.content.Context;&#10;&#10;import okhttp3.OkHttpClient;&#10;import okhttp3.logging.HttpLoggingInterceptor;&#10;import retrofit2.Retrofit;&#10;import retrofit2.converter.gson.GsonConverterFactory;&#10;&#10;public class ApiClient {&#10;    private static Retrofit retrofit;&#10;    public static Retrofit get(String baseUrl){&#10;        if (retrofit == null){&#10;            HttpLoggingInterceptor log = new HttpLoggingInterceptor();&#10;            log.setLevel(HttpLoggingInterceptor.Level.BODY);&#10;            OkHttpClient client = new OkHttpClient.Builder().addInterceptor(log).build();&#10;            retrofit = new Retrofit.Builder()&#10;                    .baseUrl(&quot;https://lequangthanh.click/&quot;)&#10;                    .addConverterFactory(GsonConverterFactory.create())&#10;                    .client(client)&#10;                    .build();&#10;        }&#10;        return retrofit;&#10;    }&#10;    public static ApiService create(Context ctx){&#10;        HttpLoggingInterceptor logging = new HttpLoggingInterceptor();&#10;        logging.setLevel(HttpLoggingInterceptor.Level.BODY);&#10;&#10;        OkHttpClient ok = new OkHttpClient.Builder()&#10;                .addInterceptor(new AuthInterceptor(ctx))&#10;                .addInterceptor(logging) // Add logging to debug API calls&#10;                .build();&#10;        return new Retrofit.Builder()&#10;                .baseUrl(&quot;https://lequangthanh.click/&quot;) // domain thật của bạn&#10;                .client(ok)&#10;                .addConverterFactory(GsonConverterFactory.create())&#10;                .build().create(ApiService.class);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.skymall.data.remote;&#10;&#10;import android.content.Context;&#10;&#10;import okhttp3.OkHttpClient;&#10;import okhttp3.logging.HttpLoggingInterceptor;&#10;import retrofit2.Retrofit;&#10;import retrofit2.converter.gson.GsonConverterFactory;&#10;&#10;public class ApiClient {&#10;    private static final String BASE_URL = &quot;https://lequangthanh.click/&quot;;&#10;    private static Retrofit retrofitWithAuth;&#10;    private static Retrofit retrofitWithoutAuth;&#10;    &#10;    // Method cho API calls cần authentication&#10;    public static ApiService create(Context context) {&#10;        if (retrofitWithAuth == null) {&#10;            HttpLoggingInterceptor logging = new HttpLoggingInterceptor();&#10;            logging.setLevel(HttpLoggingInterceptor.Level.BODY);&#10;&#10;            OkHttpClient client = new OkHttpClient.Builder()&#10;                    .addInterceptor(new AuthInterceptor(context))&#10;                    .addInterceptor(logging)&#10;                    .build();&#10;                    &#10;            retrofitWithAuth = new Retrofit.Builder()&#10;                    .baseUrl(BASE_URL)&#10;                    .client(client)&#10;                    .addConverterFactory(GsonConverterFactory.create())&#10;                    .build();&#10;        }&#10;        return retrofitWithAuth.create(ApiService.class);&#10;    }&#10;    &#10;    // Method cho API calls không cần authentication (login, register)&#10;    public static ApiService createWithoutAuth() {&#10;        if (retrofitWithoutAuth == null) {&#10;            HttpLoggingInterceptor logging = new HttpLoggingInterceptor();&#10;            logging.setLevel(HttpLoggingInterceptor.Level.BODY);&#10;            &#10;            OkHttpClient client = new OkHttpClient.Builder()&#10;                    .addInterceptor(logging)&#10;                    .build();&#10;                    &#10;            retrofitWithoutAuth = new Retrofit.Builder()&#10;                    .baseUrl(BASE_URL)&#10;                    .client(client)&#10;                    .addConverterFactory(GsonConverterFactory.create())&#10;                    .build();&#10;        }&#10;        return retrofitWithoutAuth.create(ApiService.class);&#10;    }&#10;    &#10;    // Method tương thích với code cũ&#10;    public static Retrofit getRetrofitInstance() {&#10;        return getRetrofitInstance(null);&#10;    }&#10;    &#10;    public static Retrofit getRetrofitInstance(Context context) {&#10;        if (context != null) {&#10;            return retrofitWithAuth != null ? retrofitWithAuth : &#10;                   (retrofitWithAuth = createRetrofitWithAuth(context));&#10;        } else {&#10;            return retrofitWithoutAuth != null ? retrofitWithoutAuth :&#10;                   (retrofitWithoutAuth = createRetrofitWithoutAuth());&#10;        }&#10;    }&#10;    &#10;    private static Retrofit createRetrofitWithAuth(Context context) {&#10;        HttpLoggingInterceptor logging = new HttpLoggingInterceptor();&#10;        logging.setLevel(HttpLoggingInterceptor.Level.BODY);&#10;&#10;        OkHttpClient client = new OkHttpClient.Builder()&#10;                .addInterceptor(new AuthInterceptor(context))&#10;                .addInterceptor(logging)&#10;                .build();&#10;                &#10;        return new Retrofit.Builder()&#10;                .baseUrl(BASE_URL)&#10;                .client(client)&#10;                .addConverterFactory(GsonConverterFactory.create())&#10;                .build();&#10;    }&#10;    &#10;    private static Retrofit createRetrofitWithoutAuth() {&#10;        HttpLoggingInterceptor logging = new HttpLoggingInterceptor();&#10;        logging.setLevel(HttpLoggingInterceptor.Level.BODY);&#10;        &#10;        OkHttpClient client = new OkHttpClient.Builder()&#10;                .addInterceptor(logging)&#10;                .build();&#10;                &#10;        return new Retrofit.Builder()&#10;                .baseUrl(BASE_URL)&#10;                .client(client)&#10;                .addConverterFactory(GsonConverterFactory.create())&#10;                .build();&#10;    }&#10;    &#10;    // Reset instances khi cần (ví dụ khi logout)&#10;    public static void reset() {&#10;        retrofitWithAuth = null;&#10;        retrofitWithoutAuth = null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/skymall/data/remote/ApiManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/skymall/data/remote/ApiManager.java" />
              <option name="updatedContent" value="package com.example.skymall.data.remote;&#10;&#10;import android.content.Context;&#10;&#10;/**&#10; * Singleton class để quản lý ApiService một cách thống nhất&#10; * Giúp tránh việc tạo nhiều instance và đảm bảo tái sử dụng&#10; */&#10;public class ApiManager {&#10;    private static ApiManager instance;&#10;    private ApiService apiService;&#10;    private Context context;&#10;&#10;    private ApiManager(Context context) {&#10;        this.context = context.getApplicationContext();&#10;        this.apiService = ApiClient.create(this.context);&#10;    }&#10;&#10;    public static synchronized ApiManager getInstance(Context context) {&#10;        if (instance == null) {&#10;            instance = new ApiManager(context);&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    public ApiService getApiService() {&#10;        // Kiểm tra nếu apiService bị null thì tạo lại&#10;        if (apiService == null) {&#10;            apiService = ApiClient.create(context);&#10;        }&#10;        return apiService;&#10;    }&#10;&#10;    /**&#10;     * Tạo ApiService không cần authentication (cho login, register)&#10;     */&#10;    public ApiService getApiServiceWithoutAuth() {&#10;        return ApiClient.createWithoutAuth();&#10;    }&#10;&#10;    /**&#10;     * Reset ApiService khi cần (ví dụ khi logout)&#10;     */&#10;    public void reset() {&#10;        apiService = null;&#10;        ApiClient.reset();&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem ApiService đã được khởi tạo chưa&#10;     */&#10;    public boolean isInitialized() {&#10;        return apiService != null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/skymall/data/repository/CustomerAddressRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/skymall/data/repository/CustomerAddressRepository.java" />
              <option name="updatedContent" value="package com.example.skymall.data.repository;&#10;&#10;import android.content.Context;&#10;import com.example.skymall.data.remote.ApiClient;&#10;import com.example.skymall.data.remote.ApiService;&#10;import com.example.skymall.data.remote.DTO.AddressCreateResp;&#10;import com.example.skymall.data.remote.DTO.AddressListResp;&#10;import com.example.skymall.data.remote.DTO.BaseResp;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class CustomerAddressRepository {&#10;    private ApiService apiService;&#10;    &#10;    public CustomerAddressRepository(Context context) {&#10;        this.apiService = ApiClient.create(context);&#10;    }&#10;    &#10;    public interface CreateAddressCallback {&#10;        void onSuccess(int addressId);&#10;        void onError(String error);&#10;    }&#10;    &#10;    public interface AddressListCallback {&#10;        void onSuccess(AddressListResp response);&#10;        void onError(String error);&#10;    }&#10;    &#10;    public interface UpdateDeleteCallback {&#10;        void onSuccess();&#10;        void onError(String error);&#10;    }&#10;    &#10;    public void createAddress(String name, String phone, String addressLine, String city, &#10;                             String district, int isDefault, CreateAddressCallback callback) {&#10;        Call&lt;AddressCreateResp&gt; call = apiService.createAddress(name, phone, addressLine, city, district, isDefault);&#10;        call.enqueue(new Callback&lt;AddressCreateResp&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;AddressCreateResp&gt; call, Response&lt;AddressCreateResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    AddressCreateResp resp = response.body();&#10;                    if (resp.success) {&#10;                        callback.onSuccess(resp.id);&#10;                    } else {&#10;                        callback.onError(resp.error != null ? resp.error : &quot;Thêm địa chỉ thất bại&quot;);&#10;                    }&#10;                } else {&#10;                    callback.onError(&quot;Lỗi kết nối server&quot;);&#10;                }&#10;            }&#10;            &#10;            @Override&#10;            public void onFailure(Call&lt;AddressCreateResp&gt; call, Throwable t) {&#10;                callback.onError(&quot;Lỗi mạng: &quot; + t.getMessage());&#10;            }&#10;        });&#10;    }&#10;    &#10;    public void getAddresses(AddressListCallback callback) {&#10;        Call&lt;AddressListResp&gt; call = apiService.getAddresses();&#10;        call.enqueue(new Callback&lt;AddressListResp&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;AddressListResp&gt; call, Response&lt;AddressListResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    AddressListResp resp = response.body();&#10;                    if (resp.success) {&#10;                        callback.onSuccess(resp);&#10;                    } else {&#10;                        callback.onError(resp.error != null ? resp.error : &quot;Không thể tải danh sách địa chỉ&quot;);&#10;                    }&#10;                } else {&#10;                    callback.onError(&quot;Lỗi kết nối server&quot;);&#10;                }&#10;            }&#10;            &#10;            @Override&#10;            public void onFailure(Call&lt;AddressListResp&gt; call, Throwable t) {&#10;                callback.onError(&quot;Lỗi mạng: &quot; + t.getMessage());&#10;            }&#10;        });&#10;    }&#10;    &#10;    public void updateAddress(int id, String name, String phone, String addressLine, String city,&#10;                             String district, int isDefault, UpdateDeleteCallback callback) {&#10;        Call&lt;BaseResp&gt; call = apiService.updateAddress(id, name, phone, addressLine, city, district, isDefault);&#10;        call.enqueue(new Callback&lt;BaseResp&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;BaseResp&gt; call, Response&lt;BaseResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    callback.onSuccess();&#10;                } else {&#10;                    callback.onError(&quot;Cập nhật địa chỉ thất bại&quot;);&#10;                }&#10;            }&#10;            &#10;            @Override&#10;            public void onFailure(Call&lt;BaseResp&gt; call, Throwable t) {&#10;                callback.onError(&quot;Lỗi mạng: &quot; + t.getMessage());&#10;            }&#10;        });&#10;    }&#10;    &#10;    public void deleteAddress(int id, UpdateDeleteCallback callback) {&#10;        Call&lt;BaseResp&gt; call = apiService.deleteAddress(id);&#10;        call.enqueue(new Callback&lt;BaseResp&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;BaseResp&gt; call, Response&lt;BaseResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    callback.onSuccess();&#10;                } else {&#10;                    callback.onError(&quot;Xóa địa chỉ thất bại&quot;);&#10;                }&#10;            }&#10;            &#10;            @Override&#10;            public void onFailure(Call&lt;BaseResp&gt; call, Throwable t) {&#10;                callback.onError(&quot;Lỗi mạng: &quot; + t.getMessage());&#10;            }&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/HomeFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/HomeFragment.java" />
              <option name="originalContent" value="package com.example.skymall.ui;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.text.Editable;&#10;import android.text.TextWatcher;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import androidx.viewpager2.widget.ViewPager2;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.Category;&#10;import com.example.skymall.data.model.Product;&#10;import com.example.skymall.data.remote.ApiClient;&#10;import com.example.skymall.data.remote.ApiManager;&#10;import com.example.skymall.data.remote.ApiService;&#10;import com.example.skymall.data.remote.DTO.CategoryListResp;&#10;import com.example.skymall.data.remote.DTO.ProductListResp;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Collections;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class HomeFragment extends Fragment {&#10;&#10;    private RecyclerView rvCat, rvFlash, rvRecommended;&#10;    private ViewPager2 vpBanner;&#10;    private LinearLayout dots;&#10;    private EditText etSearch;&#10;    private ApiService api;&#10;&#10;    private BannerAdapter bannerAdapter;&#10;    private CategoryAdapter categoryAdapter;&#10;    private FlashSaleAdapter flashSaleAdapter;&#10;    private ProductGridAdapter recommendedAdapter;&#10;&#10;    private Handler autoScrollHandler = new Handler();&#10;    private Runnable autoScrollRunnable;&#10;    private int currentBannerPage = 0;&#10;&#10;    private List&lt;String&gt; bannerImages = new ArrayList&lt;&gt;();&#10;    private List&lt;Product&gt; flashSaleProducts = new ArrayList&lt;&gt;();&#10;    private List&lt;Product&gt; recommendedProducts = new ArrayList&lt;&gt;();&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_home, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        initViews(view);&#10;        setupApi();&#10;        setupAdapters();&#10;        setupSearch();&#10;        setupBannerAutoScroll();&#10;        loadData();&#10;    }&#10;&#10;    private void initViews(View view) {&#10;        vpBanner = view.findViewById(R.id.vpBanner);&#10;        dots = view.findViewById(R.id.dots);&#10;        rvCat = view.findViewById(R.id.rvCategories);&#10;        rvFlash = view.findViewById(R.id.rvFlashSale);&#10;        rvRecommended = view.findViewById(R.id.rvRecommended);&#10;        etSearch = view.findViewById(R.id.etSearch);&#10;    }&#10;&#10;    private void setupApi() {&#10;        // Sử dụng ApiManager thay vì tạo ApiService trực tiếp&#10;        api = ApiManager.getInstance(getContext()).getApiService();&#10;    }&#10;&#10;    private void setupAdapters() {&#10;        // Banner adapter&#10;        setupBannerImages();&#10;        bannerAdapter = new BannerAdapter(bannerImages);&#10;        vpBanner.setAdapter(bannerAdapter);&#10;        setupBannerDots();&#10;&#10;        // Category adapter&#10;        categoryAdapter = new CategoryAdapter(new ArrayList&lt;&gt;(), this::onCategoryClick);&#10;        rvCat.setLayoutManager(new GridLayoutManager(getContext(), 4));&#10;        rvCat.setAdapter(categoryAdapter);&#10;&#10;        // Flash sale adapter (horizontal scroll with animation)&#10;        flashSaleAdapter = new FlashSaleAdapter(flashSaleProducts, this::onProductClick);&#10;        rvFlash.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false));&#10;        rvFlash.setAdapter(flashSaleAdapter);&#10;&#10;        // Recommended products adapter&#10;        recommendedAdapter = new ProductGridAdapter(recommendedProducts, this::onProductClick);&#10;        rvRecommended.setLayoutManager(new GridLayoutManager(getContext(), 2));&#10;        rvRecommended.setAdapter(recommendedAdapter);&#10;    }&#10;&#10;    private void setupBannerImages() {&#10;        // Random banner images&#10;        bannerImages.add(&quot;https://via.placeholder.com/400x200/FF6B6B/FFFFFF?text=Flash+Sale+50%25&quot;);&#10;        bannerImages.add(&quot;https://via.placeholder.com/400x200/4ECDC4/FFFFFF?text=New+Arrivals&quot;);&#10;        bannerImages.add(&quot;https://via.placeholder.com/400x200/45B7D1/FFFFFF?text=Free+Shipping&quot;);&#10;        bannerImages.add(&quot;https://via.placeholder.com/400x200/96CEB4/FFFFFF?text=Special+Offer&quot;);&#10;        bannerImages.add(&quot;https://via.placeholder.com/400x200/FFEAA7/FFFFFF?text=Weekend+Deal&quot;);&#10;    }&#10;&#10;    private void setupBannerDots() {&#10;        dots.removeAllViews();&#10;        for (int i = 0; i &lt; bannerImages.size(); i++) {&#10;            ImageView dot = new ImageView(getContext());&#10;            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(24, 24);&#10;            params.setMargins(8, 0, 8, 0);&#10;            dot.setLayoutParams(params);&#10;            dot.setImageResource(i == 0 ? R.drawable.dot_active : R.drawable.dot_inactive);&#10;            dots.addView(dot);&#10;        }&#10;&#10;        vpBanner.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() {&#10;            @Override&#10;            public void onPageSelected(int position) {&#10;                currentBannerPage = position;&#10;                updateBannerDots(position);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void updateBannerDots(int position) {&#10;        for (int i = 0; i &lt; dots.getChildCount(); i++) {&#10;            ImageView dot = (ImageView) dots.getChildAt(i);&#10;            dot.setImageResource(i == position ? R.drawable.dot_active : R.drawable.dot_inactive);&#10;        }&#10;    }&#10;&#10;    private void setupBannerAutoScroll() {&#10;        autoScrollRunnable = new Runnable() {&#10;            @Override&#10;            public void run() {&#10;                if (bannerImages.size() &gt; 1) {&#10;                    currentBannerPage = (currentBannerPage + 1) % bannerImages.size();&#10;                    vpBanner.setCurrentItem(currentBannerPage, true);&#10;                    autoScrollHandler.postDelayed(this, 3000); // Auto scroll every 3 seconds&#10;                }&#10;            }&#10;        };&#10;        autoScrollHandler.postDelayed(autoScrollRunnable, 3000);&#10;    }&#10;&#10;    private void setupSearch() {&#10;        etSearch.addTextChangedListener(new TextWatcher() {&#10;            @Override&#10;            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}&#10;&#10;            @Override&#10;            public void onTextChanged(CharSequence s, int start, int before, int count) {}&#10;&#10;            @Override&#10;            public void afterTextChanged(Editable s) {&#10;                String query = s.toString().trim();&#10;                if (query.length() &gt; 2) {&#10;                    searchProducts(query);&#10;                } else if (query.length() == 0) {&#10;                    // Reset to recommended products&#10;                    loadRecommendedProducts();&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private void loadData() {&#10;        loadCategories();&#10;        loadFlashSaleProducts();&#10;        loadRecommendedProducts();&#10;    }&#10;&#10;    private void loadCategories() {&#10;        // TODO: Implement API call when ApiClient is properly set up&#10;        // For now, skip loading or use mock data&#10;        if (api == null) {&#10;            // Skip loading categories until API is implemented&#10;            return;&#10;        }&#10;&#10;        api.getCategories().enqueue(new Callback&lt;CategoryListResp&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;CategoryListResp&gt; call, Response&lt;CategoryListResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null &amp;&amp; response.body().categories != null) {&#10;                    categoryAdapter.updateCategories(response.body().categories);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;CategoryListResp&gt; call, Throwable t) {&#10;                // Handle error silently or show a subtle error message&#10;            }&#10;        });&#10;    }&#10;&#10;    private void loadFlashSaleProducts() {&#10;        // TODO: Implement API call when ApiClient is properly set up&#10;        // For now, use mock data to test UI&#10;        if (api == null) {&#10;            // Create mock flash sale products&#10;            flashSaleProducts.clear();&#10;            flashSaleProducts.add(new Product(1, &quot;iPhone 15 Pro Max&quot;, &quot;Điện thoại cao cấp&quot;, 29990000, &quot;https://via.placeholder.com/300x300&quot;, 50, 1));&#10;            flashSaleProducts.add(new Product(2, &quot;Samsung Galaxy S24&quot;, &quot;Điện thoại Samsung&quot;, 24990000, &quot;https://via.placeholder.com/300x300&quot;, 30, 1));&#10;            flashSaleProducts.add(new Product(3, &quot;MacBook Air M2&quot;, &quot;Laptop Apple&quot;, 32990000, &quot;https://via.placeholder.com/300x300&quot;, 20, 1));&#10;            flashSaleProducts.add(new Product(4, &quot;iPad Pro 12.9&quot;, &quot;Máy tính bảng&quot;, 27990000, &quot;https://via.placeholder.com/300x300&quot;, 25, 1));&#10;            flashSaleProducts.add(new Product(5, &quot;AirPods Pro 2&quot;, &quot;Tai nghe không dây&quot;, 6990000, &quot;https://via.placeholder.com/300x300&quot;, 100, 1));&#10;&#10;            // Add random flash sale discount (10-50%)&#10;            for (Product product : flashSaleProducts) {&#10;                product.discountPercentage = 10 + (int)(Math.random() * 40);&#10;            }&#10;&#10;            flashSaleAdapter.notifyDataSetChanged();&#10;            return;&#10;        }&#10;&#10;        api.storeProducts(null, 1, 20).enqueue(new Callback&lt;ProductListResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;ProductListResp&gt; call, @NonNull Response&lt;ProductListResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null &amp;&amp; response.body().products != null) {&#10;                    List&lt;Product&gt; allProducts = new ArrayList&lt;&gt;(response.body().products);&#10;                    // Randomly select 5-8 products for flash sale&#10;                    Collections.shuffle(allProducts);&#10;                    flashSaleProducts.clear();&#10;                    int flashSaleCount = Math.min(8, allProducts.size());&#10;                    for (int i = 0; i &lt; flashSaleCount; i++) {&#10;                        Product product = allProducts.get(i);&#10;                        // Add flash sale discount (random 10-50%)&#10;                        product.discountPercentage = 10 + (int)(Math.random() * 40);&#10;                        flashSaleProducts.add(product);&#10;                    }&#10;                    flashSaleAdapter.notifyDataSetChanged();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;ProductListResp&gt; call, @NonNull Throwable t) {&#10;                // Handle error - có thể log hoặc hiển thị thông báo lỗi&#10;            }&#10;        });&#10;    }&#10;&#10;    private void loadRecommendedProducts() {&#10;        // TODO: Implement API call when ApiClient is properly set up&#10;        // For now, skip loading or use mock data&#10;        if (api == null) {&#10;            // Skip loading recommended products until API is implemented&#10;            return;&#10;        }&#10;&#10;        api.getAllProducts().enqueue(new Callback&lt;ProductListResp&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;ProductListResp&gt; call, Response&lt;ProductListResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null &amp;&amp; response.body().products != null) {&#10;                    List&lt;Product&gt; allProducts = new ArrayList&lt;&gt;(response.body().products);&#10;&#10;                    // Sort by popularity (random for now, can be based on sales data)&#10;                    Collections.shuffle(allProducts);&#10;&#10;                    recommendedProducts.clear();&#10;                    recommendedProducts.addAll(allProducts);&#10;                    recommendedAdapter.notifyDataSetChanged();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;ProductListResp&gt; call, Throwable t) {&#10;                // Handle error&#10;            }&#10;        });&#10;    }&#10;&#10;    private void searchProducts(String query) {&#10;        // TODO: Implement search API call&#10;        // For now, filter from existing products&#10;        List&lt;Product&gt; filteredProducts = new ArrayList&lt;&gt;();&#10;        for (Product product : recommendedProducts) {&#10;            if (product.name.toLowerCase().contains(query.toLowerCase())) {&#10;                filteredProducts.add(product);&#10;            }&#10;        }&#10;        recommendedAdapter.updateProducts(filteredProducts);&#10;    }&#10;&#10;    private void onCategoryClick(Category category) {&#10;        // Navigate to store with category filter&#10;        // Intent intent = new Intent(getContext(), StoreActivity.class);&#10;        // intent.putExtra(&quot;category_id&quot;, category.id);&#10;        // startActivity(intent);&#10;&#10;        // Temporary: Show toast until StoreActivity is created&#10;        Toast.makeText(getContext(), &quot;Chọn danh mục: &quot; + category.name, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    private void onProductClick(Product product) {&#10;        // Navigate to product detail&#10;        // Intent intent = new Intent(getContext(), ProductDetailActivity.class);&#10;        // intent.putExtra(&quot;product_id&quot;, product.id);&#10;        // startActivity(intent);&#10;&#10;        // Temporary: Show toast until ProductDetailActivity is created&#10;        Toast.makeText(getContext(), &quot;Chọn sản phẩm: &quot; + product.name, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        if (autoScrollHandler != null &amp;&amp; autoScrollRunnable != null) {&#10;            autoScrollHandler.removeCallbacks(autoScrollRunnable);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.skymall.ui;&#10;&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.text.Editable;&#10;import android.text.TextWatcher;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import android.widget.LinearLayout;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import androidx.viewpager2.widget.ViewPager2;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.Category;&#10;import com.example.skymall.data.model.Product;&#10;import com.example.skymall.data.remote.ApiManager;&#10;import com.example.skymall.data.remote.ApiService;&#10;import com.example.skymall.data.remote.DTO.CategoryListResp;&#10;import com.example.skymall.data.remote.DTO.ProductListResp;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Collections;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class HomeFragment extends Fragment {&#10;&#10;    private RecyclerView rvCat, rvFlash, rvRecommended;&#10;    private ViewPager2 vpBanner;&#10;    private LinearLayout dots;&#10;    private EditText etSearch;&#10;    private ApiService api;&#10;&#10;    private BannerAdapter bannerAdapter;&#10;    private CategoryAdapter categoryAdapter;&#10;    private FlashSaleAdapter flashSaleAdapter;&#10;    private ProductGridAdapter recommendedAdapter;&#10;&#10;    private final Handler autoScrollHandler = new Handler();&#10;    private Runnable autoScrollRunnable;&#10;    private int currentBannerPage = 0;&#10;&#10;    private final List&lt;String&gt; bannerImages = new ArrayList&lt;&gt;();&#10;    private final List&lt;Product&gt; flashSaleProducts = new ArrayList&lt;&gt;();&#10;    private final List&lt;Product&gt; recommendedProducts = new ArrayList&lt;&gt;();&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_home, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        initViews(view);&#10;        setupApi();&#10;        setupAdapters();&#10;        setupSearch();&#10;        setupBannerAutoScroll();&#10;        loadData();&#10;    }&#10;&#10;    private void initViews(View view) {&#10;        vpBanner = view.findViewById(R.id.vpBanner);&#10;        dots = view.findViewById(R.id.dots);&#10;        rvCat = view.findViewById(R.id.rvCategories);&#10;        rvFlash = view.findViewById(R.id.rvFlashSale);&#10;        rvRecommended = view.findViewById(R.id.rvRecommended);&#10;        etSearch = view.findViewById(R.id.etSearch);&#10;    }&#10;&#10;    private void setupApi() {&#10;        // Sử dụng ApiManager thay vì tạo ApiService trực tiếp&#10;        api = ApiManager.getInstance(getContext()).getApiService();&#10;    }&#10;&#10;    private void setupAdapters() {&#10;        // Banner adapter&#10;        setupBannerImages();&#10;        bannerAdapter = new BannerAdapter(bannerImages);&#10;        vpBanner.setAdapter(bannerAdapter);&#10;        setupBannerDots();&#10;&#10;        // Category adapter&#10;        categoryAdapter = new CategoryAdapter(new ArrayList&lt;&gt;(), this::onCategoryClick);&#10;        rvCat.setLayoutManager(new GridLayoutManager(getContext(), 4));&#10;        rvCat.setAdapter(categoryAdapter);&#10;&#10;        // Flash sale adapter (horizontal scroll with animation)&#10;        flashSaleAdapter = new FlashSaleAdapter(flashSaleProducts, this::onProductClick);&#10;        rvFlash.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false));&#10;        rvFlash.setAdapter(flashSaleAdapter);&#10;&#10;        // Recommended products adapter&#10;        recommendedAdapter = new ProductGridAdapter(recommendedProducts, this::onProductClick);&#10;        rvRecommended.setLayoutManager(new GridLayoutManager(getContext(), 2));&#10;        rvRecommended.setAdapter(recommendedAdapter);&#10;    }&#10;&#10;    private void setupBannerImages() {&#10;        // Random banner images&#10;        bannerImages.add(&quot;https://via.placeholder.com/400x200/FF6B6B/FFFFFF?text=Flash+Sale+50%25&quot;);&#10;        bannerImages.add(&quot;https://via.placeholder.com/400x200/4ECDC4/FFFFFF?text=New+Arrivals&quot;);&#10;        bannerImages.add(&quot;https://via.placeholder.com/400x200/45B7D1/FFFFFF?text=Free+Shipping&quot;);&#10;        bannerImages.add(&quot;https://via.placeholder.com/400x200/96CEB4/FFFFFF?text=Special+Offer&quot;);&#10;        bannerImages.add(&quot;https://via.placeholder.com/400x200/FFEAA7/FFFFFF?text=Weekend+Deal&quot;);&#10;    }&#10;&#10;    private void setupBannerDots() {&#10;        dots.removeAllViews();&#10;        for (int i = 0; i &lt; bannerImages.size(); i++) {&#10;            ImageView dot = new ImageView(getContext());&#10;            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(24, 24);&#10;            params.setMargins(8, 0, 8, 0);&#10;            dot.setLayoutParams(params);&#10;            dot.setImageResource(i == 0 ? R.drawable.dot_active : R.drawable.dot_inactive);&#10;            dots.addView(dot);&#10;        }&#10;&#10;        vpBanner.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() {&#10;            @Override&#10;            public void onPageSelected(int position) {&#10;                currentBannerPage = position;&#10;                updateBannerDots(position);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void updateBannerDots(int position) {&#10;        for (int i = 0; i &lt; dots.getChildCount(); i++) {&#10;            ImageView dot = (ImageView) dots.getChildAt(i);&#10;            dot.setImageResource(i == position ? R.drawable.dot_active : R.drawable.dot_inactive);&#10;        }&#10;    }&#10;&#10;    private void setupBannerAutoScroll() {&#10;        autoScrollRunnable = new Runnable() {&#10;            @Override&#10;            public void run() {&#10;                if (bannerImages.size() &gt; 1) {&#10;                    currentBannerPage = (currentBannerPage + 1) % bannerImages.size();&#10;                    vpBanner.setCurrentItem(currentBannerPage, true);&#10;                    autoScrollHandler.postDelayed(this, 3000); // Auto scroll every 3 seconds&#10;                }&#10;            }&#10;        };&#10;        autoScrollHandler.postDelayed(autoScrollRunnable, 3000);&#10;    }&#10;&#10;    private void setupSearch() {&#10;        etSearch.addTextChangedListener(new TextWatcher() {&#10;            @Override&#10;            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}&#10;&#10;            @Override&#10;            public void onTextChanged(CharSequence s, int start, int before, int count) {}&#10;&#10;            @Override&#10;            public void afterTextChanged(Editable s) {&#10;                String query = s.toString().trim();&#10;                if (query.length() &gt; 2) {&#10;                    searchProducts(query);&#10;                } else if (query.isEmpty()) {&#10;                    // Reset to recommended products&#10;                    loadRecommendedProducts();&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private void loadData() {&#10;        loadCategories();&#10;        loadFlashSaleProducts();&#10;        loadRecommendedProducts();&#10;    }&#10;&#10;    private void loadCategories() {&#10;        if (api == null) {&#10;            return;&#10;        }&#10;&#10;        // Sử dụng storeCategories thay vì getCategories (không tồn tại)&#10;        api.storeCategories().enqueue(new Callback&lt;CategoryListResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;CategoryListResp&gt; call, @NonNull Response&lt;CategoryListResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null &amp;&amp; response.body().data != null) {&#10;                    categoryAdapter.updateCategories(response.body().data);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;CategoryListResp&gt; call, @NonNull Throwable t) {&#10;                // Handle error silently or show a subtle error message&#10;            }&#10;        });&#10;    }&#10;&#10;    private void loadFlashSaleProducts() {&#10;        if (api == null) {&#10;            // Create mock flash sale products&#10;            flashSaleProducts.clear();&#10;            flashSaleProducts.add(new Product(1, &quot;iPhone 15 Pro Max&quot;, &quot;Điện thoại cao cấp&quot;, 29990000, &quot;https://via.placeholder.com/300x300&quot;, 50, 1));&#10;            flashSaleProducts.add(new Product(2, &quot;Samsung Galaxy S24&quot;, &quot;Điện thoại Samsung&quot;, 24990000, &quot;https://via.placeholder.com/300x300&quot;, 30, 1));&#10;            flashSaleProducts.add(new Product(3, &quot;MacBook Air M2&quot;, &quot;Laptop Apple&quot;, 32990000, &quot;https://via.placeholder.com/300x300&quot;, 20, 1));&#10;            flashSaleProducts.add(new Product(4, &quot;iPad Pro 12.9&quot;, &quot;Máy tính bảng&quot;, 27990000, &quot;https://via.placeholder.com/300x300&quot;, 25, 1));&#10;            flashSaleProducts.add(new Product(5, &quot;AirPods Pro 2&quot;, &quot;Tai nghe không dây&quot;, 6990000, &quot;https://via.placeholder.com/300x300&quot;, 100, 1));&#10;&#10;            // Add random flash sale discount (10-50%)&#10;            for (Product product : flashSaleProducts) {&#10;                product.discountPercentage = 10 + (int)(Math.random() * 40);&#10;            }&#10;&#10;            flashSaleAdapter.notifyItemRangeInserted(0, flashSaleProducts.size());&#10;            return;&#10;        }&#10;&#10;        // Sử dụng getFlashSale thay vì storeProducts&#10;        api.getFlashSale().enqueue(new Callback&lt;List&lt;Product&gt;&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;List&lt;Product&gt;&gt; call, @NonNull Response&lt;List&lt;Product&gt;&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    flashSaleProducts.clear();&#10;                    flashSaleProducts.addAll(response.body());&#10;                    &#10;                    // Add flash sale discount for products that don't have one&#10;                    for (Product product : flashSaleProducts) {&#10;                        if (product.discountPercentage == 0) {&#10;                            product.discountPercentage = 10 + (int)(Math.random() * 40);&#10;                        }&#10;                    }&#10;                    flashSaleAdapter.notifyDataSetChanged();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;List&lt;Product&gt;&gt; call, @NonNull Throwable t) {&#10;                // Handle error - có thể log hoặc hiển thị thông báo lỗi&#10;            }&#10;        });&#10;    }&#10;&#10;    private void loadRecommendedProducts() {&#10;        if (api == null) {&#10;            return;&#10;        }&#10;&#10;        // Sử dụng storeProducts thay vì getAllProducts&#10;        api.storeProducts(null, 1, 20).enqueue(new Callback&lt;ProductListResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;ProductListResp&gt; call, @NonNull Response&lt;ProductListResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null &amp;&amp; response.body().data != null) {&#10;                    List&lt;Product&gt; allProducts = new ArrayList&lt;&gt;(response.body().data);&#10;&#10;                    // Sort by popularity (random for now, can be based on sales data)&#10;                    Collections.shuffle(allProducts);&#10;&#10;                    recommendedProducts.clear();&#10;                    recommendedProducts.addAll(allProducts);&#10;                    recommendedAdapter.notifyDataSetChanged();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;ProductListResp&gt; call, @NonNull Throwable t) {&#10;                // Handle error&#10;            }&#10;        });&#10;    }&#10;&#10;    private void searchProducts(String query) {&#10;        // TODO: Implement search API call&#10;        // For now, filter from existing products&#10;        List&lt;Product&gt; filteredProducts = new ArrayList&lt;&gt;();&#10;        for (Product product : recommendedProducts) {&#10;            if (product.name.toLowerCase().contains(query.toLowerCase())) {&#10;                filteredProducts.add(product);&#10;            }&#10;        }&#10;        recommendedAdapter.updateProducts(filteredProducts);&#10;    }&#10;&#10;    private void onCategoryClick(Category category) {&#10;        // Navigate to store with category filter&#10;        // Intent intent = new Intent(getContext(), StoreActivity.class);&#10;        // intent.putExtra(&quot;category_id&quot;, category.id);&#10;        // startActivity(intent);&#10;&#10;        // Temporary: Show toast until StoreActivity is created&#10;        Toast.makeText(getContext(), &quot;Chọn danh mục: &quot; + category.name, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    private void onProductClick(Product product) {&#10;        // Navigate to product detail&#10;        // Intent intent = new Intent(getContext(), ProductDetailActivity.class);&#10;        // intent.putExtra(&quot;product_id&quot;, product.id);&#10;        // startActivity(intent);&#10;&#10;        // Temporary: Show toast until ProductDetailActivity is created&#10;        Toast.makeText(getContext(), &quot;Chọn sản phẩm: &quot; + product.name, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        if (autoScrollHandler != null &amp;&amp; autoScrollRunnable != null) {&#10;            autoScrollHandler.removeCallbacks(autoScrollRunnable);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/ProductGridAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/ProductGridAdapter.java" />
              <option name="originalContent" value="package com.example.skymall.ui;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.Product;&#10;import com.example.skymall.utils.MoneyFmt;&#10;&#10;import java.util.List;&#10;&#10;public class ProductGridAdapter extends RecyclerView.Adapter&lt;ProductGridAdapter.ProductViewHolder&gt; {&#10;&#10;    private List&lt;Product&gt; products;&#10;    private OnProductClickListener listener;&#10;&#10;    public interface OnProductClickListener {&#10;        void onProductClick(Product product);&#10;    }&#10;&#10;    public ProductGridAdapter(List&lt;Product&gt; products, OnProductClickListener listener) {&#10;        this.products = products;&#10;        this.listener = listener;&#10;    }&#10;&#10;    public void updateProducts(List&lt;Product&gt; newProducts) {&#10;        this.products.clear();&#10;        this.products.addAll(newProducts);&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ProductViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_product_grid, parent, false);&#10;        return new ProductViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ProductViewHolder holder, int position) {&#10;        Product product = products.get(position);&#10;&#10;        holder.tvName.setText(product.name);&#10;        holder.tvPrice.setText(MoneyFmt.format(product.price));&#10;&#10;        // Show stock status&#10;        if (product.quantity &gt; 0) {&#10;            holder.tvStock.setText(&quot;Còn &quot; + product.quantity + &quot; sản phẩm&quot;);&#10;            holder.tvStock.setTextColor(holder.itemView.getContext().getResources().getColor(android.R.color.holo_green_dark));&#10;        } else {&#10;            holder.tvStock.setText(&quot;Hết hàng&quot;);&#10;            holder.tvStock.setTextColor(holder.itemView.getContext().getResources().getColor(android.R.color.holo_red_dark));&#10;        }&#10;&#10;        // Load product image&#10;        if (product.image != null &amp;&amp; !product.image.isEmpty()) {&#10;            Glide.with(holder.itemView.getContext())&#10;                    .load(product.image)&#10;                    .placeholder(R.drawable.placeholder_product)&#10;                    .into(holder.ivProduct);&#10;        }&#10;&#10;        holder.itemView.setOnClickListener(v -&gt; {&#10;            if (listener != null) {&#10;                listener.onProductClick(product);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return products.size();&#10;    }&#10;&#10;    static class ProductViewHolder extends RecyclerView.ViewHolder {&#10;        ImageView ivProduct;&#10;        TextView tvName, tvPrice, tvStock;&#10;&#10;        ProductViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            ivProduct = itemView.findViewById(R.id.ivProduct);&#10;            tvName = itemView.findViewById(R.id.tvProductName);&#10;            tvPrice = itemView.findViewById(R.id.tvPrice);&#10;            tvStock = itemView.findViewById(R.id.tvStock);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.skymall.ui;&#13;&#10;&#13;&#10;import android.view.LayoutInflater;&#13;&#10;import android.view.View;&#13;&#10;import android.view.ViewGroup;&#13;&#10;import android.widget.ImageView;&#13;&#10;import android.widget.TextView;&#13;&#10;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;&#13;&#10;import com.bumptech.glide.Glide;&#13;&#10;import com.example.skymall.R;&#13;&#10;import com.example.skymall.data.model.Product;&#13;&#10;import com.example.skymall.utils.MoneyFmt;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class ProductGridAdapter extends RecyclerView.Adapter&lt;ProductGridAdapter.ProductViewHolder&gt; {&#13;&#10;&#13;&#10;    private List&lt;Product&gt; products;&#13;&#10;    private OnProductClickListener listener;&#13;&#10;&#13;&#10;    public interface OnProductClickListener {&#13;&#10;        void onProductClick(Product product);&#13;&#10;    }&#13;&#10;&#13;&#10;    public ProductGridAdapter(List&lt;Product&gt; products, OnProductClickListener listener) {&#13;&#10;        this.products = products;&#13;&#10;        this.listener = listener;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void updateProducts(List&lt;Product&gt; newProducts) {&#13;&#10;        this.products.clear();&#13;&#10;        this.products.addAll(newProducts);&#13;&#10;        notifyDataSetChanged();&#13;&#10;    }&#13;&#10;&#13;&#10;    @NonNull&#13;&#10;    @Override&#13;&#10;    public ProductViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#13;&#10;        View view = LayoutInflater.from(parent.getContext())&#13;&#10;                .inflate(R.layout.item_product_grid, parent, false);&#13;&#10;        return new ProductViewHolder(view);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onBindViewHolder(@NonNull ProductViewHolder holder, int position) {&#13;&#10;        Product product = products.get(position);&#13;&#10;&#13;&#10;        holder.tvName.setText(product.name);&#13;&#10;        holder.tvPrice.setText(MoneyFmt.format(product.price));&#13;&#10;&#13;&#10;        // Show stock status with consistent colors&#13;&#10;        if (product.quantity &gt; 0) {&#13;&#10;            holder.tvStock.setText(&quot;Còn &quot; + product.quantity + &quot; sản phẩm&quot;);&#13;&#10;            holder.tvStock.setTextColor(holder.itemView.getContext().getResources().getColor(R.color.success));&#13;&#10;        } else {&#13;&#10;            holder.tvStock.setText(&quot;Hết hàng&quot;);&#13;&#10;            holder.tvStock.setTextColor(holder.itemView.getContext().getResources().getColor(R.color.error));&#13;&#10;        }&#13;&#10;&#13;&#10;        // Load product image with proper placeholder&#13;&#10;        if (product.image != null &amp;&amp; !product.image.isEmpty()) {&#13;&#10;            Glide.with(holder.itemView.getContext())&#13;&#10;                    .load(product.image)&#13;&#10;                    .placeholder(R.drawable.ic_product_placeholder)&#13;&#10;                    .into(holder.ivProduct);&#13;&#10;        } else {&#13;&#10;            holder.ivProduct.setImageResource(R.drawable.ic_product_placeholder);&#13;&#10;        }&#13;&#10;&#13;&#10;        holder.itemView.setOnClickListener(v -&gt; {&#13;&#10;            if (listener != null) {&#13;&#10;                listener.onProductClick(product);&#13;&#10;            }&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public int getItemCount() {&#13;&#10;        return products.size();&#13;&#10;    }&#13;&#10;&#13;&#10;    static class ProductViewHolder extends RecyclerView.ViewHolder {&#13;&#10;        ImageView ivProduct;&#13;&#10;        TextView tvName, tvPrice, tvStock;&#13;&#10;&#13;&#10;        ProductViewHolder(@NonNull View itemView) {&#13;&#10;            super(itemView);&#13;&#10;            ivProduct = itemView.findViewById(R.id.ivProduct);&#13;&#10;            tvName = itemView.findViewById(R.id.tvProductName);&#13;&#10;            tvPrice = itemView.findViewById(R.id.tvPrice);&#13;&#10;            tvStock = itemView.findViewById(R.id.tvStock);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/StoreFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/StoreFragment.java" />
              <option name="originalContent" value="package com.example.skymall.ui;&#10;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.EditText;&#10;import android.widget.ImageButton;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.Product;&#10;import com.example.skymall.data.remote.ApiClient;&#10;import com.example.skymall.data.remote.ApiService;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class StoreFragment extends Fragment {&#10;&#10;    private static final String ARG_STORE_ID = &quot;store_id&quot;;&#10;    private int storeId = 1; // mặc định 1, có thể truyền vào khi mở fragment&#10;&#10;    private ApiService api;&#10;    private RecyclerView rv;&#10;    private ProductGridAdapter adapter;&#10;    private EditText etSearch;&#10;&#10;    public static StoreFragment newInstance(int storeId){&#10;        StoreFragment f = new StoreFragment();&#10;        Bundle b = new Bundle();&#10;        b.putInt(ARG_STORE_ID, storeId);&#10;        f.setArguments(b);&#10;        return f;&#10;    }&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle s) {&#10;        return inflater.inflate(R.layout.fragment_store, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View v, @Nullable Bundle s) {&#10;        if (getArguments() != null) storeId = getArguments().getInt(ARG_STORE_ID, 1);&#10;&#10;        etSearch = v.findViewById(R.id.etSearchStore);&#10;        rv = v.findViewById(R.id.rvStoreProducts);&#10;        rv.setLayoutManager(new GridLayoutManager(getContext(), 2));&#10;&#10;        adapter = new ProductGridAdapter(new ArrayList&lt;&gt;());&#10;        rv.setAdapter(adapter);&#10;&#10;        api = ApiClient.get(&quot;https://yourdomain.com/&quot;).create(ApiService.class);&#10;&#10;        v.&lt;androidx.swiperefreshlayout.widget.SwipeRefreshLayout&gt;findViewById(R.id.swipe)&#10;                .setOnRefreshListener(() -&gt; {&#10;                    fetchProducts(etSearch.getText().toString().trim());&#10;                });&#10;        etSearch.setOnEditorActionListener((tv, actionId, event) -&gt; {&#10;            fetchProducts(etSearch.getText().toString().trim());&#10;            return true;&#10;        });&#10;&#10;        fetchProducts(null);&#10;    }&#10;&#10;    private void fetchProducts(@Nullable String keyword) {&#10;        final androidx.swiperefreshlayout.widget.SwipeRefreshLayout swipe = getView().findViewById(R.id.swipe);&#10;        if (swipe != null) swipe.setRefreshing(true);&#10;&#10;        api.getStoreProducts(storeId, TextUtils.isEmpty(keyword) ? null : keyword, 1, 40)&#10;                .enqueue(new Callback&lt;List&lt;Product&gt;&gt;() {&#10;                    @Override public void onResponse(Call&lt;List&lt;Product&gt;&gt; call, Response&lt;List&lt;Product&gt;&gt; res) {&#10;                        if (!isAdded()) return;&#10;                        if (swipe != null) swipe.setRefreshing(false);&#10;                        if (res.isSuccessful() &amp;&amp; res.body()!=null) {&#10;                            adapter.setData(res.body());&#10;                        } else {&#10;                            adapter.setData(new ArrayList&lt;&gt;());&#10;                        }&#10;                    }&#10;                    @Override public void onFailure(Call&lt;List&lt;Product&gt;&gt; call, Throwable t) {&#10;                        if (!isAdded()) return;&#10;                        if (swipe != null) swipe.setRefreshing(false);&#10;                        adapter.setData(new ArrayList&lt;&gt;());&#10;                    }&#10;                });&#10;    }&#10;&#10;    // ----- Adapter -----&#10;    static class ProductGridAdapter extends RecyclerView.Adapter&lt;ProductGVH&gt;{&#10;        List&lt;Product&gt; data;&#10;        ProductGridAdapter(List&lt;Product&gt; d){ data=d; }&#10;        void setData(List&lt;Product&gt; d){ data = d; notifyDataSetChanged(); }&#10;&#10;        @NonNull @Override public ProductGVH onCreateViewHolder(@NonNull ViewGroup p, int vType) {&#10;            View v = LayoutInflater.from(p.getContext()).inflate(R.layout.item_product_grid, p, false);&#10;            return new ProductGVH(v);&#10;        }&#10;        @Override public void onBindViewHolder(@NonNull ProductGVH h, int i) {&#10;            Product p = data.get(i);&#10;            h.title.setText(p.name);&#10;            h.price.setText(&quot;₫&quot; + String.format(&quot;%,.0f&quot;, p.price));&#10;            Glide.with(h.img.getContext()).load(p.image_url).into(h.img);&#10;        }&#10;        @Override public int getItemCount(){ return data==null?0:data.size(); }&#10;    }&#10;    static class ProductGVH extends RecyclerView.ViewHolder {&#10;        android.widget.TextView title, price; ImageButton more; android.widget.ImageView img;&#10;        ProductGVH(@NonNull View v){ super(v);&#10;            img=v.findViewById(R.id.img); title=v.findViewById(R.id.tvTitle); price=v.findViewById(R.id.tvPrice);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.skymall.ui;&#10;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.EditText;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.Product;&#10;import com.example.skymall.data.remote.ApiManager;&#10;import com.example.skymall.data.remote.ApiService;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class StoreFragment extends Fragment {&#10;&#10;    private static final String ARG_STORE_ID = &quot;store_id&quot;;&#10;    private int storeId = 1; // mặc định 1, có thể truyền vào khi mở fragment&#10;&#10;    private ApiService api;&#10;    private RecyclerView rv;&#10;    private ProductGridAdapter adapter;&#10;    private EditText etSearch;&#10;&#10;    public static StoreFragment newInstance(int storeId){&#10;        StoreFragment f = new StoreFragment();&#10;        Bundle b = new Bundle();&#10;        b.putInt(ARG_STORE_ID, storeId);&#10;        f.setArguments(b);&#10;        return f;&#10;    }&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle s) {&#10;        return inflater.inflate(R.layout.fragment_store, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View v, @Nullable Bundle s) {&#10;        if (getArguments() != null) storeId = getArguments().getInt(ARG_STORE_ID, 1);&#10;&#10;        etSearch = v.findViewById(R.id.etSearchStore);&#10;        rv = v.findViewById(R.id.rvStoreProducts);&#10;        rv.setLayoutManager(new GridLayoutManager(getContext(), 2));&#10;&#10;        adapter = new ProductGridAdapter(new ArrayList&lt;&gt;());&#10;        rv.setAdapter(adapter);&#10;&#10;        // Sử dụng ApiManager thay vì ApiClient.get()&#10;        api = ApiManager.getInstance(getContext()).getApiService();&#10;&#10;        androidx.swiperefreshlayout.widget.SwipeRefreshLayout swipeRefresh =&#10;                v.findViewById(R.id.swipe);&#10;        swipeRefresh.setOnRefreshListener(() -&gt; fetchProducts(etSearch.getText().toString().trim()));&#10;&#10;        etSearch.setOnEditorActionListener((tv, actionId, event) -&gt; {&#10;            fetchProducts(etSearch.getText().toString().trim());&#10;            return true;&#10;        });&#10;&#10;        fetchProducts(null);&#10;    }&#10;&#10;    private void fetchProducts(@Nullable String keyword) {&#10;        View rootView = getView();&#10;        if (rootView == null) return;&#10;&#10;        final androidx.swiperefreshlayout.widget.SwipeRefreshLayout swipe =&#10;                rootView.findViewById(R.id.swipe);&#10;        if (swipe != null) swipe.setRefreshing(true);&#10;&#10;        api.getStoreProducts(storeId, TextUtils.isEmpty(keyword) ? null : keyword, 1, 40)&#10;                .enqueue(new Callback&lt;List&lt;Product&gt;&gt;() {&#10;                    @Override&#10;                    public void onResponse(@NonNull Call&lt;List&lt;Product&gt;&gt; call, @NonNull Response&lt;List&lt;Product&gt;&gt; res) {&#10;                        if (!isAdded()) return;&#10;                        if (swipe != null) swipe.setRefreshing(false);&#10;                        if (res.isSuccessful() &amp;&amp; res.body()!=null) {&#10;                            adapter.setData(res.body());&#10;                        } else {&#10;                            adapter.setData(new ArrayList&lt;&gt;());&#10;                        }&#10;                    }&#10;                    @Override&#10;                    public void onFailure(@NonNull Call&lt;List&lt;Product&gt;&gt; call, @NonNull Throwable t) {&#10;                        if (!isAdded()) return;&#10;                        if (swipe != null) swipe.setRefreshing(false);&#10;                        adapter.setData(new ArrayList&lt;&gt;());&#10;                    }&#10;                });&#10;    }&#10;&#10;    // ----- Adapter -----&#10;    static class ProductGridAdapter extends RecyclerView.Adapter&lt;ProductGVH&gt;{&#10;        List&lt;Product&gt; data;&#10;        ProductGridAdapter(List&lt;Product&gt; d){ data=d; }&#10;        void setData(List&lt;Product&gt; d){&#10;            data = d;&#10;            notifyItemRangeChanged(0, data.size());&#10;        }&#10;&#10;        @NonNull @Override public ProductGVH onCreateViewHolder(@NonNull ViewGroup p, int vType) {&#10;            View v = LayoutInflater.from(p.getContext()).inflate(R.layout.item_product_grid, p, false);&#10;            return new ProductGVH(v);&#10;        }&#10;        @Override public void onBindViewHolder(@NonNull ProductGVH h, int i) {&#10;            Product p = data.get(i);&#10;            h.title.setText(p.name);&#10;            h.price.setText(String.format(&quot;₫%,.0f&quot;, p.price));&#10;            // Sử dụng field image thay vì image_url&#10;            Glide.with(h.img.getContext()).load(p.image).into(h.img);&#10;        }&#10;        @Override public int getItemCount(){ return data==null?0:data.size(); }&#10;    }&#10;&#10;    static class ProductGVH extends RecyclerView.ViewHolder {&#10;        android.widget.TextView title, price;&#10;        android.widget.ImageView img;&#10;        ProductGVH(@NonNull View v){&#10;            super(v);&#10;            img=v.findViewById(R.id.img); title=v.findViewById(R.id.tvTitle); price=v.findViewById(R.id.tvPrice);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/checkout/CheckoutActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/checkout/CheckoutActivity.java" />
              <option name="originalContent" value="package com.example.skymall.ui.checkout;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.CartItem;&#10;import com.example.skymall.data.model.Voucher;&#10;import com.example.skymall.data.remote.ApiClient;&#10;import com.example.skymall.data.remote.ApiService;&#10;import com.example.skymall.data.remote.DTO.CreateOrderResp;&#10;import com.example.skymall.ui.voucher.VoucherSelectDialog;&#10;import com.example.skymall.utils.MoneyFmt;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class CheckoutActivity extends AppCompatActivity {&#10;&#10;    private RecyclerView rvCheckoutItems;&#10;    private LinearLayout llVoucherSection;&#10;    private TextView tvVoucherName, tvVoucherDiscount, tvSubtotal, tvShippingFee, tvVoucherDiscountAmount, tvTotal;&#10;    private Button btnSelectVoucher, btnPlaceOrder;&#10;&#10;    private CheckoutItemsAdapter adapter;&#10;    private List&lt;CartItem&gt; cartItems;&#10;    private Voucher selectedVoucher;&#10;    private ApiService api;&#10;&#10;    private double subtotal = 0;&#10;    private double shippingFee = 30000; // Fixed shipping fee&#10;    private double voucherDiscountAmount = 0;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_checkout);&#10;&#10;        initViews();&#10;        setupApi();&#10;        getCartItemsFromIntent();&#10;        setupRecyclerView();&#10;        calculatePrices();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initViews() {&#10;        rvCheckoutItems = findViewById(R.id.rvCheckoutItems);&#10;        llVoucherSection = findViewById(R.id.llVoucherSection);&#10;        tvVoucherName = findViewById(R.id.tvVoucherName);&#10;        tvVoucherDiscount = findViewById(R.id.tvVoucherDiscount);&#10;        tvSubtotal = findViewById(R.id.tvSubtotal);&#10;        tvShippingFee = findViewById(R.id.tvShippingFee);&#10;        tvVoucherDiscountAmount = findViewById(R.id.tvVoucherDiscountAmount);&#10;        tvTotal = findViewById(R.id.tvTotal);&#10;        btnSelectVoucher = findViewById(R.id.btnSelectVoucher);&#10;        btnPlaceOrder = findViewById(R.id.btnPlaceOrder);&#10;    }&#10;&#10;    private void setupApi() {&#10;        // TODO: Initialize API client when ApiClient.getRetrofitInstance() is implemented&#10;        // api = ApiClient.getRetrofitInstance().create(ApiService.class);&#10;        &#10;        // Temporary: Set to null until ApiClient is properly implemented&#10;        api = null;&#10;    }&#10;&#10;    private void getCartItemsFromIntent() {&#10;        cartItems = (List&lt;CartItem&gt;) getIntent().getSerializableExtra(&quot;cart_items&quot;);&#10;        if (cartItems == null) {&#10;            cartItems = new ArrayList&lt;&gt;();&#10;            finish();&#10;            return;&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        adapter = new CheckoutItemsAdapter(cartItems);&#10;        rvCheckoutItems.setLayoutManager(new LinearLayoutManager(this));&#10;        rvCheckoutItems.setAdapter(adapter);&#10;    }&#10;&#10;    private void calculatePrices() {&#10;        subtotal = 0;&#10;        for (CartItem item : cartItems) {&#10;            subtotal += item.price * item.quantity;&#10;        }&#10;&#10;        // Calculate voucher discount&#10;        voucherDiscountAmount = 0;&#10;        if (selectedVoucher != null) {&#10;            if (selectedVoucher.discountType.equals(&quot;percentage&quot;)) {&#10;                voucherDiscountAmount = subtotal * selectedVoucher.discountValue / 100;&#10;                if (selectedVoucher.maxDiscountAmount &gt; 0) {&#10;                    voucherDiscountAmount = Math.min(voucherDiscountAmount, selectedVoucher.maxDiscountAmount);&#10;                }&#10;            } else {&#10;                voucherDiscountAmount = selectedVoucher.discountValue;&#10;            }&#10;        }&#10;&#10;        double total = subtotal + shippingFee - voucherDiscountAmount;&#10;&#10;        updatePriceDisplay(subtotal, shippingFee, voucherDiscountAmount, total);&#10;    }&#10;&#10;    private void updatePriceDisplay(double subtotal, double shippingFee, double discount, double total) {&#10;        tvSubtotal.setText(MoneyFmt.format(subtotal));&#10;        tvShippingFee.setText(MoneyFmt.format(shippingFee));&#10;        tvVoucherDiscountAmount.setText(discount &gt; 0 ? &quot;-&quot; + MoneyFmt.format(discount) : &quot;0đ&quot;);&#10;        tvTotal.setText(MoneyFmt.format(total));&#10;&#10;        // Show/hide voucher section based on selection&#10;        if (selectedVoucher != null) {&#10;            llVoucherSection.setVisibility(View.VISIBLE);&#10;            tvVoucherName.setText(selectedVoucher.title);&#10;            if (selectedVoucher.discountType.equals(&quot;percentage&quot;)) {&#10;                tvVoucherDiscount.setText(&quot;Giảm &quot; + (int)selectedVoucher.discountValue + &quot;%&quot;);&#10;            } else {&#10;                tvVoucherDiscount.setText(&quot;Giảm &quot; + MoneyFmt.format(selectedVoucher.discountValue));&#10;            }&#10;            btnSelectVoucher.setText(&quot;Thay đổi voucher&quot;);&#10;        } else {&#10;            llVoucherSection.setVisibility(View.GONE);&#10;            btnSelectVoucher.setText(&quot;Chọn voucher&quot;);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnSelectVoucher.setOnClickListener(v -&gt; showVoucherSelectionDialog());&#10;&#10;        btnPlaceOrder.setOnClickListener(v -&gt; placeOrder());&#10;    }&#10;&#10;    private void showVoucherSelectionDialog() {&#10;        VoucherSelectDialog dialog = new VoucherSelectDialog(this, selectedVoucher, voucher -&gt; {&#10;            selectedVoucher = voucher;&#10;            calculatePrices();&#10;        });&#10;        dialog.show();&#10;    }&#10;&#10;    private void placeOrder() {&#10;        btnPlaceOrder.setEnabled(false);&#10;        btnPlaceOrder.setText(&quot;Đang xử lý...&quot;);&#10;&#10;        // Create order request&#10;        CreateOrderRequest request = new CreateOrderRequest();&#10;        request.cartItems = cartItems;&#10;        request.voucherId = selectedVoucher != null ? selectedVoucher.id : null;&#10;        request.subtotal = subtotal;&#10;        request.shippingFee = shippingFee;&#10;        request.discountAmount = voucherDiscountAmount;&#10;        request.total = subtotal + shippingFee - voucherDiscountAmount;&#10;&#10;        api.createOrder(request).enqueue(new Callback&lt;CreateOrderResp&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;CreateOrderResp&gt; call, Response&lt;CreateOrderResp&gt; response) {&#10;                btnPlaceOrder.setEnabled(true);&#10;                btnPlaceOrder.setText(&quot;Đặt hàng&quot;);&#10;&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    // Navigate to thank you screen&#10;                    Intent intent = new Intent(CheckoutActivity.this, ThankYouActivity.class);&#10;                    intent.putExtra(&quot;order_id&quot;, response.body().orderId);&#10;                    intent.putExtra(&quot;total_amount&quot;, request.total);&#10;                    startActivity(intent);&#10;                    finish();&#10;                } else {&#10;                    Toast.makeText(CheckoutActivity.this, &quot;Đặt hàng thất bại. Vui lòng thử lại!&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;CreateOrderResp&gt; call, Throwable t) {&#10;                btnPlaceOrder.setEnabled(true);&#10;                btnPlaceOrder.setText(&quot;Đặt hàng&quot;);&#10;                Toast.makeText(CheckoutActivity.this, &quot;Lỗi kết nối. Vui lòng thử lại!&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    // Inner class for order request&#10;    public static class CreateOrderRequest {&#10;        public List&lt;CartItem&gt; cartItems;&#10;        public Integer voucherId;&#10;        public double subtotal;&#10;        public double shippingFee;&#10;        public double discountAmount;&#10;        public double total;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.skymall.ui.checkout;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.CartItem;&#10;import com.example.skymall.data.model.Voucher;&#10;import com.example.skymall.data.remote.ApiClient;&#10;import com.example.skymall.data.remote.ApiService;&#10;import com.example.skymall.data.remote.DTO.CreateOrderResp;&#10;import com.example.skymall.ui.voucher.VoucherSelectDialog;&#10;import com.example.skymall.utils.MoneyFmt;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class CheckoutActivity extends AppCompatActivity {&#10;&#10;    private RecyclerView rvCheckoutItems;&#10;    private LinearLayout llVoucherSection;&#10;    private TextView tvVoucherName, tvVoucherDiscount, tvSubtotal, tvShippingFee, tvVoucherDiscountAmount, tvTotal;&#10;    private Button btnSelectVoucher, btnPlaceOrder;&#10;&#10;    private CheckoutItemsAdapter adapter;&#10;    private List&lt;CartItem&gt; cartItems;&#10;    private Voucher selectedVoucher;&#10;    private ApiService api;&#10;&#10;    private double subtotal = 0;&#10;    private double shippingFee = 30000; // Fixed shipping fee&#10;    private double voucherDiscountAmount = 0;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_checkout);&#10;&#10;        initViews();&#10;        setupApi();&#10;        getCartItemsFromIntent();&#10;        setupRecyclerView();&#10;        calculatePrices();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initViews() {&#10;        rvCheckoutItems = findViewById(R.id.rvCheckoutItems);&#10;        llVoucherSection = findViewById(R.id.llVoucherSection);&#10;        tvVoucherName = findViewById(R.id.tvVoucherName);&#10;        tvVoucherDiscount = findViewById(R.id.tvVoucherDiscount);&#10;        tvSubtotal = findViewById(R.id.tvSubtotal);&#10;        tvShippingFee = findViewById(R.id.tvShippingFee);&#10;        tvVoucherDiscountAmount = findViewById(R.id.tvVoucherDiscountAmount);&#10;        tvTotal = findViewById(R.id.tvTotal);&#10;        btnSelectVoucher = findViewById(R.id.btnSelectVoucher);&#10;        btnPlaceOrder = findViewById(R.id.btnPlaceOrder);&#10;    }&#10;&#10;    private void setupApi() {&#10;        // TODO: Initialize API client when ApiClient.getRetrofitInstance() is implemented&#10;        // api = ApiClient.getRetrofitInstance().create(ApiService.class);&#10;        &#10;        // Temporary: Set to null until ApiClient is properly implemented&#10;        api = null;&#10;    }&#10;&#10;    private void getCartItemsFromIntent() {&#10;        cartItems = (List&lt;CartItem&gt;) getIntent().getSerializableExtra(&quot;cart_items&quot;);&#10;        if (cartItems == null) {&#10;            cartItems = new ArrayList&lt;&gt;();&#10;            finish();&#10;            return;&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        adapter = new CheckoutItemsAdapter(cartItems);&#10;        rvCheckoutItems.setLayoutManager(new LinearLayoutManager(this));&#10;        rvCheckoutItems.setAdapter(adapter);&#10;    }&#10;&#10;    private void calculatePrices() {&#10;        subtotal = 0;&#10;        for (CartItem item : cartItems) {&#10;            subtotal += item.price * item.quantity;&#10;        }&#10;&#10;        // Calculate voucher discount&#10;        voucherDiscountAmount = 0;&#10;        if (selectedVoucher != null) {&#10;            if (selectedVoucher.discountType.equals(&quot;percentage&quot;)) {&#10;                voucherDiscountAmount = subtotal * selectedVoucher.discountValue / 100;&#10;                if (selectedVoucher.maxDiscountAmount &gt; 0) {&#10;                    voucherDiscountAmount = Math.min(voucherDiscountAmount, selectedVoucher.maxDiscountAmount);&#10;                }&#10;            } else {&#10;                voucherDiscountAmount = selectedVoucher.discountValue;&#10;            }&#10;        }&#10;&#10;        double total = subtotal + shippingFee - voucherDiscountAmount;&#10;&#10;        updatePriceDisplay(subtotal, shippingFee, voucherDiscountAmount, total);&#10;    }&#10;&#10;    private void updatePriceDisplay(double subtotal, double shippingFee, double discount, double total) {&#10;        tvSubtotal.setText(MoneyFmt.format(subtotal));&#10;        tvShippingFee.setText(MoneyFmt.format(shippingFee));&#10;        tvVoucherDiscountAmount.setText(discount &gt; 0 ? &quot;-&quot; + MoneyFmt.format(discount) : &quot;0đ&quot;);&#10;        tvTotal.setText(MoneyFmt.format(total));&#10;&#10;        // Show/hide voucher section based on selection&#10;        if (selectedVoucher != null) {&#10;            llVoucherSection.setVisibility(View.VISIBLE);&#10;            tvVoucherName.setText(selectedVoucher.title);&#10;            if (selectedVoucher.discountType.equals(&quot;percentage&quot;)) {&#10;                tvVoucherDiscount.setText(&quot;Giảm &quot; + (int)selectedVoucher.discountValue + &quot;%&quot;);&#10;            } else {&#10;                tvVoucherDiscount.setText(&quot;Giảm &quot; + MoneyFmt.format(selectedVoucher.discountValue));&#10;            }&#10;            btnSelectVoucher.setText(&quot;Thay đổi voucher&quot;);&#10;        } else {&#10;            llVoucherSection.setVisibility(View.GONE);&#10;            btnSelectVoucher.setText(&quot;Chọn voucher&quot;);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnSelectVoucher.setOnClickListener(v -&gt; showVoucherSelectionDialog());&#10;&#10;        btnPlaceOrder.setOnClickListener(v -&gt; placeOrder());&#10;    }&#10;&#10;    private void showVoucherSelectionDialog() {&#10;        VoucherSelectDialog dialog = new VoucherSelectDialog(this, selectedVoucher, voucher -&gt; {&#10;            selectedVoucher = voucher;&#10;            calculatePrices();&#10;        });&#10;        dialog.show();&#10;    }&#10;&#10;    private void placeOrder() {&#10;        btnPlaceOrder.setEnabled(false);&#10;        btnPlaceOrder.setText(&quot;Đang xử lý...&quot;);&#10;&#10;        // TODO: Implement API call when ApiClient is properly set up&#10;        // For now, simulate successful order creation&#10;        &#10;        // Simulate API delay&#10;        btnPlaceOrder.postDelayed(() -&gt; {&#10;            btnPlaceOrder.setEnabled(true);&#10;            btnPlaceOrder.setText(&quot;Đặt hàng&quot;);&#10;            &#10;            // Generate a mock order ID&#10;            String mockOrderId = &quot;ORD&quot; + System.currentTimeMillis();&#10;            double total = subtotal + shippingFee - voucherDiscountAmount;&#10;            &#10;            // Navigate to thank you screen&#10;            Intent intent = new Intent(CheckoutActivity.this, ThankYouActivity.class);&#10;            intent.putExtra(&quot;order_id&quot;, mockOrderId);&#10;            intent.putExtra(&quot;total_amount&quot;, total);&#10;            startActivity(intent);&#10;            finish();&#10;        }, 2000); // 2 second delay to simulate API call&#10;    }&#10;&#10;    // Inner class for order request&#10;    public static class CreateOrderRequest {&#10;        public List&lt;CartItem&gt; cartItems;&#10;        public Integer voucherId;&#10;        public double subtotal;&#10;        public double shippingFee;&#10;        public double discountAmount;&#10;        public double total;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/checkout/ThankYouActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/checkout/ThankYouActivity.java" />
              <option name="updatedContent" value="package com.example.skymall.ui.checkout;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Button;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.MainActivity;&#10;import com.example.skymall.ui.order.OrderListActivity;&#10;import com.example.skymall.utils.MoneyFmt;&#10;&#10;public class ThankYouActivity extends AppCompatActivity {&#10;&#10;    private TextView tvOrderId, tvTotalAmount;&#10;    private Button btnBackToHome, btnViewOrders;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_thank_you);&#10;        &#10;        initViews();&#10;        displayOrderInfo();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initViews() {&#10;        tvOrderId = findViewById(R.id.tvOrderId);&#10;        tvTotalAmount = findViewById(R.id.tvTotalAmount);&#10;        btnBackToHome = findViewById(R.id.btnBackToHome);&#10;        btnViewOrders = findViewById(R.id.btnViewOrders);&#10;    }&#10;&#10;    private void displayOrderInfo() {&#10;        String orderId = getIntent().getStringExtra(&quot;order_id&quot;);&#10;        double totalAmount = getIntent().getDoubleExtra(&quot;total_amount&quot;, 0);&#10;        &#10;        tvOrderId.setText(&quot;Mã đơn hàng: &quot; + orderId);&#10;        tvTotalAmount.setText(MoneyFmt.format(totalAmount));&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnBackToHome.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(this, MainActivity.class);&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);&#10;            startActivity(intent);&#10;            finish();&#10;        });&#10;&#10;        btnViewOrders.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(this, OrderListActivity.class);&#10;            startActivity(intent);&#10;            finish();&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onBackPressed() {&#10;        // Redirect to home instead of going back to checkout&#10;        Intent intent = new Intent(this, MainActivity.class);&#10;        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);&#10;        startActivity(intent);&#10;        finish();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/order/OrderListActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/order/OrderListActivity.java" />
              <option name="originalContent" value="package com.example.skymall.ui.order;&#10;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.remote.DTO.OrderDto;&#10;import com.example.skymall.data.remote.DTO.OrderListResp;&#10;import com.google.android.material.tabs.TabLayout;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class OrderListActivity extends AppCompatActivity {&#10;&#10;    private TabLayout tabLayout;&#10;    private RecyclerView rvOrders;&#10;    private SwipeRefreshLayout swipeRefresh;&#10;    private OrderListAdapter adapter;&#10;&#10;    private String currentStatus = &quot;ALL&quot;;&#10;&#10;    public static void start(Context context, String orderId) {&#10;        Intent intent = new Intent(context, OrderListActivity.class);&#10;        intent.putExtra(&quot;order_id&quot;, orderId);&#10;        context.startActivity(intent);&#10;    }&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_order_list);&#10;&#10;        initViews();&#10;        setupTabs();&#10;        setupRecyclerView();&#10;        loadOrders();&#10;    }&#10;&#10;    private void initViews() {&#10;        tabLayout = findViewById(R.id.tabLayout);&#10;        rvOrders = findViewById(R.id.rvOrders);&#10;        swipeRefresh = findViewById(R.id.swipeRefresh);&#10;    }&#10;&#10;    private void setupTabs() {&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;Tất cả&quot;));&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;Chờ xác nhận&quot;));&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;Đang chuẩn bị&quot;));&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;Đang giao&quot;));&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;Hoàn thành&quot;));&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;Đã hủy&quot;));&#10;&#10;        tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {&#10;            @Override&#10;            public void onTabSelected(TabLayout.Tab tab) {&#10;                switch (tab.getPosition()) {&#10;                    case 0: currentStatus = &quot;ALL&quot;; break;&#10;                    case 1: currentStatus = &quot;PENDING&quot;; break;&#10;                    case 2: currentStatus = &quot;PREPARING&quot;; break;&#10;                    case 3: currentStatus = &quot;SHIPPING&quot;; break;&#10;                    case 4: currentStatus = &quot;COMPLETED&quot;; break;&#10;                    case 5: currentStatus = &quot;CANCELLED&quot;; break;&#10;                }&#10;                loadOrders();&#10;            }&#10;&#10;            @Override&#10;            public void onTabUnselected(TabLayout.Tab tab) {}&#10;&#10;            @Override&#10;            public void onTabReselected(TabLayout.Tab tab) {}&#10;        });&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        adapter = new OrderListAdapter(new ArrayList&lt;&gt;(), this::onOrderClick);&#10;        rvOrders.setLayoutManager(new LinearLayoutManager(this));&#10;        rvOrders.setAdapter(adapter);&#10;&#10;        swipeRefresh.setOnRefreshListener(this::loadOrders);&#10;    }&#10;&#10;    private void loadOrders() {&#10;        swipeRefresh.setRefreshing(true);&#10;&#10;        api.getOrders(currentStatus).enqueue(new Callback&lt;OrderListResp&gt;() {&#10;            @Override&#10;            public void onResponse(Call&lt;OrderListResp&gt; call, Response&lt;OrderListResp&gt; response) {&#10;                swipeRefresh.setRefreshing(false);&#10;&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    adapter.updateOrders(response.body().orders);&#10;                } else {&#10;                    Toast.makeText(OrderListActivity.this, &quot;Không thể tải danh sách đơn hàng&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(Call&lt;OrderListResp&gt; call, Throwable t) {&#10;                swipeRefresh.setRefreshing(false);&#10;                Toast.makeText(OrderListActivity.this, &quot;Lỗi kết nối&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void onOrderClick(OrderDto order) {&#10;        // Navigate to order detail&#10;        OrderDetailActivity.start(this, order.id);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.skymall.ui.order;&#10;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.remote.ApiManager;&#10;import com.example.skymall.data.remote.ApiService;&#10;import com.example.skymall.data.remote.DTO.OrderDto;&#10;import com.example.skymall.data.remote.DTO.OrderListResp;&#10;import com.google.android.material.tabs.TabLayout;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class OrderListActivity extends AppCompatActivity {&#10;&#10;    private TabLayout tabLayout;&#10;    private RecyclerView rvOrders;&#10;    private SwipeRefreshLayout swipeRefresh;&#10;    private OrderListAdapter adapter;&#10;    private ApiService api;&#10;&#10;    private String currentStatus = &quot;ALL&quot;;&#10;&#10;    public static void start(Context context, String orderId) {&#10;        Intent intent = new Intent(context, OrderListActivity.class);&#10;        intent.putExtra(&quot;order_id&quot;, orderId);&#10;        context.startActivity(intent);&#10;    }&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_order_list);&#10;&#10;        setupApi();&#10;        initViews();&#10;        setupTabs();&#10;        setupRecyclerView();&#10;        loadOrders();&#10;    }&#10;&#10;    private void setupApi() {&#10;        api = ApiManager.getInstance(this).getApiService();&#10;    }&#10;&#10;    private void initViews() {&#10;        tabLayout = findViewById(R.id.tabLayout);&#10;        rvOrders = findViewById(R.id.rvOrders);&#10;        swipeRefresh = findViewById(R.id.swipeRefresh);&#10;    }&#10;&#10;    private void setupTabs() {&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;Tất cả&quot;));&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;Chờ xác nhận&quot;));&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;Đang chuẩn bị&quot;));&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;Đang giao&quot;));&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;Hoàn thành&quot;));&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;Đã hủy&quot;));&#10;&#10;        tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {&#10;            @Override&#10;            public void onTabSelected(TabLayout.Tab tab) {&#10;                switch (tab.getPosition()) {&#10;                    case 0: currentStatus = &quot;ALL&quot;; break;&#10;                    case 1: currentStatus = &quot;PENDING&quot;; break;&#10;                    case 2: currentStatus = &quot;PREPARING&quot;; break;&#10;                    case 3: currentStatus = &quot;SHIPPING&quot;; break;&#10;                    case 4: currentStatus = &quot;COMPLETED&quot;; break;&#10;                    case 5: currentStatus = &quot;CANCELLED&quot;; break;&#10;                }&#10;                loadOrders();&#10;            }&#10;&#10;            @Override&#10;            public void onTabUnselected(TabLayout.Tab tab) {}&#10;&#10;            @Override&#10;            public void onTabReselected(TabLayout.Tab tab) {}&#10;        });&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        adapter = new OrderListAdapter(new ArrayList&lt;&gt;(), this::onOrderClick);&#10;        rvOrders.setLayoutManager(new LinearLayoutManager(this));&#10;        rvOrders.setAdapter(adapter);&#10;&#10;        swipeRefresh.setOnRefreshListener(this::loadOrders);&#10;    }&#10;&#10;    private void loadOrders() {&#10;        swipeRefresh.setRefreshing(true);&#10;&#10;        api.getCustomerOrders(1, 50).enqueue(new Callback&lt;OrderListResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;OrderListResp&gt; call, @NonNull Response&lt;OrderListResp&gt; response) {&#10;                swipeRefresh.setRefreshing(false);&#10;&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    List&lt;OrderDto&gt; orders = response.body().data != null ? response.body().data : new ArrayList&lt;&gt;();&#10;&#10;                    if (!&quot;ALL&quot;.equals(currentStatus)) {&#10;                        List&lt;OrderDto&gt; filteredOrders = new ArrayList&lt;&gt;();&#10;                        for (OrderDto order : orders) {&#10;                            if (currentStatus.equals(order.status)) {&#10;                                filteredOrders.add(order);&#10;                            }&#10;                        }&#10;                        orders = filteredOrders;&#10;                    }&#10;&#10;                    adapter.updateOrders(orders);&#10;                } else {&#10;                    Toast.makeText(OrderListActivity.this, &quot;Không thể tải danh sách đơn hàng&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;OrderListResp&gt; call, @NonNull Throwable t) {&#10;                swipeRefresh.setRefreshing(false);&#10;                Toast.makeText(OrderListActivity.this, &quot;Lỗi kết nối&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void onOrderClick(OrderDto order) {&#10;        Toast.makeText(this, &quot;Chi tiết đơn hàng #&quot; + order.id, Toast.LENGTH_SHORT).show();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/order/OrderListAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/order/OrderListAdapter.java" />
              <option name="originalContent" value="package com.example.skymall.ui.order;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.remote.DTO.OrderDto;&#10;import com.example.skymall.utils.MoneyFmt;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class OrderListAdapter extends RecyclerView.Adapter&lt;OrderListAdapter.OrderViewHolder&gt; {&#10;&#10;    private List&lt;OrderDto&gt; orders;&#10;    private OnOrderClickListener listener;&#10;&#10;    public interface OnOrderClickListener {&#10;        void onOrderClick(OrderDto order);&#10;    }&#10;&#10;    public OrderListAdapter(List&lt;OrderDto&gt; orders, OnOrderClickListener listener) {&#10;        this.orders = orders;&#10;        this.listener = listener;&#10;    }&#10;&#10;    public void updateOrders(List&lt;OrderDto&gt; newOrders) {&#10;        this.orders.clear();&#10;        this.orders.addAll(newOrders);&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public OrderViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_order, parent, false);&#10;        return new OrderViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull OrderViewHolder holder, int position) {&#10;        OrderDto order = orders.get(position);&#10;&#10;        holder.tvOrderId.setText(&quot;Đơn hàng #&quot; + order.id);&#10;        holder.tvOrderDate.setText(formatDate(order.createdAt));&#10;        holder.tvTotalAmount.setText(MoneyFmt.format(order.totalAmount));&#10;&#10;        int itemCount = order.items != null ? order.items.size() : 0;&#10;        holder.tvItemCount.setText(itemCount + &quot; sản phẩm&quot;);&#10;&#10;        // Set status text and color&#10;        setOrderStatus(holder, order.status);&#10;&#10;        // Setup progress dots&#10;        setupProgressDots(holder.progressContainer, order.status);&#10;&#10;        holder.itemView.setOnClickListener(v -&gt; {&#10;            if (listener != null) {&#10;                listener.onOrderClick(order);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void setOrderStatus(OrderViewHolder holder, String status) {&#10;        String statusText;&#10;        int statusColor;&#10;&#10;        switch (status) {&#10;            case &quot;PENDING&quot;:&#10;                statusText = &quot;Chờ xác nhận&quot;;&#10;                statusColor = R.color.warning;&#10;                break;&#10;            case &quot;PREPARING&quot;:&#10;                statusText = &quot;Đang chuẩn bị&quot;;&#10;                statusColor = R.color.info;&#10;                break;&#10;            case &quot;SHIPPING&quot;:&#10;                statusText = &quot;Đang giao hàng&quot;;&#10;                statusColor = R.color.skymall_primary;&#10;                break;&#10;            case &quot;COMPLETED&quot;:&#10;                statusText = &quot;Hoàn thành&quot;;&#10;                statusColor = R.color.success;&#10;                break;&#10;            case &quot;CANCELLED&quot;:&#10;                statusText = &quot;Đã hủy&quot;;&#10;                statusColor = R.color.error;&#10;                break;&#10;            default:&#10;                statusText = &quot;Không xác định&quot;;&#10;                statusColor = R.color.gray_500;&#10;                break;&#10;        }&#10;&#10;        holder.tvStatus.setText(statusText);&#10;        holder.tvStatus.setTextColor(holder.itemView.getContext().getResources().getColor(statusColor));&#10;    }&#10;&#10;    private void setupProgressDots(LinearLayout container, String status) {&#10;        container.removeAllViews();&#10;&#10;        String[] statuses = {&quot;PENDING&quot;, &quot;PREPARING&quot;, &quot;SHIPPING&quot;, &quot;COMPLETED&quot;};&#10;        String[] statusLabels = {&quot;Đặt hàng&quot;, &quot;Chuẩn bị&quot;, &quot;Giao hàng&quot;, &quot;Hoàn thành&quot;};&#10;&#10;        int currentIndex = getCurrentStatusIndex(status);&#10;        boolean isCancelled = &quot;CANCELLED&quot;.equals(status);&#10;&#10;        for (int i = 0; i &lt; statuses.length; i++) {&#10;            View progressItem = LayoutInflater.from(container.getContext())&#10;                    .inflate(R.layout.item_progress_dot, container, false);&#10;&#10;            View dot = progressItem.findViewById(R.id.progressDot);&#10;            TextView label = progressItem.findViewById(R.id.progressLabel);&#10;            View line = progressItem.findViewById(R.id.progressLine);&#10;&#10;            label.setText(statusLabels[i]);&#10;&#10;            if (isCancelled) {&#10;                // All dots are gray for cancelled orders&#10;                dot.setBackgroundResource(R.drawable.progress_dot_inactive);&#10;                label.setTextColor(container.getContext().getResources().getColor(R.color.gray_500));&#10;            } else if (i &lt;= currentIndex) {&#10;                // Active dots&#10;                dot.setBackgroundResource(R.drawable.progress_dot_active);&#10;                label.setTextColor(container.getContext().getResources().getColor(R.color.success));&#10;            } else {&#10;                // Inactive dots&#10;                dot.setBackgroundResource(R.drawable.progress_dot_inactive);&#10;                label.setTextColor(container.getContext().getResources().getColor(R.color.gray_500));&#10;            }&#10;&#10;            // Hide line for the last item&#10;            if (i == statuses.length - 1) {&#10;                line.setVisibility(View.GONE);&#10;            } else {&#10;                line.setVisibility(View.VISIBLE);&#10;                if (isCancelled || i &gt;= currentIndex) {&#10;                    line.setBackgroundColor(container.getContext().getResources().getColor(R.color.gray_300));&#10;                } else {&#10;                    line.setBackgroundColor(container.getContext().getResources().getColor(R.color.success));&#10;                }&#10;            }&#10;&#10;            container.addView(progressItem);&#10;        }&#10;    }&#10;&#10;    private int getCurrentStatusIndex(String status) {&#10;        switch (status) {&#10;            case &quot;PENDING&quot;: return 0;&#10;            case &quot;PREPARING&quot;: return 1;&#10;            case &quot;SHIPPING&quot;: return 2;&#10;            case &quot;COMPLETED&quot;: return 3;&#10;            default: return -1;&#10;        }&#10;    }&#10;&#10;    private String formatDate(String dateString) {&#10;        try {&#10;            SimpleDateFormat inputFormat = new SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, Locale.getDefault());&#10;            SimpleDateFormat outputFormat = new SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;, Locale.getDefault());&#10;            return outputFormat.format(inputFormat.parse(dateString));&#10;        } catch (Exception e) {&#10;            return dateString;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return orders.size();&#10;    }&#10;&#10;    static class OrderViewHolder extends RecyclerView.ViewHolder {&#10;        TextView tvOrderId, tvOrderDate, tvStatus, tvTotalAmount, tvItemCount;&#10;        LinearLayout progressContainer;&#10;&#10;        OrderViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvOrderId = itemView.findViewById(R.id.tvOrderId);&#10;            tvOrderDate = itemView.findViewById(R.id.tvOrderDate);&#10;            tvStatus = itemView.findViewById(R.id.tvStatus);&#10;            tvTotalAmount = itemView.findViewById(R.id.tvTotalAmount);&#10;            tvItemCount = itemView.findViewById(R.id.tvItemCount);&#10;            progressContainer = itemView.findViewById(R.id.progressContainer);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.skymall.ui.order;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.remote.DTO.OrderDto;&#10;import com.example.skymall.utils.MoneyFmt;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class OrderListAdapter extends RecyclerView.Adapter&lt;OrderListAdapter.OrderViewHolder&gt; {&#10;&#10;    private List&lt;OrderDto&gt; orders;&#10;    private OnOrderClickListener listener;&#10;&#10;    public interface OnOrderClickListener {&#10;        void onOrderClick(OrderDto order);&#10;    }&#10;&#10;    public OrderListAdapter(List&lt;OrderDto&gt; orders, OnOrderClickListener listener) {&#10;        this.orders = orders;&#10;        this.listener = listener;&#10;    }&#10;&#10;    public void updateOrders(List&lt;OrderDto&gt; newOrders) {&#10;        this.orders.clear();&#10;        this.orders.addAll(newOrders);&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public OrderViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_order, parent, false);&#10;        return new OrderViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull OrderViewHolder holder, int position) {&#10;        OrderDto order = orders.get(position);&#10;&#10;        holder.tvOrderId.setText(String.format(&quot;Đơn hàng #%d&quot;, order.id));&#10;        holder.tvOrderDate.setText(formatDate(order.created_at)); // Sử dụng created_at thay vì createdAt&#10;        holder.tvTotalAmount.setText(MoneyFmt.format(order.grand_total)); // Sử dụng grand_total thay vì totalAmount&#10;&#10;        // OrderDto không có field items, sử dụng placeholder hoặc loại bỏ&#10;        holder.tvItemCount.setText(&quot;Xem chi tiết&quot;); // Thay vì hiển thị số items&#10;&#10;        // Set status text and color&#10;        setOrderStatus(holder, order.status);&#10;&#10;        // Setup progress dots&#10;        setupProgressDots(holder.progressContainer, order.status);&#10;&#10;        holder.itemView.setOnClickListener(v -&gt; {&#10;            if (listener != null) {&#10;                listener.onOrderClick(order);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void setOrderStatus(OrderViewHolder holder, String status) {&#10;        String statusText;&#10;        int statusColor;&#10;&#10;        switch (status) {&#10;            case &quot;PENDING&quot;:&#10;                statusText = &quot;Chờ xác nhận&quot;;&#10;                statusColor = R.color.warning;&#10;                break;&#10;            case &quot;PREPARING&quot;:&#10;                statusText = &quot;Đang chuẩn bị&quot;;&#10;                statusColor = R.color.info;&#10;                break;&#10;            case &quot;SHIPPING&quot;:&#10;                statusText = &quot;Đang giao hàng&quot;;&#10;                statusColor = R.color.skymall_primary;&#10;                break;&#10;            case &quot;COMPLETED&quot;:&#10;                statusText = &quot;Hoàn thành&quot;;&#10;                statusColor = R.color.success;&#10;                break;&#10;            case &quot;CANCELLED&quot;:&#10;                statusText = &quot;Đã hủy&quot;;&#10;                statusColor = R.color.error;&#10;                break;&#10;            default:&#10;                statusText = &quot;Không xác định&quot;;&#10;                statusColor = R.color.gray_500;&#10;                break;&#10;        }&#10;&#10;        holder.tvStatus.setText(statusText);&#10;        holder.tvStatus.setTextColor(holder.itemView.getContext().getResources().getColor(statusColor));&#10;    }&#10;&#10;    private void setupProgressDots(LinearLayout container, String status) {&#10;        container.removeAllViews();&#10;&#10;        String[] statuses = {&quot;PENDING&quot;, &quot;PREPARING&quot;, &quot;SHIPPING&quot;, &quot;COMPLETED&quot;};&#10;        String[] statusLabels = {&quot;Đặt hàng&quot;, &quot;Chuẩn bị&quot;, &quot;Giao hàng&quot;, &quot;Hoàn thành&quot;};&#10;&#10;        int currentIndex = getCurrentStatusIndex(status);&#10;        boolean isCancelled = &quot;CANCELLED&quot;.equals(status);&#10;&#10;        for (int i = 0; i &lt; statuses.length; i++) {&#10;            View progressItem = LayoutInflater.from(container.getContext())&#10;                    .inflate(R.layout.item_progress_dot, container, false);&#10;&#10;            View dot = progressItem.findViewById(R.id.progressDot);&#10;            TextView label = progressItem.findViewById(R.id.progressLabel);&#10;            View line = progressItem.findViewById(R.id.progressLine);&#10;&#10;            label.setText(statusLabels[i]);&#10;&#10;            if (isCancelled) {&#10;                // All dots are gray for cancelled orders&#10;                dot.setBackgroundResource(R.drawable.progress_dot_inactive);&#10;                label.setTextColor(container.getContext().getResources().getColor(R.color.gray_500));&#10;            } else if (i &lt;= currentIndex) {&#10;                // Active dots&#10;                dot.setBackgroundResource(R.drawable.progress_dot_active);&#10;                label.setTextColor(container.getContext().getResources().getColor(R.color.success));&#10;            } else {&#10;                // Inactive dots&#10;                dot.setBackgroundResource(R.drawable.progress_dot_inactive);&#10;                label.setTextColor(container.getContext().getResources().getColor(R.color.gray_500));&#10;            }&#10;&#10;            // Hide line for the last item&#10;            if (i == statuses.length - 1) {&#10;                line.setVisibility(View.GONE);&#10;            } else {&#10;                line.setVisibility(View.VISIBLE);&#10;                if (isCancelled || i &gt;= currentIndex) {&#10;                    line.setBackgroundColor(container.getContext().getResources().getColor(R.color.gray_300));&#10;                } else {&#10;                    line.setBackgroundColor(container.getContext().getResources().getColor(R.color.success));&#10;                }&#10;            }&#10;&#10;            container.addView(progressItem);&#10;        }&#10;    }&#10;&#10;    private int getCurrentStatusIndex(String status) {&#10;        switch (status) {&#10;            case &quot;PENDING&quot;: return 0;&#10;            case &quot;PREPARING&quot;: return 1;&#10;            case &quot;SHIPPING&quot;: return 2;&#10;            case &quot;COMPLETED&quot;: return 3;&#10;            default: return -1;&#10;        }&#10;    }&#10;&#10;    private String formatDate(String dateString) {&#10;        try {&#10;            SimpleDateFormat inputFormat = new SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, Locale.getDefault());&#10;            SimpleDateFormat outputFormat = new SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;, Locale.getDefault());&#10;            return outputFormat.format(inputFormat.parse(dateString));&#10;        } catch (Exception e) {&#10;            return dateString;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return orders.size();&#10;    }&#10;&#10;    static class OrderViewHolder extends RecyclerView.ViewHolder {&#10;        TextView tvOrderId, tvOrderDate, tvStatus, tvTotalAmount, tvItemCount;&#10;        LinearLayout progressContainer;&#10;&#10;        OrderViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvOrderId = itemView.findViewById(R.id.tvOrderId);&#10;            tvOrderDate = itemView.findViewById(R.id.tvOrderDate);&#10;            tvStatus = itemView.findViewById(R.id.tvStatus);&#10;            tvTotalAmount = itemView.findViewById(R.id.tvTotalAmount);&#10;            tvItemCount = itemView.findViewById(R.id.tvItemCount);&#10;            progressContainer = itemView.findViewById(R.id.progressContainer);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/seller/ProductListActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/seller/ProductListActivity.java" />
              <option name="originalContent" value="package com.example.skymall.ui.seller;&#10;&#10;import android.content.Intent;&#10;import android.graphics.Bitmap;&#10;import android.graphics.BitmapFactory;&#10;import android.net.Uri;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.util.Log;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import android.widget.Switch;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import android.widget.Spinner;&#10;import android.widget.ArrayAdapter;&#10;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.Product;&#10;import com.example.skymall.data.model.Category;&#10;import com.example.skymall.data.remote.ApiClient;&#10;import com.example.skymall.data.remote.ApiService;&#10;import com.example.skymall.data.remote.DTO.BaseResp;&#10;import com.example.skymall.data.remote.DTO.CategoryListResp;&#10;import com.example.skymall.data.remote.DTO.ProductListResp;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.squareup.picasso.Picasso;&#10;&#10;import java.io.ByteArrayOutputStream;&#10;import java.io.InputStream;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import okhttp3.MediaType;&#10;import okhttp3.MultipartBody;&#10;import okhttp3.RequestBody;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class ProductListActivity extends AppCompatActivity {&#10;&#10;    private RecyclerView rcvProducts;&#10;    private FloatingActionButton fabAdd;&#10;    private SellerProductAdapter adapter; // adapter dùng URL ảnh (ở dưới)&#10;    private final List&lt;Product&gt; productList = new ArrayList&lt;&gt;();&#10;    private ApiService api;&#10;&#10;    // Chứa bytes ảnh đang chọn trong dialog&#10;    private byte[] pickedImageBytes = null;&#10;    private ImageView currentPreview = null;&#10;&#10;    private final ActivityResultLauncher&lt;String&gt; pickImageLauncher =&#10;            registerForActivityResult(new ActivityResultContracts.GetContent(), uri -&gt; {&#10;                if (uri != null &amp;&amp; currentPreview != null) {&#10;                    try {&#10;                        pickedImageBytes = readBytesFromUri(uri);&#10;                        Bitmap bm = BitmapFactory.decodeByteArray(pickedImageBytes, 0, pickedImageBytes.length);&#10;                        currentPreview.setImageBitmap(bm);&#10;                    } catch (Exception e) {&#10;                        Toast.makeText(this, &quot;Không thể đọc ảnh&quot;, Toast.LENGTH_SHORT).show();&#10;                    }&#10;                }&#10;            });&#10;&#10;    private List&lt;Category&gt; categoryList = new ArrayList&lt;&gt;();&#10;&#10;    @Override&#10;    protected void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_product_list);&#10;&#10;        api = ApiClient.create(this);&#10;&#10;        rcvProducts = findViewById(R.id.rcvProducts);&#10;        fabAdd = findViewById(R.id.fabAdd);&#10;&#10;        rcvProducts.setLayoutManager(new LinearLayoutManager(this));&#10;        adapter = new SellerProductAdapter(productList, new SellerProductAdapter.OnProductActionListener() {&#10;            @Override public void onEdit(Product product, int position) {&#10;                showProductDialog(product, position);&#10;            }&#10;&#10;            @Override public void onDelete(Product product, int position) {&#10;                confirmDelete(product, position);&#10;            }&#10;        });&#10;        rcvProducts.setAdapter(adapter);&#10;&#10;        fabAdd.setOnClickListener(v -&gt; showProductDialog(null, -1));&#10;&#10;        loadProducts(null, 1, 50);&#10;    }&#10;&#10;    private void loadProducts(@Nullable String q, int page, int limit) {&#10;        api.storeProducts(q, page, limit).enqueue(new Callback&lt;ProductListResp&gt;() {&#10;            @Override public void onResponse(Call&lt;ProductListResp&gt; call, Response&lt;ProductListResp&gt; rsp) {&#10;                // Debug: Log API response&#10;                Log.d(&quot;ProductAPI&quot;, &quot;=== API Response Debug ===&quot;);&#10;                Log.d(&quot;ProductAPI&quot;, &quot;Response successful: &quot; + rsp.isSuccessful());&#10;                Log.d(&quot;ProductAPI&quot;, &quot;Response code: &quot; + rsp.code());&#10;&#10;                if (rsp.isSuccessful() &amp;&amp; rsp.body()!=null &amp;&amp; rsp.body().success) {&#10;                    Log.d(&quot;ProductAPI&quot;, &quot;Response body success: &quot; + rsp.body().success);&#10;                    Log.d(&quot;ProductAPI&quot;, &quot;Data count: &quot; + (rsp.body().data != null ? rsp.body().data.size() : &quot;null&quot;));&#10;&#10;                    // Debug: Log first product data if available&#10;                    if (rsp.body().data != null &amp;&amp; !rsp.body().data.isEmpty()) {&#10;                        Product firstProduct = rsp.body().data.get(0);&#10;                        Log.d(&quot;ProductAPI&quot;, &quot;First product ID: &quot; + firstProduct.id);&#10;                        Log.d(&quot;ProductAPI&quot;, &quot;First product name: &quot; + firstProduct.name);&#10;                        Log.d(&quot;ProductAPI&quot;, &quot;First product image_url: '&quot; + firstProduct.image_url + &quot;'&quot;);&#10;                        Log.d(&quot;ProductAPI&quot;, &quot;First product price: &quot; + firstProduct.price);&#10;                        Log.d(&quot;ProductAPI&quot;, &quot;First product category_id: &quot; + firstProduct.category_id);&#10;                    }&#10;&#10;                    productList.clear();&#10;                    if (rsp.body().data != null) productList.addAll(rsp.body().data);&#10;                    adapter.notifyDataSetChanged();&#10;                } else {&#10;                    Log.e(&quot;ProductAPI&quot;, &quot;API call failed or unsuccessful&quot;);&#10;                    if (rsp.body() != null) {&#10;                        Log.e(&quot;ProductAPI&quot;, &quot;Response success flag: &quot; + rsp.body().success);&#10;                    }&#10;                    Toast.makeText(ProductListActivity.this, &quot;Tải sản phẩm thất bại&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;            @Override public void onFailure(Call&lt;ProductListResp&gt; call, Throwable t) {&#10;                Log.e(&quot;ProductAPI&quot;, &quot;API call failed with error: &quot; + t.getMessage());&#10;                Toast.makeText(ProductListActivity.this, &quot;Lỗi mạng&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void confirmDelete(Product p, int position) {&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Xoá sản phẩm&quot;)&#10;                .setMessage(&quot;Bạn chắc chắn muốn xoá \&quot;&quot; + p.name + &quot;\&quot;?&quot;)&#10;                .setPositiveButton(&quot;Xoá&quot;, (d, w) -&gt; {&#10;                    api.storeDelete(p.id).enqueue(new Callback&lt;BaseResp&gt;() {&#10;                        @Override public void onResponse(Call&lt;BaseResp&gt; call, Response&lt;BaseResp&gt; response) {&#10;                            if (response.isSuccessful() &amp;&amp; response.body()!=null &amp;&amp; response.body().success) {&#10;                                productList.remove(position);&#10;                                adapter.notifyItemRemoved(position);&#10;                                Toast.makeText(ProductListActivity.this, &quot;Đã xoá&quot;, Toast.LENGTH_SHORT).show();&#10;                            } else {&#10;                                Toast.makeText(ProductListActivity.this, &quot;Xoá thất bại&quot;, Toast.LENGTH_SHORT).show();&#10;                            }&#10;                        }&#10;                        @Override public void onFailure(Call&lt;BaseResp&gt; call, Throwable t) {&#10;                            Toast.makeText(ProductListActivity.this, &quot;Lỗi mạng&quot;, Toast.LENGTH_SHORT).show();&#10;                        }&#10;                    });&#10;                })&#10;                .setNegativeButton(&quot;Huỷ&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void showProductDialog(@Nullable Product product, int position) {&#10;        View view = LayoutInflater.from(this).inflate(R.layout.dialog_product, null);&#10;&#10;        // Update to use TextInputEditText from Material Design components&#10;        com.google.android.material.textfield.TextInputEditText edtName = view.findViewById(R.id.edtName);&#10;        com.google.android.material.textfield.TextInputEditText edtPrice = view.findViewById(R.id.edtPrice);&#10;        com.google.android.material.textfield.TextInputEditText edtDescription = view.findViewById(R.id.edtDescription);&#10;        com.google.android.material.textfield.TextInputEditText edtStock = view.findViewById(R.id.edtStock);&#10;        com.google.android.material.textfield.TextInputEditText edtBadge = view.findViewById(R.id.edtBadge);&#10;&#10;        // Change from Spinner to EditText for category&#10;        com.google.android.material.textfield.TextInputEditText edtCategory = view.findViewById(R.id.edtCategory);&#10;&#10;        // Update to use SwitchMaterial&#10;        com.google.android.material.switchmaterial.SwitchMaterial switchActive = view.findViewById(R.id.switchActive);&#10;&#10;        ImageView preview = view.findViewById(R.id.previewImage);&#10;        com.google.android.material.button.MaterialButton btnPickImage = view.findViewById(R.id.btnPickImage);&#10;&#10;        // reset state chọn ảnh&#10;        currentPreview = preview;&#10;        pickedImageBytes = null;&#10;&#10;        if (product != null) {&#10;            // Editing existing product&#10;            edtName.setText(product.name != null ? product.name : &quot;&quot;);&#10;            edtPrice.setText(String.valueOf(product.price));&#10;            edtDescription.setText(&quot;&quot;); // No description field in Product model&#10;            edtStock.setText(&quot;&quot;); // No stock field in Product model&#10;            edtBadge.setText(&quot;&quot;); // No badge field in Product model&#10;            edtCategory.setText(&quot;&quot;); // Will be filled when we have category name from API&#10;            switchActive.setChecked(true); // Default to active for existing products&#10;&#10;            if (!TextUtils.isEmpty(product.image_url)) {&#10;                String url = product.image_url.startsWith(&quot;http&quot;) ? product.image_url : product.image_url;&#10;                Picasso.get().load(url).placeholder(R.drawable.ic_image_placeholder).into(preview);&#10;            } else {&#10;                preview.setImageResource(R.drawable.ic_image_placeholder);&#10;            }&#10;        } else {&#10;            // Adding new product - set default values&#10;            switchActive.setChecked(true); // Default to active for new products&#10;            edtStock.setText(&quot;0&quot;); // Default stock&#10;            preview.setImageResource(R.drawable.ic_image_placeholder);&#10;        }&#10;&#10;        btnPickImage.setOnClickListener(v -&gt; pickImageLauncher.launch(&quot;image/*&quot;));&#10;&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(product == null ? &quot;Thêm sản phẩm&quot; : &quot;Sửa sản phẩm&quot;)&#10;                .setView(view)&#10;                .setPositiveButton(product == null ? &quot;Thêm&quot; : &quot;Lưu&quot;, (dialog, which) -&gt; {&#10;                    // lấy dữ liệu&#10;                    String name = edtName.getText().toString().trim();&#10;                    String priceStr = edtPrice.getText().toString().trim();&#10;                    String desc = edtDescription.getText().toString().trim();&#10;                    String stockStr = edtStock.getText().toString().trim();&#10;                    String badge = edtBadge.getText().toString().trim();&#10;                    String categoryName = edtCategory.getText().toString().trim();&#10;                    boolean isActive = switchActive.isChecked();&#10;&#10;                    // DEBUG: Log validation values&#10;                    Log.d(&quot;ProductAdd&quot;, &quot;name: '&quot; + name + &quot;'&quot;);&#10;                    Log.d(&quot;ProductAdd&quot;, &quot;priceStr: '&quot; + priceStr + &quot;'&quot;);&#10;                    Log.d(&quot;ProductAdd&quot;, &quot;categoryName: '&quot; + categoryName + &quot;'&quot;);&#10;&#10;                    // Basic validation&#10;                    if (name.isEmpty()) {&#10;                        Toast.makeText(this, &quot;Vui lòng nhập tên sản phẩm&quot;, Toast.LENGTH_SHORT).show();&#10;                        return;&#10;                    }&#10;&#10;                    if (priceStr.isEmpty()) {&#10;                        Toast.makeText(this, &quot;Vui lòng nhập giá sản phẩm&quot;, Toast.LENGTH_SHORT).show();&#10;                        return;&#10;                    }&#10;&#10;                    if (categoryName.isEmpty()) {&#10;                        Toast.makeText(this, &quot;Vui lòng nhập danh mục sản phẩm&quot;, Toast.LENGTH_SHORT).show();&#10;                        return;&#10;                    }&#10;&#10;                    // build multipart&#10;                    RequestBody rbName = toText(name);&#10;                    RequestBody rbPrice = toText(priceStr);&#10;                    RequestBody rbDesc = toText(desc);&#10;                    RequestBody rbStock = toText(stockStr.isEmpty()? &quot;0&quot; : stockStr);&#10;                    RequestBody rbBadge = toText(badge);&#10;                    RequestBody rbCategoryName = toText(categoryName); // Send category name instead of ID&#10;                    MultipartBody.Part partImg = pickedImageBytes != null ? toImagePart(&quot;img&quot;, &quot;product.jpg&quot;, pickedImageBytes) : null;&#10;&#10;                    if (product == null) {&#10;                        // CREATE - Optional image validation (remove if image not required)&#10;                        if (pickedImageBytes == null) {&#10;                            Toast.makeText(this, &quot;Vui lòng chọn hình ảnh sản phẩm&quot;, Toast.LENGTH_SHORT).show();&#10;                            return;&#10;                        }&#10;&#10;                        Log.d(&quot;ProductAdd&quot;, &quot;Calling API storeCreate...&quot;);&#10;                        // API call with category name instead of ID&#10;                        api.storeCreateWithCategoryName(rbName, rbPrice, rbDesc, rbCategoryName, rbStock, rbBadge, partImg)&#10;                                .enqueue(new Callback&lt;BaseResp&gt;() {&#10;                                    @Override public void onResponse(Call&lt;BaseResp&gt; call, Response&lt;BaseResp&gt; response) {&#10;                                        if (response.isSuccessful() &amp;&amp; response.body() != null &amp;&amp; response.body().success) {&#10;                                            Toast.makeText(ProductListActivity.this, &quot;Đã thêm sản phẩm&quot;, Toast.LENGTH_SHORT).show();&#10;                                            loadProducts(null, 1, 50);&#10;                                        } else {&#10;                                            String errorMsg = &quot;Thêm thất bại&quot;;&#10;                                            try {&#10;                                                if (response.errorBody() != null) {&#10;                                                    String serverError = response.errorBody().string();&#10;                                                    errorMsg += &quot;: &quot; + serverError;&#10;                                                    Log.e(&quot;ProductAdd&quot;, &quot;API errorBody: &quot; + serverError);&#10;                                                } else if (response.body() != null &amp;&amp; response.body().message != null) {&#10;                                                    errorMsg += &quot;: &quot; + response.body().message;&#10;                                                    Log.e(&quot;ProductAdd&quot;, &quot;API message: &quot; + response.body().message);&#10;                                                }&#10;                                            } catch (Exception e) {&#10;                                                Log.e(&quot;ProductAdd&quot;, &quot;Error parsing response&quot;, e);&#10;                                            }&#10;                                            Toast.makeText(ProductListActivity.this, errorMsg, Toast.LENGTH_LONG).show();&#10;                                        }&#10;                                    }&#10;                                    @Override public void onFailure(Call&lt;BaseResp&gt; call, Throwable t) {&#10;                                        Log.e(&quot;ProductAdd&quot;, &quot;Network/API failure&quot;, t);&#10;                                        Toast.makeText(ProductListActivity.this, &quot;Lỗi mạng: &quot; + t.getMessage(), Toast.LENGTH_LONG).show();&#10;                                    }&#10;                                });&#10;                    } else {&#10;                        // UPDATE&#10;                        Log.d(&quot;ProductUpdate&quot;, &quot;Updating product ID: &quot; + product.id);&#10;                        Log.d(&quot;ProductUpdate&quot;, &quot;New name: &quot; + name);&#10;                        Log.d(&quot;ProductUpdate&quot;, &quot;New price: &quot; + priceStr);&#10;                        Log.d(&quot;ProductUpdate&quot;, &quot;New category: &quot; + categoryName);&#10;&#10;                        RequestBody rbId = toText(String.valueOf(product.id));&#10;                        RequestBody rbActive = toText(isActive ? &quot;1&quot; : &quot;0&quot;);&#10;&#10;                        // Use original storeUpdate method instead of the new one&#10;                        // Convert category name to ID first (simplified approach)&#10;                        api.storeUpdate(rbId, rbName, rbPrice, rbDesc, toText(&quot;&quot;), rbStock, rbBadge, rbActive, partImg)&#10;                                .enqueue(new Callback&lt;BaseResp&gt;() {&#10;                                    @Override public void onResponse(Call&lt;BaseResp&gt; call, Response&lt;BaseResp&gt; response) {&#10;                                        if (response.isSuccessful() &amp;&amp; response.body() != null &amp;&amp; response.body().success) {&#10;                                            Toast.makeText(ProductListActivity.this, &quot;Đã lưu thay đổi&quot;, Toast.LENGTH_SHORT).show();&#10;                                            loadProducts(null, 1, 50);&#10;                                        } else {&#10;                                            String errorMsg = &quot;Lưu thất bại&quot;;&#10;                                            try {&#10;                                                if (response.errorBody() != null) {&#10;                                                    String serverError = response.errorBody().string();&#10;                                                    errorMsg += &quot;: &quot; + serverError;&#10;                                                    Log.e(&quot;ProductUpdate&quot;, &quot;API errorBody: &quot; + serverError);&#10;                                                } else if (response.body() != null &amp;&amp; response.body().message != null) {&#10;                                                    errorMsg += &quot;: &quot; + response.body().message;&#10;                                                    Log.e(&quot;ProductUpdate&quot;, &quot;API message: &quot; + response.body().message);&#10;                                                }&#10;                                            } catch (Exception e) {&#10;                                                Log.e(&quot;ProductUpdate&quot;, &quot;Error parsing response&quot;, e);&#10;                                            }&#10;                                            Toast.makeText(ProductListActivity.this, errorMsg, Toast.LENGTH_LONG).show();&#10;                                        }&#10;                                    }&#10;                                    @Override public void onFailure(Call&lt;BaseResp&gt; call, Throwable t) {&#10;                                        Log.e(&quot;ProductUpdate&quot;, &quot;Network/API failure&quot;, t);&#10;                                        Toast.makeText(ProductListActivity.this, &quot;Lỗi mạng: &quot; + t.getMessage(), Toast.LENGTH_LONG).show();&#10;                                    }&#10;                                });&#10;                    }&#10;                })&#10;                .setNegativeButton(&quot;Huỷ&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    /* ================== Helpers =================== */&#10;&#10;    private byte[] readBytesFromUri(Uri uri) {&#10;        try (InputStream is = getContentResolver().openInputStream(uri);&#10;             ByteArrayOutputStream bos = new ByteArrayOutputStream()) {&#10;            byte[] buf = new byte[16 * 1024];&#10;            int n;&#10;            while ((n = is.read(buf)) &gt; 0) bos.write(buf, 0, n);&#10;            return bos.toByteArray();&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    private RequestBody toText(String s) {&#10;        if (s == null) s = &quot;&quot;;&#10;        return RequestBody.create(s, MediaType.parse(&quot;text/plain; charset=utf-8&quot;));&#10;    }&#10;&#10;    private MultipartBody.Part toImagePart(String name, String filename, byte[] data) {&#10;        RequestBody body = RequestBody.create(data, MediaType.parse(&quot;image/*&quot;));&#10;        return MultipartBody.Part.createFormData(name, filename, body);&#10;    }&#10;&#10;    private List&lt;String&gt; getCategoryNames() {&#10;        List&lt;String&gt; names = new ArrayList&lt;&gt;();&#10;        for (Category c : categoryList) names.add(c.name);&#10;        return names;&#10;    }&#10;&#10;    private int getCategoryIndexById(Integer id) {&#10;        for (int i = 0; i &lt; categoryList.size(); i++) {&#10;            if (categoryList.get(i).id == id) return i;&#10;        }&#10;        return -1;&#10;    }&#10;&#10;    /* ============== Adapter nội bộ (dùng Picasso) ============== */&#10;    public static class SellerProductAdapter extends RecyclerView.Adapter&lt;SellerProductAdapter.VH&gt; {&#10;        public interface OnProductActionListener {&#10;            void onEdit(Product product, int position);&#10;            void onDelete(Product product, int position);&#10;        }&#10;&#10;        private final List&lt;Product&gt; items;&#10;        private final OnProductActionListener listener;&#10;&#10;        public SellerProductAdapter(List&lt;Product&gt; items, OnProductActionListener l) {&#10;            this.items = items;&#10;            this.listener = l;&#10;        }&#10;&#10;        @Override public VH onCreateViewHolder(ViewGroup parent, int viewType) {&#10;            View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_product, parent, false);&#10;            return new VH(v);&#10;        }&#10;&#10;        @Override public void onBindViewHolder(VH h, int pos) {&#10;            Product p = items.get(pos);&#10;            h.name.setText(p.name);&#10;            h.price.setText(&quot;Giá: &quot; + String.format(&quot;%,.0f&quot;, p.price) + &quot;đ&quot;);&#10;&#10;            // Display product description instead of leaving it empty&#10;            if (p.description != null &amp;&amp; !p.description.trim().isEmpty()) {&#10;                h.desc.setText(p.description);&#10;                h.desc.setVisibility(View.VISIBLE);&#10;            } else {&#10;                h.desc.setText(&quot;Chưa có mô tả&quot;);&#10;                h.desc.setVisibility(View.VISIBLE);&#10;            }&#10;&#10;            // Debug: Log product data&#10;            Log.d(&quot;ProductAdapter&quot;, &quot;=== Product Debug ===&quot;);&#10;            Log.d(&quot;ProductAdapter&quot;, &quot;Product ID: &quot; + p.id);&#10;            Log.d(&quot;ProductAdapter&quot;, &quot;Product name: &quot; + p.name);&#10;            Log.d(&quot;ProductAdapter&quot;, &quot;Product description: '&quot; + p.description + &quot;'&quot;);&#10;            Log.d(&quot;ProductAdapter&quot;, &quot;Product image_url: '&quot; + p.image_url + &quot;'&quot;);&#10;            Log.d(&quot;ProductAdapter&quot;, &quot;Image_url is null: &quot; + (p.image_url == null));&#10;            Log.d(&quot;ProductAdapter&quot;, &quot;Image_url is empty: &quot; + (p.image_url != null &amp;&amp; p.image_url.isEmpty()));&#10;&#10;            // Fix image URL handling&#10;            if (p.image_url != null &amp;&amp; !p.image_url.isEmpty() &amp;&amp; !p.image_url.equals(&quot;0&quot;)) {&#10;                String imageUrl;&#10;                if (p.image_url.startsWith(&quot;http&quot;)) {&#10;                    // Already full URL&#10;                    imageUrl = p.image_url;&#10;                    Log.d(&quot;ProductAdapter&quot;, &quot;Case: Full URL&quot;);&#10;                } else if (p.image_url.startsWith(&quot;/uploads/&quot;)) {&#10;                    // Relative path starting with /uploads/ - convert to full URL&#10;                    String baseUrl = &quot;http://lequangthanh.click&quot;; // Corrected domain&#10;                    imageUrl = baseUrl + p.image_url;&#10;                    Log.d(&quot;ProductAdapter&quot;, &quot;Case: Relative with /uploads/&quot;);&#10;                } else if (p.image_url.startsWith(&quot;uploads/&quot;)) {&#10;                    // Relative path starting with uploads/ (no leading slash)&#10;                    String baseUrl = &quot;http://lequangthanh.click&quot;; // Corrected domain&#10;                    imageUrl = baseUrl + &quot;/&quot; + p.image_url;&#10;                    Log.d(&quot;ProductAdapter&quot;, &quot;Case: Relative uploads/ without slash&quot;);&#10;                } else {&#10;                    // Invalid or unrecognized path - use placeholder&#10;                    Log.w(&quot;ProductAdapter&quot;, &quot;Invalid image path: '&quot; + p.image_url + &quot;' - using placeholder&quot;);&#10;                    h.img.setImageResource(R.drawable.ic_image_placeholder);&#10;                    return;&#10;                }&#10;&#10;                Log.d(&quot;ProductAdapter&quot;, &quot;Final image URL: &quot; + imageUrl);&#10;&#10;                // Test URL accessibility&#10;                Picasso.get()&#10;                    .load(imageUrl)&#10;                    .placeholder(R.drawable.ic_image_placeholder)&#10;                    .error(R.drawable.ic_image_placeholder) // Show placeholder on error&#10;                    .into(h.img, new com.squareup.picasso.Callback() {&#10;                        @Override&#10;                        public void onSuccess() {&#10;                            Log.d(&quot;ProductAdapter&quot;, &quot;✅ Image loaded successfully: &quot; + imageUrl);&#10;                        }&#10;&#10;                        @Override&#10;                        public void onError(Exception e) {&#10;                            Log.e(&quot;ProductAdapter&quot;, &quot;❌ Image load failed: &quot; + imageUrl);&#10;                            Log.e(&quot;ProductAdapter&quot;, &quot;Error: &quot; + e.getMessage());&#10;                        }&#10;                    });&#10;            } else {&#10;                Log.d(&quot;ProductAdapter&quot;, &quot;No valid image URL for product: &quot; + p.name + &quot; (image_url='&quot; + p.image_url + &quot;') - using placeholder&quot;);&#10;                h.img.setImageResource(R.drawable.ic_image_placeholder);&#10;            }&#10;&#10;            h.btnEdit.setOnClickListener(v -&gt; { if (listener != null) listener.onEdit(p, h.getAdapterPosition()); });&#10;            h.btnDelete.setOnClickListener(v -&gt; { if (listener != null) listener.onDelete(p, h.getAdapterPosition()); });&#10;        }&#10;&#10;        @Override public int getItemCount() { return items.size(); }&#10;&#10;        static class VH extends RecyclerView.ViewHolder {&#10;            TextView name, price, desc;&#10;            ImageView img;&#10;            Button btnEdit, btnDelete;&#10;            VH(View itemView) {&#10;                super(itemView);&#10;                name = itemView.findViewById(R.id.txtName);&#10;                price = itemView.findViewById(R.id.txtPrice);&#10;                desc = itemView.findViewById(R.id.txtDescription);&#10;                img = itemView.findViewById(R.id.imgProduct);&#10;                btnEdit = itemView.findViewById(R.id.btnEdit);&#10;                btnDelete = itemView.findViewById(R.id.btnDelete);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.skymall.ui.seller;&#10;&#10;import android.content.Intent;&#10;import android.graphics.Bitmap;&#10;import android.graphics.BitmapFactory;&#10;import android.net.Uri;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.util.Log;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import android.widget.Switch;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import android.widget.Spinner;&#10;import android.widget.ArrayAdapter;&#10;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.Product;&#10;import com.example.skymall.data.model.Category;&#10;import com.example.skymall.data.remote.ApiClient;&#10;import com.example.skymall.data.remote.ApiService;&#10;import com.example.skymall.data.remote.DTO.BaseResp;&#10;import com.example.skymall.data.remote.DTO.CategoryListResp;&#10;import com.example.skymall.data.remote.DTO.ProductListResp;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.squareup.picasso.Picasso;&#10;&#10;import java.io.ByteArrayOutputStream;&#10;import java.io.InputStream;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import okhttp3.MediaType;&#10;import okhttp3.MultipartBody;&#10;import okhttp3.RequestBody;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class ProductListActivity extends AppCompatActivity {&#10;&#10;    private RecyclerView rcvProducts;&#10;    private FloatingActionButton fabAdd;&#10;    private SellerProductAdapter adapter; // adapter dùng URL ảnh (ở dưới)&#10;    private final List&lt;Product&gt; productList = new ArrayList&lt;&gt;();&#10;    private ApiService api;&#10;&#10;    // Chứa bytes ảnh đang chọn trong dialog&#10;    private byte[] pickedImageBytes = null;&#10;    private ImageView currentPreview = null;&#10;&#10;    private final ActivityResultLauncher&lt;String&gt; pickImageLauncher =&#10;            registerForActivityResult(new ActivityResultContracts.GetContent(), uri -&gt; {&#10;                if (uri != null &amp;&amp; currentPreview != null) {&#10;                    try {&#10;                        pickedImageBytes = readBytesFromUri(uri);&#10;                        Bitmap bm = BitmapFactory.decodeByteArray(pickedImageBytes, 0, pickedImageBytes.length);&#10;                        currentPreview.setImageBitmap(bm);&#10;                    } catch (Exception e) {&#10;                        Toast.makeText(this, &quot;Không thể đọc ảnh&quot;, Toast.LENGTH_SHORT).show();&#10;                    }&#10;                }&#10;            });&#10;&#10;    private List&lt;Category&gt; categoryList = new ArrayList&lt;&gt;();&#10;&#10;    @Override&#10;    protected void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_product_list);&#10;&#10;        api = ApiClient.create(this);&#10;&#10;        rcvProducts = findViewById(R.id.rcvProducts);&#10;        fabAdd = findViewById(R.id.fabAdd);&#10;&#10;        rcvProducts.setLayoutManager(new LinearLayoutManager(this));&#10;        adapter = new SellerProductAdapter(productList, new SellerProductAdapter.OnProductActionListener() {&#10;            @Override public void onEdit(Product product, int position) {&#10;                showProductDialog(product, position);&#10;            }&#10;&#10;            @Override public void onDelete(Product product, int position) {&#10;                confirmDelete(product, position);&#10;            }&#10;        });&#10;        rcvProducts.setAdapter(adapter);&#10;&#10;        fabAdd.setOnClickListener(v -&gt; showProductDialog(null, -1));&#10;&#10;        loadProducts(null, 1, 50);&#10;    }&#10;&#10;    private void loadProducts(@Nullable String q, int page, int limit) {&#10;        api.storeProducts(q, page, limit).enqueue(new Callback&lt;ProductListResp&gt;() {&#10;            @Override public void onResponse(Call&lt;ProductListResp&gt; call, Response&lt;ProductListResp&gt; rsp) {&#10;                // Debug: Log API response&#10;                Log.d(&quot;ProductAPI&quot;, &quot;=== API Response Debug ===&quot;);&#10;                Log.d(&quot;ProductAPI&quot;, &quot;Response successful: &quot; + rsp.isSuccessful());&#10;                Log.d(&quot;ProductAPI&quot;, &quot;Response code: &quot; + rsp.code());&#10;&#10;                if (rsp.isSuccessful() &amp;&amp; rsp.body()!=null &amp;&amp; rsp.body().success) {&#10;                    Log.d(&quot;ProductAPI&quot;, &quot;Response body success: &quot; + rsp.body().success);&#10;                    Log.d(&quot;ProductAPI&quot;, &quot;Data count: &quot; + (rsp.body().data != null ? rsp.body().data.size() : &quot;null&quot;));&#10;&#10;                    // Debug: Log first product data if available&#10;                    if (rsp.body().data != null &amp;&amp; !rsp.body().data.isEmpty()) {&#10;                        Product firstProduct = rsp.body().data.get(0);&#10;                        Log.d(&quot;ProductAPI&quot;, &quot;First product ID: &quot; + firstProduct.id);&#10;                        Log.d(&quot;ProductAPI&quot;, &quot;First product name: &quot; + firstProduct.name);&#10;                        Log.d(&quot;ProductAPI&quot;, &quot;First product image: '&quot; + firstProduct.image + &quot;'&quot;);&#10;                        Log.d(&quot;ProductAPI&quot;, &quot;First product price: &quot; + firstProduct.price);&#10;                        Log.d(&quot;ProductAPI&quot;, &quot;First product categoryId: &quot; + firstProduct.categoryId);&#10;                    }&#10;&#10;                    productList.clear();&#10;                    if (rsp.body().data != null) productList.addAll(rsp.body().data);&#10;                    adapter.notifyDataSetChanged();&#10;                } else {&#10;                    Log.e(&quot;ProductAPI&quot;, &quot;API call failed or unsuccessful&quot;);&#10;                    if (rsp.body() != null) {&#10;                        Log.e(&quot;ProductAPI&quot;, &quot;Response success flag: &quot; + rsp.body().success);&#10;                    }&#10;                    Toast.makeText(ProductListActivity.this, &quot;Tải sản phẩm thất bại&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;            @Override public void onFailure(Call&lt;ProductListResp&gt; call, Throwable t) {&#10;                Log.e(&quot;ProductAPI&quot;, &quot;API call failed with error: &quot; + t.getMessage());&#10;                Toast.makeText(ProductListActivity.this, &quot;Lỗi mạng&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void confirmDelete(Product p, int position) {&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Xoá sản phẩm&quot;)&#10;                .setMessage(&quot;Bạn chắc chắn muốn xoá \&quot;&quot; + p.name + &quot;\&quot;?&quot;)&#10;                .setPositiveButton(&quot;Xoá&quot;, (d, w) -&gt; {&#10;                    api.storeDelete(p.id).enqueue(new Callback&lt;BaseResp&gt;() {&#10;                        @Override public void onResponse(Call&lt;BaseResp&gt; call, Response&lt;BaseResp&gt; response) {&#10;                            if (response.isSuccessful() &amp;&amp; response.body()!=null &amp;&amp; response.body().success) {&#10;                                productList.remove(position);&#10;                                adapter.notifyItemRemoved(position);&#10;                                Toast.makeText(ProductListActivity.this, &quot;Đã xoá&quot;, Toast.LENGTH_SHORT).show();&#10;                            } else {&#10;                                Toast.makeText(ProductListActivity.this, &quot;Xoá thất bại&quot;, Toast.LENGTH_SHORT).show();&#10;                            }&#10;                        }&#10;                        @Override public void onFailure(Call&lt;BaseResp&gt; call, Throwable t) {&#10;                            Toast.makeText(ProductListActivity.this, &quot;Lỗi mạng&quot;, Toast.LENGTH_SHORT).show();&#10;                        }&#10;                    });&#10;                })&#10;                .setNegativeButton(&quot;Huỷ&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void showProductDialog(@Nullable Product product, int position) {&#10;        View view = LayoutInflater.from(this).inflate(R.layout.dialog_product, null);&#10;&#10;        // Update to use TextInputEditText from Material Design components&#10;        com.google.android.material.textfield.TextInputEditText edtName = view.findViewById(R.id.edtName);&#10;        com.google.android.material.textfield.TextInputEditText edtPrice = view.findViewById(R.id.edtPrice);&#10;        com.google.android.material.textfield.TextInputEditText edtDescription = view.findViewById(R.id.edtDescription);&#10;        com.google.android.material.textfield.TextInputEditText edtStock = view.findViewById(R.id.edtStock);&#10;        com.google.android.material.textfield.TextInputEditText edtBadge = view.findViewById(R.id.edtBadge);&#10;&#10;        // Change from Spinner to EditText for category&#10;        com.google.android.material.textfield.TextInputEditText edtCategory = view.findViewById(R.id.edtCategory);&#10;&#10;        // Update to use SwitchMaterial&#10;        com.google.android.material.switchmaterial.SwitchMaterial switchActive = view.findViewById(R.id.switchActive);&#10;&#10;        ImageView preview = view.findViewById(R.id.previewImage);&#10;        com.google.android.material.button.MaterialButton btnPickImage = view.findViewById(R.id.btnPickImage);&#10;&#10;        // reset state chọn ảnh&#10;        currentPreview = preview;&#10;        pickedImageBytes = null;&#10;&#10;        if (product != null) {&#10;            // Editing existing product&#10;            edtName.setText(product.name != null ? product.name : &quot;&quot;);&#10;            edtPrice.setText(String.valueOf(product.price));&#10;            edtDescription.setText(&quot;&quot;); // No description field in Product model&#10;            edtStock.setText(&quot;&quot;); // No stock field in Product model&#10;            edtBadge.setText(&quot;&quot;); // No badge field in Product model&#10;            edtCategory.setText(&quot;&quot;); // Will be filled when we have category name from API&#10;            switchActive.setChecked(true); // Default to active for existing products&#10;&#10;            if (!TextUtils.isEmpty(product.image)) {&#10;                String url = product.image.startsWith(&quot;http&quot;) ? product.image : product.image;&#10;                Picasso.get().load(url).placeholder(R.drawable.ic_image_placeholder).into(preview);&#10;            } else {&#10;                preview.setImageResource(R.drawable.ic_image_placeholder);&#10;            }&#10;        } else {&#10;            // Adding new product - set default values&#10;            switchActive.setChecked(true); // Default to active for new products&#10;            edtStock.setText(&quot;0&quot;); // Default stock&#10;            preview.setImageResource(R.drawable.ic_image_placeholder);&#10;        }&#10;&#10;        btnPickImage.setOnClickListener(v -&gt; pickImageLauncher.launch(&quot;image/*&quot;));&#10;&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(product == null ? &quot;Thêm sản phẩm&quot; : &quot;Sửa sản phẩm&quot;)&#10;                .setView(view)&#10;                .setPositiveButton(product == null ? &quot;Thêm&quot; : &quot;Lưu&quot;, (dialog, which) -&gt; {&#10;                    // lấy dữ liệu&#10;                    String name = edtName.getText().toString().trim();&#10;                    String priceStr = edtPrice.getText().toString().trim();&#10;                    String desc = edtDescription.getText().toString().trim();&#10;                    String stockStr = edtStock.getText().toString().trim();&#10;                    String badge = edtBadge.getText().toString().trim();&#10;                    String categoryName = edtCategory.getText().toString().trim();&#10;                    boolean isActive = switchActive.isChecked();&#10;&#10;                    // DEBUG: Log validation values&#10;                    Log.d(&quot;ProductAdd&quot;, &quot;name: '&quot; + name + &quot;'&quot;);&#10;                    Log.d(&quot;ProductAdd&quot;, &quot;priceStr: '&quot; + priceStr + &quot;'&quot;);&#10;                    Log.d(&quot;ProductAdd&quot;, &quot;categoryName: '&quot; + categoryName + &quot;'&quot;);&#10;&#10;                    // Basic validation&#10;                    if (name.isEmpty()) {&#10;                        Toast.makeText(this, &quot;Vui lòng nhập tên sản phẩm&quot;, Toast.LENGTH_SHORT).show();&#10;                        return;&#10;                    }&#10;&#10;                    if (priceStr.isEmpty()) {&#10;                        Toast.makeText(this, &quot;Vui lòng nhập giá sản phẩm&quot;, Toast.LENGTH_SHORT).show();&#10;                        return;&#10;                    }&#10;&#10;                    if (categoryName.isEmpty()) {&#10;                        Toast.makeText(this, &quot;Vui lòng nhập danh mục sản phẩm&quot;, Toast.LENGTH_SHORT).show();&#10;                        return;&#10;                    }&#10;&#10;                    // build multipart&#10;                    RequestBody rbName = toText(name);&#10;                    RequestBody rbPrice = toText(priceStr);&#10;                    RequestBody rbDesc = toText(desc);&#10;                    RequestBody rbStock = toText(stockStr.isEmpty()? &quot;0&quot; : stockStr);&#10;                    RequestBody rbBadge = toText(badge);&#10;                    RequestBody rbCategoryName = toText(categoryName); // Send category name instead of ID&#10;                    MultipartBody.Part partImg = pickedImageBytes != null ? toImagePart(&quot;img&quot;, &quot;product.jpg&quot;, pickedImageBytes) : null;&#10;&#10;                    if (product == null) {&#10;                        // CREATE - Optional image validation (remove if image not required)&#10;                        if (pickedImageBytes == null) {&#10;                            Toast.makeText(this, &quot;Vui lòng chọn hình ảnh sản phẩm&quot;, Toast.LENGTH_SHORT).show();&#10;                            return;&#10;                        }&#10;&#10;                        Log.d(&quot;ProductAdd&quot;, &quot;Calling API storeCreate...&quot;);&#10;                        // API call with category name instead of ID&#10;                        api.storeCreateWithCategoryName(rbName, rbPrice, rbDesc, rbCategoryName, rbStock, rbBadge, partImg)&#10;                                .enqueue(new Callback&lt;BaseResp&gt;() {&#10;                                    @Override public void onResponse(Call&lt;BaseResp&gt; call, Response&lt;BaseResp&gt; response) {&#10;                                        if (response.isSuccessful() &amp;&amp; response.body() != null &amp;&amp; response.body().success) {&#10;                                            Toast.makeText(ProductListActivity.this, &quot;Đã thêm sản phẩm&quot;, Toast.LENGTH_SHORT).show();&#10;                                            loadProducts(null, 1, 50);&#10;                                        } else {&#10;                                            String errorMsg = &quot;Thêm thất bại&quot;;&#10;                                            try {&#10;                                                if (response.errorBody() != null) {&#10;                                                    String serverError = response.errorBody().string();&#10;                                                    errorMsg += &quot;: &quot; + serverError;&#10;                                                    Log.e(&quot;ProductAdd&quot;, &quot;API errorBody: &quot; + serverError);&#10;                                                } else if (response.body() != null &amp;&amp; response.body().message != null) {&#10;                                                    errorMsg += &quot;: &quot; + response.body().message;&#10;                                                    Log.e(&quot;ProductAdd&quot;, &quot;API message: &quot; + response.body().message);&#10;                                                }&#10;                                            } catch (Exception e) {&#10;                                                Log.e(&quot;ProductAdd&quot;, &quot;Error parsing response&quot;, e);&#10;                                            }&#10;                                            Toast.makeText(ProductListActivity.this, errorMsg, Toast.LENGTH_LONG).show();&#10;                                        }&#10;                                    }&#10;                                    @Override public void onFailure(Call&lt;BaseResp&gt; call, Throwable t) {&#10;                                        Log.e(&quot;ProductAdd&quot;, &quot;Network/API failure&quot;, t);&#10;                                        Toast.makeText(ProductListActivity.this, &quot;Lỗi mạng: &quot; + t.getMessage(), Toast.LENGTH_LONG).show();&#10;                                    }&#10;                                });&#10;                    } else {&#10;                        // UPDATE&#10;                        Log.d(&quot;ProductUpdate&quot;, &quot;Updating product ID: &quot; + product.id);&#10;                        Log.d(&quot;ProductUpdate&quot;, &quot;New name: &quot; + name);&#10;                        Log.d(&quot;ProductUpdate&quot;, &quot;New price: &quot; + priceStr);&#10;                        Log.d(&quot;ProductUpdate&quot;, &quot;New category: &quot; + categoryName);&#10;&#10;                        RequestBody rbId = toText(String.valueOf(product.id));&#10;                        RequestBody rbActive = toText(isActive ? &quot;1&quot; : &quot;0&quot;);&#10;&#10;                        // Use original storeUpdate method instead of the new one&#10;                        // Convert category name to ID first (simplified approach)&#10;                        api.storeUpdate(rbId, rbName, rbPrice, rbDesc, toText(&quot;&quot;), rbStock, rbBadge, rbActive, partImg)&#10;                                .enqueue(new Callback&lt;BaseResp&gt;() {&#10;                                    @Override public void onResponse(Call&lt;BaseResp&gt; call, Response&lt;BaseResp&gt; response) {&#10;                                        if (response.isSuccessful() &amp;&amp; response.body() != null &amp;&amp; response.body().success) {&#10;                                            Toast.makeText(ProductListActivity.this, &quot;Đã lưu thay đổi&quot;, Toast.LENGTH_SHORT).show();&#10;                                            loadProducts(null, 1, 50);&#10;                                        } else {&#10;                                            String errorMsg = &quot;Lưu thất bại&quot;;&#10;                                            try {&#10;                                                if (response.errorBody() != null) {&#10;                                                    String serverError = response.errorBody().string();&#10;                                                    errorMsg += &quot;: &quot; + serverError;&#10;                                                    Log.e(&quot;ProductUpdate&quot;, &quot;API errorBody: &quot; + serverError);&#10;                                                } else if (response.body() != null &amp;&amp; response.body().message != null) {&#10;                                                    errorMsg += &quot;: &quot; + response.body().message;&#10;                                                    Log.e(&quot;ProductUpdate&quot;, &quot;API message: &quot; + response.body().message);&#10;                                                }&#10;                                            } catch (Exception e) {&#10;                                                Log.e(&quot;ProductUpdate&quot;, &quot;Error parsing response&quot;, e);&#10;                                            }&#10;                                            Toast.makeText(ProductListActivity.this, errorMsg, Toast.LENGTH_LONG).show();&#10;                                        }&#10;                                    }&#10;                                    @Override public void onFailure(Call&lt;BaseResp&gt; call, Throwable t) {&#10;                                        Log.e(&quot;ProductUpdate&quot;, &quot;Network/API failure&quot;, t);&#10;                                        Toast.makeText(ProductListActivity.this, &quot;Lỗi mạng: &quot; + t.getMessage(), Toast.LENGTH_LONG).show();&#10;                                    }&#10;                                });&#10;                    }&#10;                })&#10;                .setNegativeButton(&quot;Huỷ&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    /* ================== Helpers =================== */&#10;&#10;    private byte[] readBytesFromUri(Uri uri) {&#10;        try (InputStream is = getContentResolver().openInputStream(uri);&#10;             ByteArrayOutputStream bos = new ByteArrayOutputStream()) {&#10;            byte[] buf = new byte[16 * 1024];&#10;            int n;&#10;            while ((n = is.read(buf)) &gt; 0) bos.write(buf, 0, n);&#10;            return bos.toByteArray();&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    private RequestBody toText(String s) {&#10;        if (s == null) s = &quot;&quot;;&#10;        return RequestBody.create(s, MediaType.parse(&quot;text/plain; charset=utf-8&quot;));&#10;    }&#10;&#10;    private MultipartBody.Part toImagePart(String name, String filename, byte[] data) {&#10;        RequestBody body = RequestBody.create(data, MediaType.parse(&quot;image/*&quot;));&#10;        return MultipartBody.Part.createFormData(name, filename, body);&#10;    }&#10;&#10;    private List&lt;String&gt; getCategoryNames() {&#10;        List&lt;String&gt; names = new ArrayList&lt;&gt;();&#10;        for (Category c : categoryList) names.add(c.name);&#10;        return names;&#10;    }&#10;&#10;    private int getCategoryIndexById(Integer id) {&#10;        for (int i = 0; i &lt; categoryList.size(); i++) {&#10;            if (categoryList.get(i).id == id) return i;&#10;        }&#10;        return -1;&#10;    }&#10;&#10;    /* ============== Adapter nội bộ (dùng Picasso) ============== */&#10;    public static class SellerProductAdapter extends RecyclerView.Adapter&lt;SellerProductAdapter.VH&gt; {&#10;        public interface OnProductActionListener {&#10;            void onEdit(Product product, int position);&#10;            void onDelete(Product product, int position);&#10;        }&#10;&#10;        private final List&lt;Product&gt; items;&#10;        private final OnProductActionListener listener;&#10;&#10;        public SellerProductAdapter(List&lt;Product&gt; items, OnProductActionListener l) {&#10;            this.items = items;&#10;            this.listener = l;&#10;        }&#10;&#10;        @Override public VH onCreateViewHolder(ViewGroup parent, int viewType) {&#10;            View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_product, parent, false);&#10;            return new VH(v);&#10;        }&#10;&#10;        @Override public void onBindViewHolder(VH h, int pos) {&#10;            Product p = items.get(pos);&#10;            h.name.setText(p.name);&#10;            h.price.setText(&quot;Giá: &quot; + String.format(&quot;%,.0f&quot;, p.price) + &quot;đ&quot;);&#10;&#10;            // Display product description instead of leaving it empty&#10;            if (p.description != null &amp;&amp; !p.description.trim().isEmpty()) {&#10;                h.desc.setText(p.description);&#10;                h.desc.setVisibility(View.VISIBLE);&#10;            } else {&#10;                h.desc.setText(&quot;Chưa có mô tả&quot;);&#10;                h.desc.setVisibility(View.VISIBLE);&#10;            }&#10;&#10;            // Debug: Log product data&#10;            Log.d(&quot;ProductAdapter&quot;, &quot;=== Product Debug ===&quot;);&#10;            Log.d(&quot;ProductAdapter&quot;, &quot;Product ID: &quot; + p.id);&#10;            Log.d(&quot;ProductAdapter&quot;, &quot;Product name: &quot; + p.name);&#10;            Log.d(&quot;ProductAdapter&quot;, &quot;Product description: '&quot; + p.description + &quot;'&quot;);&#10;            Log.d(&quot;ProductAdapter&quot;, &quot;Product image_url: '&quot; + p.image + &quot;'&quot;);&#10;            Log.d(&quot;ProductAdapter&quot;, &quot;Image_url is null: &quot; + (p.image == null));&#10;            Log.d(&quot;ProductAdapter&quot;, &quot;Image_url is empty: &quot; + (p.image != null &amp;&amp; p.image.isEmpty()));&#10;&#10;            // Fix image URL handling&#10;            if (p.image != null &amp;&amp; !p.image.isEmpty() &amp;&amp; !p.image.equals(&quot;0&quot;)) {&#10;                String imageUrl;&#10;                if (p.image.startsWith(&quot;http&quot;)) {&#10;                    // Already full URL&#10;                    imageUrl = p.image;&#10;                    Log.d(&quot;ProductAdapter&quot;, &quot;Case: Full URL&quot;);&#10;                } else if (p.image.startsWith(&quot;/uploads/&quot;)) {&#10;                    // Relative path starting with /uploads/ - convert to full URL&#10;                    String baseUrl = &quot;http://lequangthanh.click&quot;; // Corrected domain&#10;                    imageUrl = baseUrl + p.image;&#10;                    Log.d(&quot;ProductAdapter&quot;, &quot;Case: Relative with /uploads/&quot;);&#10;                } else if (p.image.startsWith(&quot;uploads/&quot;)) {&#10;                    // Relative path starting with uploads/ (no leading slash)&#10;                    String baseUrl = &quot;http://lequangthanh.click&quot;; // Corrected domain&#10;                    imageUrl = baseUrl + &quot;/&quot; + p.image;&#10;                    Log.d(&quot;ProductAdapter&quot;, &quot;Case: Relative uploads/ without slash&quot;);&#10;                } else {&#10;                    // Invalid or unrecognized path - use placeholder&#10;                    Log.w(&quot;ProductAdapter&quot;, &quot;Invalid image path: '&quot; + p.image + &quot;' - using placeholder&quot;);&#10;                    h.img.setImageResource(R.drawable.ic_image_placeholder);&#10;                    return;&#10;                }&#10;&#10;                Log.d(&quot;ProductAdapter&quot;, &quot;Final image URL: &quot; + imageUrl);&#10;&#10;                // Test URL accessibility&#10;                Picasso.get()&#10;                    .load(imageUrl)&#10;                    .placeholder(R.drawable.ic_image_placeholder)&#10;                    .error(R.drawable.ic_image_placeholder) // Show placeholder on error&#10;                    .into(h.img, new com.squareup.picasso.Callback() {&#10;                        @Override&#10;                        public void onSuccess() {&#10;                            Log.d(&quot;ProductAdapter&quot;, &quot;✅ Image loaded successfully: &quot; + imageUrl);&#10;                        }&#10;&#10;                        @Override&#10;                        public void onError(Exception e) {&#10;                            Log.e(&quot;ProductAdapter&quot;, &quot;❌ Image load failed: &quot; + imageUrl);&#10;                            Log.e(&quot;ProductAdapter&quot;, &quot;Error: &quot; + e.getMessage());&#10;                        }&#10;                    });&#10;            } else {&#10;                Log.d(&quot;ProductAdapter&quot;, &quot;No valid image URL for product: &quot; + p.name + &quot; (image_url='&quot; + p.image + &quot;') - using placeholder&quot;);&#10;                h.img.setImageResource(R.drawable.ic_image_placeholder);&#10;            }&#10;&#10;            h.btnEdit.setOnClickListener(v -&gt; { if (listener != null) listener.onEdit(p, h.getAdapterPosition()); });&#10;            h.btnDelete.setOnClickListener(v -&gt; { if (listener != null) listener.onDelete(p, h.getAdapterPosition()); });&#10;        }&#10;&#10;        @Override public int getItemCount() { return items.size(); }&#10;&#10;        static class VH extends RecyclerView.ViewHolder {&#10;            TextView name, price, desc;&#10;            ImageView img;&#10;            Button btnEdit, btnDelete;&#10;            VH(View itemView) {&#10;                super(itemView);&#10;                name = itemView.findViewById(R.id.txtName);&#10;                price = itemView.findViewById(R.id.txtPrice);&#10;                desc = itemView.findViewById(R.id.txtDescription);&#10;                img = itemView.findViewById(R.id.imgProduct);&#10;                btnEdit = itemView.findViewById(R.id.btnEdit);&#10;                btnDelete = itemView.findViewById(R.id.btnDelete);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/seller/VoucherManagementActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/seller/VoucherManagementActivity.java" />
              <option name="originalContent" value="package com.example.skymall.ui.seller;&#10;&#10;import android.app.DatePickerDialog;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.View;&#10;import android.widget.AdapterView;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.EditText;&#10;import android.widget.Spinner;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.Voucher;&#10;import com.example.skymall.data.remote.ApiClient;&#10;import com.example.skymall.data.remote.ApiService;&#10;import com.example.skymall.data.remote.DTO.BaseResp;&#10;import com.example.skymall.data.remote.DTO.VoucherListResp;&#10;import com.google.android.material.appbar.MaterialToolbar;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.google.android.material.card.MaterialCardView;&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.google.android.material.textfield.TextInputLayout;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Calendar;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class VoucherManagementActivity extends AppCompatActivity {&#10;&#10;    private RecyclerView recyclerView;&#10;    private VoucherManagementAdapter adapter;&#10;    private FloatingActionButton fabAdd;&#10;    private ApiService apiService;&#10;    private List&lt;Voucher&gt; voucherList = new ArrayList&lt;&gt;();&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_voucher_management);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        setupApiService();&#10;        loadVouchers();&#10;    }&#10;&#10;    private void initViews() {&#10;        recyclerView = findViewById(R.id.recyclerViewVouchers);&#10;        fabAdd = findViewById(R.id.fabAddVoucher);&#10;&#10;        fabAdd.setOnClickListener(v -&gt; showCreateVoucherDialog());&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        MaterialToolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setTitle(&quot;Quản lý Voucher&quot;);&#10;        }&#10;        toolbar.setNavigationOnClickListener(v -&gt; finish());&#10;&#10;        // Add stats menu item&#10;        toolbar.setOnMenuItemClickListener(item -&gt; {&#10;            if (item.getItemId() == R.id.menu_stats) {&#10;                startActivity(new Intent(this, VoucherStatsActivity.class));&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;        toolbar.inflateMenu(R.menu.menu_voucher_management);&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        adapter = new VoucherManagementAdapter(voucherList, new VoucherManagementAdapter.OnVoucherActionListener() {&#10;            @Override&#10;            public void onEdit(Voucher voucher) {&#10;                showEditVoucherDialog(voucher);&#10;            }&#10;&#10;            @Override&#10;            public void onDelete(Voucher voucher) {&#10;                showDeleteConfirmDialog(voucher);&#10;            }&#10;&#10;            @Override&#10;            public void onToggleStatus(Voucher voucher) {&#10;                // Toggle voucher active status&#10;                voucher.isActive = !voucher.isActive;&#10;                // Update via API would go here&#10;            }&#10;&#10;            @Override&#10;            public void onDuplicate(Voucher voucher) {&#10;                showDuplicateVoucherDialog(voucher);&#10;            }&#10;&#10;            @Override&#10;            public void onViewDetails(Voucher voucher) {&#10;                showVoucherDetailsDialog(voucher);&#10;            }&#10;        });&#10;&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(this));&#10;        recyclerView.setAdapter(adapter);&#10;    }&#10;&#10;    private void setupApiService() {&#10;        apiService = ApiClient.create(this);&#10;    }&#10;&#10;    private void loadVouchers() {&#10;        apiService.getVouchers(1, 50).enqueue(new Callback&lt;VoucherListResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;VoucherListResp&gt; call, @NonNull Response&lt;VoucherListResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    VoucherListResp responseBody = response.body();&#10;&#10;                    if (responseBody.success) {&#10;                        voucherList.clear();&#10;                        List&lt;Voucher&gt; serverVouchers = responseBody.vouchers != null ? responseBody.vouchers : responseBody.data;&#10;&#10;                        if (serverVouchers != null) {&#10;                            voucherList.addAll(serverVouchers);&#10;                        }&#10;                        adapter.notifyDataSetChanged();&#10;                        return;&#10;                    }&#10;                }&#10;&#10;                tryStoreVouchersEndpoint();&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;VoucherListResp&gt; call, @NonNull Throwable t) {&#10;                tryStoreVouchersEndpoint();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void tryStoreVouchersEndpoint() {&#10;        apiService.getStoreVouchers(1, 50).enqueue(new Callback&lt;VoucherListResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;VoucherListResp&gt; call, @NonNull Response&lt;VoucherListResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    VoucherListResp responseBody = response.body();&#10;&#10;                    if (responseBody.success) {&#10;                        voucherList.clear();&#10;                        if (responseBody.vouchers != null) {&#10;                            voucherList.addAll(responseBody.vouchers);&#10;                        }&#10;                        adapter.notifyDataSetChanged();&#10;                    } else {&#10;                        showEmptyState(&quot;Không có voucher nào: &quot; + (responseBody.message != null ? responseBody.message : &quot;Lỗi không xác định&quot;));&#10;                    }&#10;                } else {&#10;                    String errorMsg = &quot;Lỗi server: &quot; + response.code();&#10;                    if (response.message() != null) {&#10;                        errorMsg += &quot; - &quot; + response.message();&#10;                    }&#10;                    showEmptyState(errorMsg);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;VoucherListResp&gt; call, @NonNull Throwable t) {&#10;                showEmptyState(&quot;Lỗi kết nối: &quot; + t.getMessage());&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showEmptyState(String message) {&#10;        voucherList.clear();&#10;        adapter.notifyDataSetChanged();&#10;        Toast.makeText(VoucherManagementActivity.this, message, Toast.LENGTH_LONG).show();&#10;    }&#10;&#10;    private void showCreateVoucherDialog() {&#10;        showVoucherDialog(null);&#10;    }&#10;&#10;    private void showEditVoucherDialog(Voucher voucher) {&#10;        showVoucherDialog(voucher);&#10;    }&#10;&#10;    private void showVoucherDialog(Voucher existingVoucher) {&#10;        View dialogView = getLayoutInflater().inflate(R.layout.dialog_voucher_form, null);&#10;&#10;        TextInputLayout tilCode = dialogView.findViewById(R.id.tilVoucherCode);&#10;        TextInputLayout tilValue = dialogView.findViewById(R.id.tilVoucherValue);&#10;        TextInputLayout tilMinOrder = dialogView.findViewById(R.id.tilMinOrderValue);&#10;        TextInputLayout tilUsageLimit = dialogView.findViewById(R.id.tilUsageLimit);&#10;        TextInputLayout tilPerUserLimit = dialogView.findViewById(R.id.tilPerUserLimit);&#10;        TextInputLayout tilDescription = dialogView.findViewById(R.id.tilDescription);&#10;&#10;        EditText etCode = tilCode.getEditText();&#10;        EditText etValue = tilValue.getEditText();&#10;        EditText etMinOrder = tilMinOrder.getEditText();&#10;        EditText etUsageLimit = tilUsageLimit.getEditText();&#10;        EditText etPerUserLimit = tilPerUserLimit.getEditText();&#10;        EditText etDescription = tilDescription.getEditText();&#10;&#10;        // Null check for EditText objects&#10;        if (etCode == null || etValue == null || etMinOrder == null ||&#10;            etUsageLimit == null || etPerUserLimit == null || etDescription == null) {&#10;            Toast.makeText(this, &quot;Lỗi tải form voucher&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        Spinner spinnerType = dialogView.findViewById(R.id.spinnerVoucherType);&#10;        MaterialButton btnStartDate = dialogView.findViewById(R.id.btnStartDate);&#10;        MaterialButton btnEndDate = dialogView.findViewById(R.id.btnEndDate);&#10;&#10;        // Setup spinner&#10;        String[] types = {&quot;percent&quot;, &quot;amount&quot;};&#10;        String[] typeLabels = {&quot;Giảm theo %&quot;, &quot;Giảm cố định&quot;};&#10;        ArrayAdapter&lt;String&gt; typeAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, typeLabels);&#10;        typeAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerType.setAdapter(typeAdapter);&#10;&#10;        // Date pickers&#10;        Calendar startDate = Calendar.getInstance();&#10;        Calendar endDate = Calendar.getInstance();&#10;        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault());&#10;&#10;        btnStartDate.setOnClickListener(v -&gt; {&#10;            DatePickerDialog picker = new DatePickerDialog(this,&#10;                (view, year, month, dayOfMonth) -&gt; {&#10;                    startDate.set(year, month, dayOfMonth);&#10;                    btnStartDate.setText(dateFormat.format(startDate.getTime()));&#10;                },&#10;                startDate.get(Calendar.YEAR),&#10;                startDate.get(Calendar.MONTH),&#10;                startDate.get(Calendar.DAY_OF_MONTH)&#10;            );&#10;            picker.show();&#10;        });&#10;&#10;        btnEndDate.setOnClickListener(v -&gt; {&#10;            DatePickerDialog picker = new DatePickerDialog(this,&#10;                (view, year, month, dayOfMonth) -&gt; {&#10;                    endDate.set(year, month, dayOfMonth);&#10;                    btnEndDate.setText(dateFormat.format(endDate.getTime()));&#10;                },&#10;                endDate.get(Calendar.YEAR),&#10;                endDate.get(Calendar.MONTH),&#10;                endDate.get(Calendar.DAY_OF_MONTH)&#10;            );&#10;            picker.show();&#10;        });&#10;&#10;        // Fill existing data if editing&#10;        if (existingVoucher != null) {&#10;            if (existingVoucher.code != null) {&#10;                etCode.setText(existingVoucher.code);&#10;            }&#10;            etValue.setText(String.valueOf(existingVoucher.discountValue)); // Sử dụng discountValue&#10;            etMinOrder.setText(String.valueOf(existingVoucher.minOrderAmount)); // Sử dụng minOrderAmount&#10;            if (existingVoucher.usageLimit &gt; 0) { // usageLimit là int, không phải Integer&#10;                etUsageLimit.setText(String.valueOf(existingVoucher.usageLimit));&#10;            }&#10;            // perUserLimit không tồn tại trong model - bỏ qua hoặc để trống&#10;            etDescription.setText(existingVoucher.description != null ? existingVoucher.description : &quot;&quot;);&#10;&#10;            // Set spinner selection - sử dụng discountType&#10;            if (existingVoucher.discountType != null) {&#10;                spinnerType.setSelection(&quot;percentage&quot;.equals(existingVoucher.discountType) ? 0 : 1);&#10;            }&#10;&#10;            // Set dates - chỉ có expiryDate, không có startDate/endDate&#10;            if (existingVoucher.expiryDate != null) {&#10;                btnEndDate.setText(existingVoucher.expiryDate);&#10;                // Parse và update Calendar object&#10;                try {&#10;                    java.util.Date parsedEndDate = dateFormat.parse(existingVoucher.expiryDate);&#10;                    if (parsedEndDate != null) {&#10;                        endDate.setTime(parsedEndDate);&#10;                    }&#10;                } catch (Exception e) {&#10;                    // If parsing fails, keep default date&#10;                }&#10;            }&#10;        } else {&#10;            btnStartDate.setText(dateFormat.format(startDate.getTime()));&#10;            btnEndDate.setText(dateFormat.format(endDate.getTime()));&#10;        }&#10;&#10;        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(this)&#10;                .setTitle(existingVoucher == null ? &quot;Tạo Voucher Mới&quot; : &quot;Chỉnh sửa Voucher&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(&quot;Lưu&quot;, (dialog, which) -&gt; {&#10;                    if (validateVoucherFormWithType(tilCode, tilValue, tilMinOrder, spinnerType)) {&#10;                        String code = etCode.getText().toString().trim();&#10;                        String type = types[spinnerType.getSelectedItemPosition()];&#10;&#10;                        try {&#10;                            double value = Double.parseDouble(etValue.getText().toString().trim());&#10;                            double minOrderValue = Double.parseDouble(etMinOrder.getText().toString().trim());&#10;                            String startDateStr = btnStartDate.getText().toString();&#10;                            String endDateStr = btnEndDate.getText().toString();&#10;&#10;                            Integer usageLimit = TextUtils.isEmpty(etUsageLimit.getText().toString().trim()) ? null :&#10;                                Integer.parseInt(etUsageLimit.getText().toString().trim());&#10;                            Integer perUserLimit = TextUtils.isEmpty(etPerUserLimit.getText().toString().trim()) ? null :&#10;                                Integer.parseInt(etPerUserLimit.getText().toString().trim());&#10;                            String description = etDescription.getText().toString().trim();&#10;&#10;                            if (existingVoucher == null) {&#10;                                createVoucher(code, type, value, minOrderValue, startDateStr, endDateStr,&#10;                                    usageLimit, perUserLimit, description);&#10;                            } else {&#10;                                updateVoucher(existingVoucher.id, code, type, value, minOrderValue,&#10;                                    startDateStr, endDateStr, usageLimit, perUserLimit, description);&#10;                            }&#10;                        } catch (NumberFormatException e) {&#10;                            Toast.makeText(this, &quot;Vui lòng nhập số hợp lệ cho các trường số&quot;, Toast.LENGTH_SHORT).show();&#10;                        }&#10;                    }&#10;                })&#10;                .setNegativeButton(&quot;Hủy&quot;, null);&#10;&#10;        builder.show();&#10;    }&#10;&#10;    private boolean validateVoucherForm(TextInputLayout tilCode, TextInputLayout tilValue, TextInputLayout tilMinOrder) {&#10;        boolean isValid = true;&#10;&#10;        // Validate code&#10;        if (TextUtils.isEmpty(tilCode.getEditText().getText())) {&#10;            tilCode.setError(&quot;Vui lòng nhập mã voucher&quot;);&#10;            isValid = false;&#10;        } else {&#10;            tilCode.setError(null);&#10;        }&#10;&#10;        // Validate value&#10;        if (TextUtils.isEmpty(tilValue.getEditText().getText())) {&#10;            tilValue.setError(&quot;Vui lòng nhập giá trị giảm&quot;);&#10;            isValid = false;&#10;        } else {&#10;            try {&#10;                double value = Double.parseDouble(tilValue.getEditText().getText().toString().trim());&#10;                if (value &lt;= 0) {&#10;                    tilValue.setError(&quot;Giá trị giảm phải lớn hơn 0&quot;);&#10;                    isValid = false;&#10;                } else if (value &gt; 100) {&#10;                    // Nếu là percentage, không được quá 100%&#10;                    tilValue.setError(&quot;Giá trị giảm không được quá 100 (đối với %)&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    tilValue.setError(null);&#10;                }&#10;            } catch (NumberFormatException e) {&#10;                tilValue.setError(&quot;Vui lòng nhập số hợp lệ&quot;);&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Validate min order value&#10;        if (TextUtils.isEmpty(tilMinOrder.getEditText().getText())) {&#10;            tilMinOrder.setError(&quot;Vui lòng nhập giá trị đơn hàng tối thiểu&quot;);&#10;            isValid = false;&#10;        } else {&#10;            try {&#10;                double minOrderValue = Double.parseDouble(tilMinOrder.getEditText().getText().toString().trim());&#10;                if (minOrderValue &lt; 0) {&#10;                    tilMinOrder.setError(&quot;Giá trị đơn hàng tối thiểu không được âm&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    tilMinOrder.setError(null);&#10;                }&#10;            } catch (NumberFormatException e) {&#10;                tilMinOrder.setError(&quot;Vui lòng nhập số hợp lệ&quot;);&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        return isValid;&#10;    }&#10;&#10;    private boolean validateVoucherFormWithType(TextInputLayout tilCode, TextInputLayout tilValue, TextInputLayout tilMinOrder, Spinner spinnerType) {&#10;        boolean isValid = true;&#10;&#10;        // Validate code&#10;        if (TextUtils.isEmpty(tilCode.getEditText().getText())) {&#10;            tilCode.setError(&quot;Vui lòng nhập mã voucher&quot;);&#10;            isValid = false;&#10;        } else {&#10;            String code = tilCode.getEditText().getText().toString().trim();&#10;            tilCode.setError(null);&#10;        }&#10;&#10;        // Get selected voucher type first&#10;        int selectedPosition = spinnerType.getSelectedItemPosition();&#10;        String[] types = {&quot;percent&quot;, &quot;amount&quot;};&#10;        String selectedType = selectedPosition &gt;= 0 &amp;&amp; selectedPosition &lt; types.length ? types[selectedPosition] : null;&#10;&#10;        // Validate value - DIFFERENT LOGIC FOR PERCENT vs AMOUNT&#10;        if (TextUtils.isEmpty(tilValue.getEditText().getText())) {&#10;            tilValue.setError(&quot;Vui lòng nhập giá trị giảm&quot;);&#10;            isValid = false;&#10;        } else {&#10;            try {&#10;                String valueStr = tilValue.getEditText().getText().toString().trim();&#10;                double value = Double.parseDouble(valueStr);&#10;&#10;                if (value &lt;= 0) {&#10;                    tilValue.setError(&quot;Giá trị giảm phải lớn hơn 0&quot;);&#10;                    isValid = false;&#10;                } else if (&quot;percent&quot;.equals(selectedType) &amp;&amp; value &gt; 100) {&#10;                    tilValue.setError(&quot;Giá trị phần trăm không được quá 100%&quot;);&#10;                    isValid = false;&#10;                } else if (&quot;amount&quot;.equals(selectedType) &amp;&amp; value &gt; 10000000) {&#10;                    tilValue.setError(&quot;Giá trị giảm không được quá 10,000,000&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    tilValue.setError(null);&#10;                }&#10;            } catch (NumberFormatException e) {&#10;                tilValue.setError(&quot;Vui lòng nhập số hợp lệ&quot;);&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Validate min order value&#10;        if (TextUtils.isEmpty(tilMinOrder.getEditText().getText())) {&#10;            tilMinOrder.setError(&quot;Vui lòng nhập giá trị đơn hàng tối thiểu&quot;);&#10;            isValid = false;&#10;        } else {&#10;            try {&#10;                String minOrderStr = tilMinOrder.getEditText().getText().toString().trim();&#10;                double minOrderValue = Double.parseDouble(minOrderStr);&#10;&#10;                if (minOrderValue &lt; 0) {&#10;                    tilMinOrder.setError(&quot;Giá trị đơn hàng tối thiểu không được âm&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    tilMinOrder.setError(null);&#10;                }&#10;            } catch (NumberFormatException e) {&#10;                tilMinOrder.setError(&quot;Vui lòng nhập số hợp lệ&quot;);&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Validate type selection&#10;        if (selectedPosition == AdapterView.INVALID_POSITION || selectedPosition &lt; 0) {&#10;            Toast.makeText(this, &quot;Vui lòng chọn loại voucher&quot;, Toast.LENGTH_SHORT).show();&#10;            isValid = false;&#10;        }&#10;&#10;        return isValid;&#10;    }&#10;&#10;    private void createVoucher(String code, String type, double value, double minOrderValue,&#10;                              String startDate, String endDate, Integer usageLimit,&#10;                              Integer perUserLimit, String description) {&#10;&#10;        // Handle null values - server expects per_user_limit minimum = 1&#10;        Integer finalUsageLimit = usageLimit != null &amp;&amp; usageLimit &gt; 0 ? usageLimit : null;&#10;        Integer finalPerUserLimit = perUserLimit != null &amp;&amp; perUserLimit &gt; 0 ? perUserLimit : 1;&#10;&#10;        // Handle empty description - set to empty string instead of null&#10;        String finalDescription = description != null &amp;&amp; !description.trim().isEmpty() ? description : &quot;&quot;;&#10;&#10;        Call&lt;BaseResp&gt; call = apiService.createVoucher(code, type, value, minOrderValue, startDate, endDate,&#10;                finalUsageLimit, finalPerUserLimit, finalDescription);&#10;&#10;        call.enqueue(new Callback&lt;BaseResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;BaseResp&gt; call, @NonNull Response&lt;BaseResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    BaseResp responseBody = response.body();&#10;&#10;                    if (responseBody.success) {&#10;                        Toast.makeText(VoucherManagementActivity.this, &quot;Tạo voucher thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                        loadVouchers();&#10;                    } else {&#10;                        String errorMessage = responseBody.message != null ? responseBody.message : &quot;Tạo voucher thất bại!&quot;;&#10;                        Toast.makeText(VoucherManagementActivity.this, errorMessage, Toast.LENGTH_LONG).show();&#10;                    }&#10;                } else {&#10;                    String errorMsg = &quot;Lỗi server (Code: &quot; + response.code() + &quot;)&quot;;&#10;                    Toast.makeText(VoucherManagementActivity.this, errorMsg, Toast.LENGTH_LONG).show();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;BaseResp&gt; call, @NonNull Throwable t) {&#10;                String errorMsg = &quot;Lỗi kết nối: &quot; + t.getMessage();&#10;                Toast.makeText(VoucherManagementActivity.this, errorMsg, Toast.LENGTH_LONG).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void updateVoucher(int id, String code, String type, double value, double minOrderValue,&#10;                              String startDate, String endDate, Integer usageLimit,&#10;                              Integer perUserLimit, String description) {&#10;&#10;        // Handle null values - server expects per_user_limit minimum = 1&#10;        Integer finalUsageLimit = usageLimit != null &amp;&amp; usageLimit &gt; 0 ? usageLimit : null;&#10;        Integer finalPerUserLimit = perUserLimit != null &amp;&amp; perUserLimit &gt; 0 ? perUserLimit : 1;&#10;&#10;        // Handle empty description - set to empty string instead of null&#10;        String finalDescription = description != null &amp;&amp; !description.trim().isEmpty() ? description : &quot;&quot;;&#10;&#10;        // Validate required fields before API call&#10;        if (code == null || code.trim().isEmpty()) {&#10;            Toast.makeText(this, &quot;Mã voucher không được để trống!&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        if (type == null || type.trim().isEmpty()) {&#10;            Toast.makeText(this, &quot;Loại voucher không được để trống!&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        Call&lt;BaseResp&gt; call = apiService.updateVoucher(id, code, type, value, minOrderValue, startDate, endDate,&#10;                finalUsageLimit, finalPerUserLimit, finalDescription);&#10;&#10;        call.enqueue(new Callback&lt;BaseResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;BaseResp&gt; call, @NonNull Response&lt;BaseResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    BaseResp responseBody = response.body();&#10;&#10;                    if (responseBody.success) {&#10;                        Toast.makeText(VoucherManagementActivity.this, &quot;Cập nhật voucher thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                        loadVouchers();&#10;                    } else {&#10;                        String errorMessage = responseBody.message != null ? responseBody.message : &quot;Cập nhật voucher thất bại!&quot;;&#10;                        Toast.makeText(VoucherManagementActivity.this, errorMessage, Toast.LENGTH_LONG).show();&#10;                    }&#10;                } else {&#10;                    String errorMsg = &quot;Lỗi server (Code: &quot; + response.code() + &quot;)&quot;;&#10;                    Toast.makeText(VoucherManagementActivity.this, errorMsg, Toast.LENGTH_LONG).show();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;BaseResp&gt; call, @NonNull Throwable t) {&#10;&#10;                String errorMsg = &quot;Lỗi kết nối: &quot; + t.getMessage();&#10;                Toast.makeText(VoucherManagementActivity.this, errorMsg, Toast.LENGTH_LONG).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showDeleteConfirmDialog(Voucher voucher) {&#10;        new MaterialAlertDialogBuilder(this)&#10;                .setTitle(&quot;Xác nhận xóa&quot;)&#10;                .setMessage(&quot;Bạn có chắc chắn muốn xóa voucher \&quot;&quot; + voucher.code + &quot;\&quot;?&quot;)&#10;                .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; deleteVoucher(voucher))&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void deleteVoucher(Voucher voucher) {&#10;        apiService.deleteVoucher(voucher.id).enqueue(new Callback&lt;BaseResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;BaseResp&gt; call, @NonNull Response&lt;BaseResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null &amp;&amp; response.body().success) {&#10;                    Toast.makeText(VoucherManagementActivity.this, &quot;Xóa voucher thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                    loadVouchers();&#10;                } else {&#10;                    Toast.makeText(VoucherManagementActivity.this, &quot;Xóa voucher thất bại!&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;BaseResp&gt; call, @NonNull Throwable t) {&#10;                Toast.makeText(VoucherManagementActivity.this, &quot;Lỗi kết nối!&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showDuplicateVoucherDialog(Voucher voucher) {&#10;        View dialogView = getLayoutInflater().inflate(R.layout.dialog_voucher_form, null);&#10;&#10;        TextInputLayout tilCode = dialogView.findViewById(R.id.tilVoucherCode);&#10;        TextInputLayout tilValue = dialogView.findViewById(R.id.tilVoucherValue);&#10;        TextInputLayout tilMinOrder = dialogView.findViewById(R.id.tilMinOrderValue);&#10;        TextInputLayout tilUsageLimit = dialogView.findViewById(R.id.tilUsageLimit);&#10;        TextInputLayout tilPerUserLimit = dialogView.findViewById(R.id.tilPerUserLimit);&#10;        TextInputLayout tilDescription = dialogView.findViewById(R.id.tilDescription);&#10;&#10;        EditText etCode = tilCode.getEditText();&#10;        EditText etValue = tilValue.getEditText();&#10;        EditText etMinOrder = tilMinOrder.getEditText();&#10;        EditText etUsageLimit = tilUsageLimit.getEditText();&#10;        EditText etPerUserLimit = tilPerUserLimit.getEditText();&#10;        EditText etDescription = tilDescription.getEditText();&#10;&#10;        Spinner spinnerType = dialogView.findViewById(R.id.spinnerVoucherType);&#10;        MaterialButton btnStartDate = dialogView.findViewById(R.id.btnStartDate);&#10;        MaterialButton btnEndDate = dialogView.findViewById(R.id.btnEndDate);&#10;&#10;        // Setup spinner&#10;        String[] types = {&quot;percent&quot;, &quot;amount&quot;};  // Sửa để khớp với server&#10;        String[] typeLabels = {&quot;Giảm theo %&quot;, &quot;Giảm cố định&quot;};&#10;        ArrayAdapter&lt;String&gt; typeAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, typeLabels);&#10;        typeAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerType.setAdapter(typeAdapter);&#10;&#10;        // Date pickers&#10;        Calendar startDate = Calendar.getInstance();&#10;        Calendar endDate = Calendar.getInstance();&#10;        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault());&#10;&#10;        btnStartDate.setOnClickListener(v -&gt; {&#10;            DatePickerDialog picker = new DatePickerDialog(this,&#10;                (view, year, month, dayOfMonth) -&gt; {&#10;                    startDate.set(year, month, dayOfMonth);&#10;                    btnStartDate.setText(dateFormat.format(startDate.getTime()));&#10;                },&#10;                startDate.get(Calendar.YEAR),&#10;                startDate.get(Calendar.MONTH),&#10;                startDate.get(Calendar.DAY_OF_MONTH)&#10;            );&#10;            picker.show();&#10;        });&#10;&#10;        btnEndDate.setOnClickListener(v -&gt; {&#10;            DatePickerDialog picker = new DatePickerDialog(this,&#10;                (view, year, month, dayOfMonth) -&gt; {&#10;                    endDate.set(year, month, dayOfMonth);&#10;                    btnEndDate.setText(dateFormat.format(endDate.getTime()));&#10;                },&#10;                endDate.get(Calendar.YEAR),&#10;                endDate.get(Calendar.MONTH),&#10;                endDate.get(Calendar.DAY_OF_MONTH)&#10;            );&#10;            picker.show();&#10;        });&#10;&#10;        // Fill existing data for duplication&#10;        if (voucher != null) {&#10;            etCode.setText(voucher.code);&#10;            etValue.setText(String.valueOf(voucher.discountValue)); // Sử dụng discountValue&#10;            etMinOrder.setText(String.valueOf(voucher.minOrderAmount)); // Sử dụng minOrderAmount&#10;            if (voucher.usageLimit &gt; 0) { // usageLimit là int, không phải Integer&#10;                etUsageLimit.setText(String.valueOf(voucher.usageLimit));&#10;            }&#10;            // perUserLimit không tồn tại trong model - bỏ qua hoặc để trống&#10;            etDescription.setText(voucher.description != null ? voucher.description : &quot;&quot;);&#10;&#10;            // Set spinner selection&#10;            spinnerType.setSelection(&quot;percentage&quot;.equals(voucher.discountType) ? 0 : 1);&#10;&#10;            btnStartDate.setText(voucher.startDate);&#10;            btnEndDate.setText(voucher.endDate);&#10;        } else {&#10;            btnStartDate.setText(dateFormat.format(startDate.getTime()));&#10;            btnEndDate.setText(dateFormat.format(endDate.getTime()));&#10;        }&#10;&#10;        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(this)&#10;                .setTitle(&quot;Nhân bản Voucher&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(&quot;Lưu&quot;, (dialog, which) -&gt; {&#10;                    if (validateVoucherForm(tilCode, tilValue, tilMinOrder)) {&#10;                        String code = etCode.getText().toString().trim();&#10;                        String type = types[spinnerType.getSelectedItemPosition()];&#10;                        double value = Double.parseDouble(etValue.getText().toString().trim());&#10;                        double minOrderValue = Double.parseDouble(etMinOrder.getText().toString().trim());&#10;                        String startDateStr = btnStartDate.getText().toString();&#10;                        String endDateStr = btnEndDate.getText().toString();&#10;&#10;                        Integer usageLimit = TextUtils.isEmpty(etUsageLimit.getText()) ? null :&#10;                            Integer.parseInt(etUsageLimit.getText().toString().trim());&#10;                        Integer perUserLimit = TextUtils.isEmpty(etPerUserLimit.getText()) ? null :&#10;                            Integer.parseInt(etPerUserLimit.getText().toString().trim());&#10;                        String description = etDescription.getText().toString().trim();&#10;&#10;                        // Handle null values - set to 0 instead of null for optional integer fields&#10;                        Integer finalUsageLimit = usageLimit != null ? usageLimit : 0;&#10;                        Integer finalPerUserLimit = perUserLimit != null ? perUserLimit : 0;&#10;&#10;                        // Handle empty description - set to empty string instead of null&#10;                        String finalDescription = description != null &amp;&amp; !description.trim().isEmpty() ? description : &quot;&quot;;&#10;&#10;                        // TODO: Get actual user session data instead of hard-coded values&#10;                        Integer createdBy = 1; // Should get from user session&#10;                        Integer storeId = 1;   // Should get from user session&#10;&#10;                        // Create duplicated voucher with new ID&#10;                        apiService.createVoucher(code, type, value, minOrderValue, startDateStr, endDateStr,&#10;                                finalUsageLimit, finalPerUserLimit, finalDescription).enqueue(new Callback&lt;BaseResp&gt;() {&#10;                            @Override&#10;                            public void onResponse(@NonNull Call&lt;BaseResp&gt; call, @NonNull Response&lt;BaseResp&gt; response) {&#10;                                if (response.isSuccessful() &amp;&amp; response.body() != null &amp;&amp; response.body().success) {&#10;                                    Toast.makeText(VoucherManagementActivity.this, &quot;Nhân bản voucher thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                                    loadVouchers();&#10;                                } else {&#10;                                    String errorMessage = response.body().message != null ? response.body().message : &quot;Nhân bản voucher thất bại!&quot;;&#10;                                    Toast.makeText(VoucherManagementActivity.this, errorMessage, Toast.LENGTH_LONG).show();&#10;                                }&#10;                            }&#10;&#10;                            @Override&#10;                            public void onFailure(@NonNull Call&lt;BaseResp&gt; call, @NonNull Throwable t) {&#10;                                Toast.makeText(VoucherManagementActivity.this, &quot;Lỗi kết nối!&quot;, Toast.LENGTH_SHORT).show();&#10;                            }&#10;                        });&#10;                    }&#10;                })&#10;                .setNegativeButton(&quot;Hủy&quot;, null);&#10;&#10;        builder.show();&#10;    }&#10;&#10;    private void showVoucherDetailsDialog(Voucher voucher) {&#10;        // Sử dụng đúng field names từ Voucher model&#10;        StringBuilder detailsText = new StringBuilder();&#10;        detailsText.append(&quot;Mã voucher: &quot;).append(voucher.code).append(&quot;\n&quot;)&#10;                   .append(&quot;Loại: &quot;).append(&quot;percentage&quot;.equals(voucher.discountType) ? &quot;Giảm theo %&quot; : &quot;Giảm cố định&quot;).append(&quot;\n&quot;)&#10;                   .append(&quot;Giá trị: &quot;).append(voucher.discountValue).append(&quot;\n&quot;)&#10;                   .append(&quot;Giá trị đơn hàng tối thiểu: &quot;).append(voucher.minOrderAmount).append(&quot;\n&quot;)&#10;                   .append(&quot;Ngày hết hạn: &quot;).append(voucher.expiryDate != null ? voucher.expiryDate : &quot;Không xác định&quot;).append(&quot;\n&quot;)&#10;                   .append(&quot;Giới hạn sử dụng: &quot;).append(voucher.usageLimit &gt; 0 ? voucher.usageLimit : &quot;Không giới hạn&quot;).append(&quot;\n&quot;)&#10;                   .append(&quot;Đã sử dụng: &quot;).append(voucher.usedCount).append(&quot;\n&quot;)&#10;                   .append(&quot;Trạng thái: &quot;).append(voucher.isActive ? &quot;Đang hoạt động&quot; : &quot;Ngừng hoạt động&quot;).append(&quot;\n&quot;)&#10;                   .append(&quot;Mô tả: &quot;).append(voucher.description != null ? voucher.description : &quot;Không có&quot;);&#10;&#10;        new MaterialAlertDialogBuilder(this)&#10;                .setTitle(&quot;Chi tiết Voucher&quot;)&#10;                .setMessage(detailsText.toString())&#10;                .setPositiveButton(&quot;Đóng&quot;, null)&#10;                .show();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.skymall.ui.seller;&#10;&#10;import android.app.DatePickerDialog;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.View;&#10;import android.widget.AdapterView;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.EditText;&#10;import android.widget.Spinner;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.Voucher;&#10;import com.example.skymall.data.remote.ApiClient;&#10;import com.example.skymall.data.remote.ApiService;&#10;import com.example.skymall.data.remote.DTO.BaseResp;&#10;import com.example.skymall.data.remote.DTO.VoucherListResp;&#10;import com.google.android.material.appbar.MaterialToolbar;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.google.android.material.card.MaterialCardView;&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.google.android.material.textfield.TextInputLayout;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Calendar;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class VoucherManagementActivity extends AppCompatActivity {&#10;&#10;    private RecyclerView recyclerView;&#10;    private VoucherManagementAdapter adapter;&#10;    private FloatingActionButton fabAdd;&#10;    private ApiService apiService;&#10;    private List&lt;Voucher&gt; voucherList = new ArrayList&lt;&gt;();&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_voucher_management);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        setupApiService();&#10;        loadVouchers();&#10;    }&#10;&#10;    private void initViews() {&#10;        recyclerView = findViewById(R.id.recyclerViewVouchers);&#10;        fabAdd = findViewById(R.id.fabAddVoucher);&#10;&#10;        fabAdd.setOnClickListener(v -&gt; showCreateVoucherDialog());&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        MaterialToolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setTitle(&quot;Quản lý Voucher&quot;);&#10;        }&#10;        toolbar.setNavigationOnClickListener(v -&gt; finish());&#10;&#10;        // Add stats menu item&#10;        toolbar.setOnMenuItemClickListener(item -&gt; {&#10;            if (item.getItemId() == R.id.menu_stats) {&#10;                startActivity(new Intent(this, VoucherStatsActivity.class));&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;        toolbar.inflateMenu(R.menu.menu_voucher_management);&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        adapter = new VoucherManagementAdapter(voucherList, new VoucherManagementAdapter.OnVoucherActionListener() {&#10;            @Override&#10;            public void onEdit(Voucher voucher) {&#10;                showEditVoucherDialog(voucher);&#10;            }&#10;&#10;            @Override&#10;            public void onDelete(Voucher voucher) {&#10;                showDeleteConfirmDialog(voucher);&#10;            }&#10;&#10;            @Override&#10;            public void onToggleStatus(Voucher voucher) {&#10;                // Toggle voucher active status&#10;                voucher.isActive = !voucher.isActive;&#10;                // Update via API would go here&#10;            }&#10;&#10;            @Override&#10;            public void onDuplicate(Voucher voucher) {&#10;                showDuplicateVoucherDialog(voucher);&#10;            }&#10;&#10;            @Override&#10;            public void onViewDetails(Voucher voucher) {&#10;                showVoucherDetailsDialog(voucher);&#10;            }&#10;        });&#10;&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(this));&#10;        recyclerView.setAdapter(adapter);&#10;    }&#10;&#10;    private void setupApiService() {&#10;        apiService = ApiClient.create(this);&#10;    }&#10;&#10;    private void loadVouchers() {&#10;        apiService.getVouchers(1, 50).enqueue(new Callback&lt;VoucherListResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;VoucherListResp&gt; call, @NonNull Response&lt;VoucherListResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    VoucherListResp responseBody = response.body();&#10;&#10;                    if (responseBody.success) {&#10;                        voucherList.clear();&#10;                        List&lt;Voucher&gt; serverVouchers = responseBody.vouchers != null ? responseBody.vouchers : responseBody.data;&#10;&#10;                        if (serverVouchers != null) {&#10;                            voucherList.addAll(serverVouchers);&#10;                        }&#10;                        adapter.notifyDataSetChanged();&#10;                        return;&#10;                    }&#10;                }&#10;&#10;                tryStoreVouchersEndpoint();&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;VoucherListResp&gt; call, @NonNull Throwable t) {&#10;                tryStoreVouchersEndpoint();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void tryStoreVouchersEndpoint() {&#10;        apiService.getStoreVouchers(1, 50).enqueue(new Callback&lt;VoucherListResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;VoucherListResp&gt; call, @NonNull Response&lt;VoucherListResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    VoucherListResp responseBody = response.body();&#10;&#10;                    if (responseBody.success) {&#10;                        voucherList.clear();&#10;                        if (responseBody.vouchers != null) {&#10;                            voucherList.addAll(responseBody.vouchers);&#10;                        }&#10;                        adapter.notifyDataSetChanged();&#10;                    } else {&#10;                        showEmptyState(&quot;Không có voucher nào: &quot; + (responseBody.message != null ? responseBody.message : &quot;Lỗi không xác định&quot;));&#10;                    }&#10;                } else {&#10;                    String errorMsg = &quot;Lỗi server: &quot; + response.code();&#10;                    if (response.message() != null) {&#10;                        errorMsg += &quot; - &quot; + response.message();&#10;                    }&#10;                    showEmptyState(errorMsg);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;VoucherListResp&gt; call, @NonNull Throwable t) {&#10;                showEmptyState(&quot;Lỗi kết nối: &quot; + t.getMessage());&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showEmptyState(String message) {&#10;        voucherList.clear();&#10;        adapter.notifyDataSetChanged();&#10;        Toast.makeText(VoucherManagementActivity.this, message, Toast.LENGTH_LONG).show();&#10;    }&#10;&#10;    private void showCreateVoucherDialog() {&#10;        showVoucherDialog(null);&#10;    }&#10;&#10;    private void showEditVoucherDialog(Voucher voucher) {&#10;        showVoucherDialog(voucher);&#10;    }&#10;&#10;    private void showVoucherDialog(Voucher existingVoucher) {&#10;        View dialogView = getLayoutInflater().inflate(R.layout.dialog_voucher_form, null);&#10;&#10;        TextInputLayout tilCode = dialogView.findViewById(R.id.tilVoucherCode);&#10;        TextInputLayout tilValue = dialogView.findViewById(R.id.tilVoucherValue);&#10;        TextInputLayout tilMinOrder = dialogView.findViewById(R.id.tilMinOrderValue);&#10;        TextInputLayout tilUsageLimit = dialogView.findViewById(R.id.tilUsageLimit);&#10;        TextInputLayout tilPerUserLimit = dialogView.findViewById(R.id.tilPerUserLimit);&#10;        TextInputLayout tilDescription = dialogView.findViewById(R.id.tilDescription);&#10;&#10;        EditText etCode = tilCode.getEditText();&#10;        EditText etValue = tilValue.getEditText();&#10;        EditText etMinOrder = tilMinOrder.getEditText();&#10;        EditText etUsageLimit = tilUsageLimit.getEditText();&#10;        EditText etPerUserLimit = tilPerUserLimit.getEditText();&#10;        EditText etDescription = tilDescription.getEditText();&#10;&#10;        // Null check for EditText objects&#10;        if (etCode == null || etValue == null || etMinOrder == null ||&#10;            etUsageLimit == null || etPerUserLimit == null || etDescription == null) {&#10;            Toast.makeText(this, &quot;Lỗi tải form voucher&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        Spinner spinnerType = dialogView.findViewById(R.id.spinnerVoucherType);&#10;        MaterialButton btnStartDate = dialogView.findViewById(R.id.btnStartDate);&#10;        MaterialButton btnEndDate = dialogView.findViewById(R.id.btnEndDate);&#10;&#10;        // Setup spinner&#10;        String[] types = {&quot;percent&quot;, &quot;amount&quot;};&#10;        String[] typeLabels = {&quot;Giảm theo %&quot;, &quot;Giảm cố định&quot;};&#10;        ArrayAdapter&lt;String&gt; typeAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, typeLabels);&#10;        typeAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerType.setAdapter(typeAdapter);&#10;&#10;        // Date pickers&#10;        Calendar startDate = Calendar.getInstance();&#10;        Calendar endDate = Calendar.getInstance();&#10;        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault());&#10;&#10;        btnStartDate.setOnClickListener(v -&gt; {&#10;            DatePickerDialog picker = new DatePickerDialog(this,&#10;                (view, year, month, dayOfMonth) -&gt; {&#10;                    startDate.set(year, month, dayOfMonth);&#10;                    btnStartDate.setText(dateFormat.format(startDate.getTime()));&#10;                },&#10;                startDate.get(Calendar.YEAR),&#10;                startDate.get(Calendar.MONTH),&#10;                startDate.get(Calendar.DAY_OF_MONTH)&#10;            );&#10;            picker.show();&#10;        });&#10;&#10;        btnEndDate.setOnClickListener(v -&gt; {&#10;            DatePickerDialog picker = new DatePickerDialog(this,&#10;                (view, year, month, dayOfMonth) -&gt; {&#10;                    endDate.set(year, month, dayOfMonth);&#10;                    btnEndDate.setText(dateFormat.format(endDate.getTime()));&#10;                },&#10;                endDate.get(Calendar.YEAR),&#10;                endDate.get(Calendar.MONTH),&#10;                endDate.get(Calendar.DAY_OF_MONTH)&#10;            );&#10;            picker.show();&#10;        });&#10;&#10;        // Fill existing data if editing&#10;        if (existingVoucher != null) {&#10;            if (existingVoucher.code != null) {&#10;                etCode.setText(existingVoucher.code);&#10;            }&#10;            etValue.setText(String.valueOf(existingVoucher.discountValue)); // Sử dụng discountValue&#10;            etMinOrder.setText(String.valueOf(existingVoucher.minOrderAmount)); // Sử dụng minOrderAmount&#10;            if (existingVoucher.usageLimit &gt; 0) { // usageLimit là int, không phải Integer&#10;                etUsageLimit.setText(String.valueOf(existingVoucher.usageLimit));&#10;            }&#10;            // perUserLimit không tồn tại trong model - bỏ qua hoặc để trống&#10;            etDescription.setText(existingVoucher.description != null ? existingVoucher.description : &quot;&quot;);&#10;&#10;            // Set spinner selection - sử dụng discountType&#10;            if (existingVoucher.discountType != null) {&#10;                spinnerType.setSelection(&quot;percentage&quot;.equals(existingVoucher.discountType) ? 0 : 1);&#10;            }&#10;&#10;            // Set dates - chỉ có expiryDate, không có startDate/endDate&#10;            if (existingVoucher.expiryDate != null) {&#10;                btnEndDate.setText(existingVoucher.expiryDate);&#10;                // Parse và update Calendar object&#10;                try {&#10;                    java.util.Date parsedEndDate = dateFormat.parse(existingVoucher.expiryDate);&#10;                    if (parsedEndDate != null) {&#10;                        endDate.setTime(parsedEndDate);&#10;                    }&#10;                } catch (Exception e) {&#10;                    // If parsing fails, keep default date&#10;                }&#10;            }&#10;        } else {&#10;            btnStartDate.setText(dateFormat.format(startDate.getTime()));&#10;            btnEndDate.setText(dateFormat.format(endDate.getTime()));&#10;        }&#10;&#10;        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(this)&#10;                .setTitle(existingVoucher == null ? &quot;Tạo Voucher Mới&quot; : &quot;Chỉnh sửa Voucher&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(&quot;Lưu&quot;, (dialog, which) -&gt; {&#10;                    if (validateVoucherFormWithType(tilCode, tilValue, tilMinOrder, spinnerType)) {&#10;                        String code = etCode.getText().toString().trim();&#10;                        String type = types[spinnerType.getSelectedItemPosition()];&#10;&#10;                        try {&#10;                            double value = Double.parseDouble(etValue.getText().toString().trim());&#10;                            double minOrderValue = Double.parseDouble(etMinOrder.getText().toString().trim());&#10;                            String startDateStr = btnStartDate.getText().toString();&#10;                            String endDateStr = btnEndDate.getText().toString();&#10;&#10;                            Integer usageLimit = TextUtils.isEmpty(etUsageLimit.getText().toString().trim()) ? null :&#10;                                Integer.parseInt(etUsageLimit.getText().toString().trim());&#10;                            Integer perUserLimit = TextUtils.isEmpty(etPerUserLimit.getText().toString().trim()) ? null :&#10;                                Integer.parseInt(etPerUserLimit.getText().toString().trim());&#10;                            String description = etDescription.getText().toString().trim();&#10;&#10;                            if (existingVoucher == null) {&#10;                                createVoucher(code, type, value, minOrderValue, startDateStr, endDateStr,&#10;                                    usageLimit, perUserLimit, description);&#10;                            } else {&#10;                                updateVoucher(existingVoucher.id, code, type, value, minOrderValue,&#10;                                    startDateStr, endDateStr, usageLimit, perUserLimit, description);&#10;                            }&#10;                        } catch (NumberFormatException e) {&#10;                            Toast.makeText(this, &quot;Vui lòng nhập số hợp lệ cho các trường số&quot;, Toast.LENGTH_SHORT).show();&#10;                        }&#10;                    }&#10;                })&#10;                .setNegativeButton(&quot;Hủy&quot;, null);&#10;&#10;        builder.show();&#10;    }&#10;&#10;    private boolean validateVoucherForm(TextInputLayout tilCode, TextInputLayout tilValue, TextInputLayout tilMinOrder) {&#10;        boolean isValid = true;&#10;&#10;        // Validate code&#10;        if (TextUtils.isEmpty(tilCode.getEditText().getText())) {&#10;            tilCode.setError(&quot;Vui lòng nhập mã voucher&quot;);&#10;            isValid = false;&#10;        } else {&#10;            tilCode.setError(null);&#10;        }&#10;&#10;        // Validate value&#10;        if (TextUtils.isEmpty(tilValue.getEditText().getText())) {&#10;            tilValue.setError(&quot;Vui lòng nhập giá trị giảm&quot;);&#10;            isValid = false;&#10;        } else {&#10;            try {&#10;                double value = Double.parseDouble(tilValue.getEditText().getText().toString().trim());&#10;                if (value &lt;= 0) {&#10;                    tilValue.setError(&quot;Giá trị giảm phải lớn hơn 0&quot;);&#10;                    isValid = false;&#10;                } else if (value &gt; 100) {&#10;                    // Nếu là percentage, không được quá 100%&#10;                    tilValue.setError(&quot;Giá trị giảm không được quá 100 (đối với %)&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    tilValue.setError(null);&#10;                }&#10;            } catch (NumberFormatException e) {&#10;                tilValue.setError(&quot;Vui lòng nhập số hợp lệ&quot;);&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Validate min order value&#10;        if (TextUtils.isEmpty(tilMinOrder.getEditText().getText())) {&#10;            tilMinOrder.setError(&quot;Vui lòng nhập giá trị đơn hàng tối thiểu&quot;);&#10;            isValid = false;&#10;        } else {&#10;            try {&#10;                double minOrderValue = Double.parseDouble(tilMinOrder.getEditText().getText().toString().trim());&#10;                if (minOrderValue &lt; 0) {&#10;                    tilMinOrder.setError(&quot;Giá trị đơn hàng tối thiểu không được âm&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    tilMinOrder.setError(null);&#10;                }&#10;            } catch (NumberFormatException e) {&#10;                tilMinOrder.setError(&quot;Vui lòng nhập số hợp lệ&quot;);&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        return isValid;&#10;    }&#10;&#10;    private boolean validateVoucherFormWithType(TextInputLayout tilCode, TextInputLayout tilValue, TextInputLayout tilMinOrder, Spinner spinnerType) {&#10;        boolean isValid = true;&#10;&#10;        // Validate code&#10;        if (TextUtils.isEmpty(tilCode.getEditText().getText())) {&#10;            tilCode.setError(&quot;Vui lòng nhập mã voucher&quot;);&#10;            isValid = false;&#10;        } else {&#10;            String code = tilCode.getEditText().getText().toString().trim();&#10;            tilCode.setError(null);&#10;        }&#10;&#10;        // Get selected voucher type first&#10;        int selectedPosition = spinnerType.getSelectedItemPosition();&#10;        String[] types = {&quot;percent&quot;, &quot;amount&quot;};&#10;        String selectedType = selectedPosition &gt;= 0 &amp;&amp; selectedPosition &lt; types.length ? types[selectedPosition] : null;&#10;&#10;        // Validate value - DIFFERENT LOGIC FOR PERCENT vs AMOUNT&#10;        if (TextUtils.isEmpty(tilValue.getEditText().getText())) {&#10;            tilValue.setError(&quot;Vui lòng nhập giá trị giảm&quot;);&#10;            isValid = false;&#10;        } else {&#10;            try {&#10;                String valueStr = tilValue.getEditText().getText().toString().trim();&#10;                double value = Double.parseDouble(valueStr);&#10;&#10;                if (value &lt;= 0) {&#10;                    tilValue.setError(&quot;Giá trị giảm phải lớn hơn 0&quot;);&#10;                    isValid = false;&#10;                } else if (&quot;percent&quot;.equals(selectedType) &amp;&amp; value &gt; 100) {&#10;                    tilValue.setError(&quot;Giá trị phần trăm không được quá 100%&quot;);&#10;                    isValid = false;&#10;                } else if (&quot;amount&quot;.equals(selectedType) &amp;&amp; value &gt; 10000000) {&#10;                    tilValue.setError(&quot;Giá trị giảm không được quá 10,000,000&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    tilValue.setError(null);&#10;                }&#10;            } catch (NumberFormatException e) {&#10;                tilValue.setError(&quot;Vui lòng nhập số hợp lệ&quot;);&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Validate min order value&#10;        if (TextUtils.isEmpty(tilMinOrder.getEditText().getText())) {&#10;            tilMinOrder.setError(&quot;Vui lòng nhập giá trị đơn hàng tối thiểu&quot;);&#10;            isValid = false;&#10;        } else {&#10;            try {&#10;                String minOrderStr = tilMinOrder.getEditText().getText().toString().trim();&#10;                double minOrderValue = Double.parseDouble(minOrderStr);&#10;&#10;                if (minOrderValue &lt; 0) {&#10;                    tilMinOrder.setError(&quot;Giá trị đơn hàng tối thiểu không được âm&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    tilMinOrder.setError(null);&#10;                }&#10;            } catch (NumberFormatException e) {&#10;                tilMinOrder.setError(&quot;Vui lòng nhập số hợp lệ&quot;);&#10;                isValid = false;&#10;            }&#10;        }&#10;&#10;        // Validate type selection&#10;        if (selectedPosition == AdapterView.INVALID_POSITION || selectedPosition &lt; 0) {&#10;            Toast.makeText(this, &quot;Vui lòng chọn loại voucher&quot;, Toast.LENGTH_SHORT).show();&#10;            isValid = false;&#10;        }&#10;&#10;        return isValid;&#10;    }&#10;&#10;    private void createVoucher(String code, String type, double value, double minOrderValue,&#10;                              String startDate, String endDate, Integer usageLimit,&#10;                              Integer perUserLimit, String description) {&#10;&#10;        // Handle null values - server expects per_user_limit minimum = 1&#10;        Integer finalUsageLimit = usageLimit != null &amp;&amp; usageLimit &gt; 0 ? usageLimit : null;&#10;        Integer finalPerUserLimit = perUserLimit != null &amp;&amp; perUserLimit &gt; 0 ? perUserLimit : 1;&#10;&#10;        // Handle empty description - set to empty string instead of null&#10;        String finalDescription = description != null &amp;&amp; !description.trim().isEmpty() ? description : &quot;&quot;;&#10;&#10;        Call&lt;BaseResp&gt; call = apiService.createVoucher(code, type, value, minOrderValue, startDate, endDate,&#10;                finalUsageLimit, finalPerUserLimit, finalDescription);&#10;&#10;        call.enqueue(new Callback&lt;BaseResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;BaseResp&gt; call, @NonNull Response&lt;BaseResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    BaseResp responseBody = response.body();&#10;&#10;                    if (responseBody.success) {&#10;                        Toast.makeText(VoucherManagementActivity.this, &quot;Tạo voucher thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                        loadVouchers();&#10;                    } else {&#10;                        String errorMessage = responseBody.message != null ? responseBody.message : &quot;Tạo voucher thất bại!&quot;;&#10;                        Toast.makeText(VoucherManagementActivity.this, errorMessage, Toast.LENGTH_LONG).show();&#10;                    }&#10;                } else {&#10;                    String errorMsg = &quot;Lỗi server (Code: &quot; + response.code() + &quot;)&quot;;&#10;                    Toast.makeText(VoucherManagementActivity.this, errorMsg, Toast.LENGTH_LONG).show();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;BaseResp&gt; call, @NonNull Throwable t) {&#10;                String errorMsg = &quot;Lỗi kết nối: &quot; + t.getMessage();&#10;                Toast.makeText(VoucherManagementActivity.this, errorMsg, Toast.LENGTH_LONG).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void updateVoucher(int id, String code, String type, double value, double minOrderValue,&#10;                              String startDate, String endDate, Integer usageLimit,&#10;                              Integer perUserLimit, String description) {&#10;&#10;        // Handle null values - server expects per_user_limit minimum = 1&#10;        Integer finalUsageLimit = usageLimit != null &amp;&amp; usageLimit &gt; 0 ? usageLimit : null;&#10;        Integer finalPerUserLimit = perUserLimit != null &amp;&amp; perUserLimit &gt; 0 ? perUserLimit : 1;&#10;&#10;        // Handle empty description - set to empty string instead of null&#10;        String finalDescription = description != null &amp;&amp; !description.trim().isEmpty() ? description : &quot;&quot;;&#10;&#10;        // Validate required fields before API call&#10;        if (code == null || code.trim().isEmpty()) {&#10;            Toast.makeText(this, &quot;Mã voucher không được để trống!&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        if (type == null || type.trim().isEmpty()) {&#10;            Toast.makeText(this, &quot;Loại voucher không được để trống!&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        Call&lt;BaseResp&gt; call = apiService.updateVoucher(id, code, type, value, minOrderValue, startDate, endDate,&#10;                finalUsageLimit, finalPerUserLimit, finalDescription);&#10;&#10;        call.enqueue(new Callback&lt;BaseResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;BaseResp&gt; call, @NonNull Response&lt;BaseResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    BaseResp responseBody = response.body();&#10;&#10;                    if (responseBody.success) {&#10;                        Toast.makeText(VoucherManagementActivity.this, &quot;Cập nhật voucher thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                        loadVouchers();&#10;                    } else {&#10;                        String errorMessage = responseBody.message != null ? responseBody.message : &quot;Cập nhật voucher thất bại!&quot;;&#10;                        Toast.makeText(VoucherManagementActivity.this, errorMessage, Toast.LENGTH_LONG).show();&#10;                    }&#10;                } else {&#10;                    String errorMsg = &quot;Lỗi server (Code: &quot; + response.code() + &quot;)&quot;;&#10;                    Toast.makeText(VoucherManagementActivity.this, errorMsg, Toast.LENGTH_LONG).show();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;BaseResp&gt; call, @NonNull Throwable t) {&#10;&#10;                String errorMsg = &quot;Lỗi kết nối: &quot; + t.getMessage();&#10;                Toast.makeText(VoucherManagementActivity.this, errorMsg, Toast.LENGTH_LONG).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showDeleteConfirmDialog(Voucher voucher) {&#10;        new MaterialAlertDialogBuilder(this)&#10;                .setTitle(&quot;Xác nhận xóa&quot;)&#10;                .setMessage(&quot;Bạn có chắc chắn muốn xóa voucher \&quot;&quot; + voucher.code + &quot;\&quot;?&quot;)&#10;                .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; deleteVoucher(voucher))&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void deleteVoucher(Voucher voucher) {&#10;        apiService.deleteVoucher(voucher.id).enqueue(new Callback&lt;BaseResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;BaseResp&gt; call, @NonNull Response&lt;BaseResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null &amp;&amp; response.body().success) {&#10;                    Toast.makeText(VoucherManagementActivity.this, &quot;Xóa voucher thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                    loadVouchers();&#10;                } else {&#10;                    Toast.makeText(VoucherManagementActivity.this, &quot;Xóa voucher thất bại!&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;BaseResp&gt; call, @NonNull Throwable t) {&#10;                Toast.makeText(VoucherManagementActivity.this, &quot;Lỗi kết nối!&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showDuplicateVoucherDialog(Voucher voucher) {&#10;        View dialogView = getLayoutInflater().inflate(R.layout.dialog_voucher_form, null);&#10;&#10;        TextInputLayout tilCode = dialogView.findViewById(R.id.tilVoucherCode);&#10;        TextInputLayout tilValue = dialogView.findViewById(R.id.tilVoucherValue);&#10;        TextInputLayout tilMinOrder = dialogView.findViewById(R.id.tilMinOrderValue);&#10;        TextInputLayout tilUsageLimit = dialogView.findViewById(R.id.tilUsageLimit);&#10;        TextInputLayout tilPerUserLimit = dialogView.findViewById(R.id.tilPerUserLimit);&#10;        TextInputLayout tilDescription = dialogView.findViewById(R.id.tilDescription);&#10;&#10;        EditText etCode = tilCode.getEditText();&#10;        EditText etValue = tilValue.getEditText();&#10;        EditText etMinOrder = tilMinOrder.getEditText();&#10;        EditText etUsageLimit = tilUsageLimit.getEditText();&#10;        EditText etPerUserLimit = tilPerUserLimit.getEditText();&#10;        EditText etDescription = tilDescription.getEditText();&#10;&#10;        Spinner spinnerType = dialogView.findViewById(R.id.spinnerVoucherType);&#10;        MaterialButton btnStartDate = dialogView.findViewById(R.id.btnStartDate);&#10;        MaterialButton btnEndDate = dialogView.findViewById(R.id.btnEndDate);&#10;&#10;        // Setup spinner&#10;        String[] types = {&quot;percent&quot;, &quot;amount&quot;};  // Sửa để khớp với server&#10;        String[] typeLabels = {&quot;Giảm theo %&quot;, &quot;Giảm cố định&quot;};&#10;        ArrayAdapter&lt;String&gt; typeAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, typeLabels);&#10;        typeAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerType.setAdapter(typeAdapter);&#10;&#10;        // Date pickers&#10;        Calendar startDate = Calendar.getInstance();&#10;        Calendar endDate = Calendar.getInstance();&#10;        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault());&#10;&#10;        btnStartDate.setOnClickListener(v -&gt; {&#10;            DatePickerDialog picker = new DatePickerDialog(this,&#10;                (view, year, month, dayOfMonth) -&gt; {&#10;                    startDate.set(year, month, dayOfMonth);&#10;                    btnStartDate.setText(dateFormat.format(startDate.getTime()));&#10;                },&#10;                startDate.get(Calendar.YEAR),&#10;                startDate.get(Calendar.MONTH),&#10;                startDate.get(Calendar.DAY_OF_MONTH)&#10;            );&#10;            picker.show();&#10;        });&#10;&#10;        btnEndDate.setOnClickListener(v -&gt; {&#10;            DatePickerDialog picker = new DatePickerDialog(this,&#10;                (view, year, month, dayOfMonth) -&gt; {&#10;                    endDate.set(year, month, dayOfMonth);&#10;                    btnEndDate.setText(dateFormat.format(endDate.getTime()));&#10;                },&#10;                endDate.get(Calendar.YEAR),&#10;                endDate.get(Calendar.MONTH),&#10;                endDate.get(Calendar.DAY_OF_MONTH)&#10;            );&#10;            picker.show();&#10;        });&#10;&#10;        // Fill existing data for duplication&#10;        if (voucher != null) {&#10;            etCode.setText(voucher.code);&#10;            etValue.setText(String.valueOf(voucher.discountValue)); // Sử dụng discountValue&#10;            etMinOrder.setText(String.valueOf(voucher.minOrderAmount)); // Sử dụng minOrderAmount&#10;            if (voucher.usageLimit &gt; 0) { // usageLimit là int, không phải Integer&#10;                etUsageLimit.setText(String.valueOf(voucher.usageLimit));&#10;            }&#10;            // perUserLimit không tồn tại trong model - bỏ qua hoặc để trống&#10;            etDescription.setText(voucher.description != null ? voucher.description : &quot;&quot;);&#10;&#10;            // Set spinner selection - sử dụng discountType&#10;            spinnerType.setSelection(&quot;percentage&quot;.equals(voucher.discountType) ? 0 : 1);&#10;&#10;            // Chỉ có expiryDate, không có startDate/endDate&#10;            btnStartDate.setText(dateFormat.format(startDate.getTime()));&#10;            if (voucher.expiryDate != null) {&#10;                btnEndDate.setText(voucher.expiryDate);&#10;            } else {&#10;                btnEndDate.setText(dateFormat.format(endDate.getTime()));&#10;            }&#10;        } else {&#10;            btnStartDate.setText(dateFormat.format(startDate.getTime()));&#10;            btnEndDate.setText(dateFormat.format(endDate.getTime()));&#10;        }&#10;&#10;        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(this)&#10;                .setTitle(&quot;Nhân bản Voucher&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(&quot;Lưu&quot;, (dialog, which) -&gt; {&#10;                    if (validateVoucherForm(tilCode, tilValue, tilMinOrder)) {&#10;                        String code = etCode.getText().toString().trim();&#10;                        String type = types[spinnerType.getSelectedItemPosition()];&#10;                        double value = Double.parseDouble(etValue.getText().toString().trim());&#10;                        double minOrderValue = Double.parseDouble(etMinOrder.getText().toString().trim());&#10;                        String startDateStr = btnStartDate.getText().toString();&#10;                        String endDateStr = btnEndDate.getText().toString();&#10;&#10;                        Integer usageLimit = TextUtils.isEmpty(etUsageLimit.getText()) ? null :&#10;                            Integer.parseInt(etUsageLimit.getText().toString().trim());&#10;                        Integer perUserLimit = TextUtils.isEmpty(etPerUserLimit.getText()) ? null :&#10;                            Integer.parseInt(etPerUserLimit.getText().toString().trim());&#10;                        String description = etDescription.getText().toString().trim();&#10;&#10;                        // Handle null values - set to 0 instead of null for optional integer fields&#10;                        Integer finalUsageLimit = usageLimit != null ? usageLimit : 0;&#10;                        Integer finalPerUserLimit = perUserLimit != null ? perUserLimit : 0;&#10;&#10;                        // Handle empty description - set to empty string instead of null&#10;                        String finalDescription = description != null &amp;&amp; !description.trim().isEmpty() ? description : &quot;&quot;;&#10;&#10;                        // TODO: Get actual user session data instead of hard-coded values&#10;                        Integer createdBy = 1; // Should get from user session&#10;                        Integer storeId = 1;   // Should get from user session&#10;&#10;                        // Create duplicated voucher with new ID&#10;                        apiService.createVoucher(code, type, value, minOrderValue, startDateStr, endDateStr,&#10;                                finalUsageLimit, finalPerUserLimit, finalDescription).enqueue(new Callback&lt;BaseResp&gt;() {&#10;                            @Override&#10;                            public void onResponse(@NonNull Call&lt;BaseResp&gt; call, @NonNull Response&lt;BaseResp&gt; response) {&#10;                                if (response.isSuccessful() &amp;&amp; response.body() != null &amp;&amp; response.body().success) {&#10;                                    Toast.makeText(VoucherManagementActivity.this, &quot;Nhân bản voucher thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                                    loadVouchers();&#10;                                } else {&#10;                                    String errorMessage = response.body().message != null ? response.body().message : &quot;Nhân bản voucher thất bại!&quot;;&#10;                                    Toast.makeText(VoucherManagementActivity.this, errorMessage, Toast.LENGTH_LONG).show();&#10;                                }&#10;                            }&#10;&#10;                            @Override&#10;                            public void onFailure(@NonNull Call&lt;BaseResp&gt; call, @NonNull Throwable t) {&#10;                                Toast.makeText(VoucherManagementActivity.this, &quot;Lỗi kết nối!&quot;, Toast.LENGTH_SHORT).show();&#10;                            }&#10;                        });&#10;                    }&#10;                })&#10;                .setNegativeButton(&quot;Hủy&quot;, null);&#10;&#10;        builder.show();&#10;    }&#10;&#10;    private void showVoucherDetailsDialog(Voucher voucher) {&#10;        // Sử dụng đúng field names từ Voucher model&#10;        StringBuilder detailsText = new StringBuilder();&#10;        detailsText.append(&quot;Mã voucher: &quot;).append(voucher.code).append(&quot;\n&quot;)&#10;                   .append(&quot;Loại: &quot;).append(&quot;percentage&quot;.equals(voucher.discountType) ? &quot;Giảm theo %&quot; : &quot;Giảm cố định&quot;).append(&quot;\n&quot;)&#10;                   .append(&quot;Giá trị: &quot;).append(voucher.discountValue).append(&quot;\n&quot;)&#10;                   .append(&quot;Giá trị đơn hàng tối thiểu: &quot;).append(voucher.minOrderAmount).append(&quot;\n&quot;)&#10;                   .append(&quot;Ngày hết hạn: &quot;).append(voucher.expiryDate != null ? voucher.expiryDate : &quot;Không xác định&quot;).append(&quot;\n&quot;)&#10;                   .append(&quot;Giới hạn sử dụng: &quot;).append(voucher.usageLimit &gt; 0 ? voucher.usageLimit : &quot;Không giới hạn&quot;).append(&quot;\n&quot;)&#10;                   .append(&quot;Đã sử dụng: &quot;).append(voucher.usedCount).append(&quot;\n&quot;)&#10;                   .append(&quot;Trạng thái: &quot;).append(voucher.isActive ? &quot;Đang hoạt động&quot; : &quot;Ngừng hoạt động&quot;).append(&quot;\n&quot;)&#10;                   .append(&quot;Mô tả: &quot;).append(voucher.description != null ? voucher.description : &quot;Không có&quot;);&#10;&#10;        new MaterialAlertDialogBuilder(this)&#10;                .setTitle(&quot;Chi tiết Voucher&quot;)&#10;                .setMessage(detailsText.toString())&#10;                .setPositiveButton(&quot;Đóng&quot;, null)&#10;                .show();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/seller/VoucherManagementAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/seller/VoucherManagementAdapter.java" />
              <option name="originalContent" value="package com.example.skymall.ui.seller;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.Voucher;&#10;import com.google.android.material.card.MaterialCardView;&#10;import com.google.android.material.chip.Chip;&#10;&#10;import java.text.NumberFormat;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class VoucherManagementAdapter extends RecyclerView.Adapter&lt;VoucherManagementAdapter.VoucherViewHolder&gt; {&#10;&#10;    private List&lt;Voucher&gt; voucherList;&#10;    private OnVoucherActionListener listener;&#10;    private NumberFormat currencyFormat;&#10;&#10;    public interface OnVoucherActionListener {&#10;        void onEdit(Voucher voucher);&#10;        void onDelete(Voucher voucher);&#10;        void onToggleStatus(Voucher voucher);&#10;        void onDuplicate(Voucher voucher);&#10;        void onViewDetails(Voucher voucher);&#10;    }&#10;&#10;    public VoucherManagementAdapter(List&lt;Voucher&gt; voucherList, OnVoucherActionListener listener) {&#10;        this.voucherList = voucherList;&#10;        this.listener = listener;&#10;        this.currencyFormat = NumberFormat.getCurrencyInstance(new Locale(&quot;vi&quot;, &quot;VN&quot;));&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public VoucherViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_voucher_management, parent, false);&#10;        return new VoucherViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull VoucherViewHolder holder, int position) {&#10;        Voucher voucher = voucherList.get(position);&#10;        holder.bind(voucher);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return voucherList.size();&#10;    }&#10;&#10;    class VoucherViewHolder extends RecyclerView.ViewHolder {&#10;        private MaterialCardView cardView;&#10;        private TextView tvCode, tvDescription, tvValue, tvMinOrder, tvUsage, tvDates;&#10;        private Chip chipType, chipStatus;&#10;        private ImageButton btnEdit, btnDelete, btnDuplicate;&#10;&#10;        public VoucherViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            cardView = itemView.findViewById(R.id.cardVoucher);&#10;            tvCode = itemView.findViewById(R.id.tvVoucherCode);&#10;            tvDescription = itemView.findViewById(R.id.tvVoucherDescription);&#10;            tvValue = itemView.findViewById(R.id.tvVoucherValue);&#10;            tvMinOrder = itemView.findViewById(R.id.tvMinOrderValue);&#10;            tvUsage = itemView.findViewById(R.id.tvUsageInfo);&#10;            tvDates = itemView.findViewById(R.id.tvValidityDates);&#10;            chipType = itemView.findViewById(R.id.chipVoucherType);&#10;            chipStatus = itemView.findViewById(R.id.chipStatus);&#10;            btnDuplicate = itemView.findViewById(R.id.btnDuplicateVoucher);&#10;            btnEdit = itemView.findViewById(R.id.btnEditVoucher);&#10;            btnDelete = itemView.findViewById(R.id.btnDeleteVoucher);&#10;        }&#10;&#10;        public void bind(Voucher voucher) {&#10;            tvCode.setText(voucher.code);&#10;            tvDescription.setText(voucher.description != null ? voucher.description : &quot;Không có mô tả&quot;);&#10;&#10;            // Format value based on type&#10;            if (&quot;percentage&quot;.equals(voucher.type)) {&#10;                tvValue.setText(String.format(&quot;Giảm %.0f%%&quot;, voucher.value));&#10;                chipType.setText(&quot;Giảm %&quot;);&#10;                chipType.setChipBackgroundColorResource(R.color.chip_percentage_bg);&#10;            } else {&#10;                tvValue.setText(&quot;Giảm &quot; + currencyFormat.format(voucher.value));&#10;                chipType.setText(&quot;Giảm cố định&quot;);&#10;                chipType.setChipBackgroundColorResource(R.color.chip_fixed_bg);&#10;            }&#10;&#10;            tvMinOrder.setText(&quot;Đơn tối thiểu: &quot; + currencyFormat.format(voucher.minOrderValue));&#10;&#10;            // Usage info&#10;            StringBuilder usageInfo = new StringBuilder();&#10;            usageInfo.append(&quot;Đã dùng: &quot;).append(voucher.totalUsed);&#10;            if (voucher.usageLimit != null) {&#10;                usageInfo.append(&quot;/&quot;).append(voucher.usageLimit);&#10;            }&#10;            if (voucher.perUserLimit != null) {&#10;                usageInfo.append(&quot; (&quot;).append(voucher.perUserLimit).append(&quot;/người)&quot;);&#10;            }&#10;            tvUsage.setText(usageInfo.toString());&#10;&#10;            // Validity dates&#10;            tvDates.setText(String.format(&quot;Từ %s đến %s&quot;, voucher.startDate, voucher.endDate));&#10;&#10;            // Status chip&#10;            boolean isActive = voucher.isActive != null ? voucher.isActive : true;&#10;            if (isActive) {&#10;                chipStatus.setText(&quot;Hoạt động&quot;);&#10;                chipStatus.setChipBackgroundColorResource(R.color.chip_active_bg);&#10;                chipStatus.setTextColor(itemView.getContext().getColor(R.color.chip_active_text));&#10;            } else {&#10;                chipStatus.setText(&quot;Tạm dừng&quot;);&#10;                chipStatus.setChipBackgroundColorResource(R.color.chip_inactive_bg);&#10;                chipStatus.setTextColor(itemView.getContext().getColor(R.color.chip_inactive_text));&#10;            }&#10;&#10;            // Check if expired&#10;            if (voucher.isExpired()) {&#10;                chipStatus.setText(&quot;Hết hạn&quot;);&#10;                chipStatus.setChipBackgroundColorResource(R.color.chip_expired_bg);&#10;                chipStatus.setTextColor(itemView.getContext().getColor(R.color.chip_expired_text));&#10;            }&#10;&#10;            // Button listeners&#10;            btnDuplicate.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onDuplicate(voucher);&#10;                }&#10;            });&#10;&#10;            btnEdit.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onEdit(voucher);&#10;                }&#10;            });&#10;&#10;            btnDelete.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onDelete(voucher);&#10;                }&#10;            });&#10;&#10;            cardView.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onViewDetails(voucher);&#10;                }&#10;            });&#10;&#10;            cardView.setOnLongClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onToggleStatus(voucher);&#10;                }&#10;                return true;&#10;            });&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.skymall.ui.seller;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.Voucher;&#10;import com.google.android.material.card.MaterialCardView;&#10;import com.google.android.material.chip.Chip;&#10;&#10;import java.text.NumberFormat;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class VoucherManagementAdapter extends RecyclerView.Adapter&lt;VoucherManagementAdapter.VoucherViewHolder&gt; {&#10;&#10;    private List&lt;Voucher&gt; voucherList;&#10;    private OnVoucherActionListener listener;&#10;    private NumberFormat currencyFormat;&#10;&#10;    public interface OnVoucherActionListener {&#10;        void onEdit(Voucher voucher);&#10;        void onDelete(Voucher voucher);&#10;        void onToggleStatus(Voucher voucher);&#10;        void onDuplicate(Voucher voucher);&#10;        void onViewDetails(Voucher voucher);&#10;    }&#10;&#10;    public VoucherManagementAdapter(List&lt;Voucher&gt; voucherList, OnVoucherActionListener listener) {&#10;        this.voucherList = voucherList;&#10;        this.listener = listener;&#10;        this.currencyFormat = NumberFormat.getCurrencyInstance(new Locale(&quot;vi&quot;, &quot;VN&quot;));&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public VoucherViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_voucher_management, parent, false);&#10;        return new VoucherViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull VoucherViewHolder holder, int position) {&#10;        Voucher voucher = voucherList.get(position);&#10;        holder.bind(voucher);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return voucherList.size();&#10;    }&#10;&#10;    class VoucherViewHolder extends RecyclerView.ViewHolder {&#10;        private MaterialCardView cardView;&#10;        private TextView tvCode, tvDescription, tvValue, tvMinOrder, tvUsage, tvDates;&#10;        private Chip chipType, chipStatus;&#10;        private ImageButton btnEdit, btnDelete, btnDuplicate;&#10;&#10;        public VoucherViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            cardView = itemView.findViewById(R.id.cardVoucher);&#10;            tvCode = itemView.findViewById(R.id.tvVoucherCode);&#10;            tvDescription = itemView.findViewById(R.id.tvVoucherDescription);&#10;            tvValue = itemView.findViewById(R.id.tvVoucherValue);&#10;            tvMinOrder = itemView.findViewById(R.id.tvMinOrderValue);&#10;            tvUsage = itemView.findViewById(R.id.tvUsageInfo);&#10;            tvDates = itemView.findViewById(R.id.tvValidityDates);&#10;            chipType = itemView.findViewById(R.id.chipVoucherType);&#10;            chipStatus = itemView.findViewById(R.id.chipStatus);&#10;            btnDuplicate = itemView.findViewById(R.id.btnDuplicateVoucher);&#10;            btnEdit = itemView.findViewById(R.id.btnEditVoucher);&#10;            btnDelete = itemView.findViewById(R.id.btnDeleteVoucher);&#10;        }&#10;&#10;        public void bind(Voucher voucher) {&#10;            tvCode.setText(voucher.code);&#10;            tvDescription.setText(voucher.description != null ? voucher.description : &quot;Không có mô tả&quot;);&#10;&#10;            // Format value based on type - sử dụng discountType và discountValue&#10;            if (&quot;percentage&quot;.equals(voucher.discountType)) {&#10;                tvValue.setText(String.format(&quot;Giảm %.0f%%&quot;, voucher.discountValue));&#10;                chipType.setText(&quot;Giảm %&quot;);&#10;                chipType.setChipBackgroundColorResource(android.R.color.holo_blue_light);&#10;            } else {&#10;                tvValue.setText(&quot;Giảm &quot; + currencyFormat.format(voucher.discountValue));&#10;                chipType.setText(&quot;Giảm cố định&quot;);&#10;                chipType.setChipBackgroundColorResource(android.R.color.holo_green_light);&#10;            }&#10;&#10;            // Sử dụng minOrderAmount thay vì minOrderValue&#10;            tvMinOrder.setText(&quot;Đơn tối thiểu: &quot; + currencyFormat.format(voucher.minOrderAmount));&#10;&#10;            // Usage info - sử dụng các field có sẵn&#10;            StringBuilder usageInfo = new StringBuilder();&#10;            usageInfo.append(&quot;Đã dùng: &quot;).append(voucher.usedCount);&#10;            if (voucher.usageLimit &gt; 0) { // usageLimit là int, không phải Integer&#10;                usageInfo.append(&quot;/&quot;).append(voucher.usageLimit);&#10;            } else {&#10;                usageInfo.append(&quot; (Không giới hạn)&quot;);&#10;            }&#10;            tvUsage.setText(usageInfo.toString());&#10;&#10;            // Validity dates - chỉ hiển thị expiryDate&#10;            if (voucher.expiryDate != null &amp;&amp; !voucher.expiryDate.isEmpty()) {&#10;                tvDates.setText(&quot;Hết hạn: &quot; + voucher.expiryDate);&#10;            } else {&#10;                tvDates.setText(&quot;Không thời hạn&quot;);&#10;            }&#10;&#10;            // Status chip - isActive là boolean, không phải Boolean&#10;            if (voucher.isActive) {&#10;                chipStatus.setText(&quot;Hoạt động&quot;);&#10;                chipStatus.setChipBackgroundColorResource(android.R.color.holo_green_light);&#10;                chipStatus.setTextColor(itemView.getContext().getColor(android.R.color.white));&#10;            } else {&#10;                chipStatus.setText(&quot;Tạm dừng&quot;);&#10;                chipStatus.setChipBackgroundColorResource(android.R.color.holo_red_light);&#10;                chipStatus.setTextColor(itemView.getContext().getColor(android.R.color.white));&#10;            }&#10;&#10;            // Check if expired - sử dụng method isValid() có sẵn&#10;            if (!voucher.isValid()) {&#10;                chipStatus.setText(&quot;Hết hạn/Hết lượt&quot;);&#10;                chipStatus.setChipBackgroundColorResource(android.R.color.darker_gray);&#10;                chipStatus.setTextColor(itemView.getContext().getColor(android.R.color.white));&#10;            }&#10;&#10;            // Button listeners&#10;            btnDuplicate.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onDuplicate(voucher);&#10;                }&#10;            });&#10;&#10;            btnEdit.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onEdit(voucher);&#10;                }&#10;            });&#10;&#10;            btnDelete.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onDelete(voucher);&#10;                }&#10;            });&#10;&#10;            cardView.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onViewDetails(voucher);&#10;                }&#10;            });&#10;&#10;            cardView.setOnLongClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onToggleStatus(voucher);&#10;                }&#10;                return true;&#10;            });&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/voucher/VoucherAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/voucher/VoucherAdapter.java" />
              <option name="originalContent" value="package com.example.skymall.ui.voucher;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.Voucher;&#10;&#10;import java.text.NumberFormat;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class VoucherAdapter extends RecyclerView.Adapter&lt;VoucherAdapter.VoucherViewHolder&gt; {&#10;    private List&lt;Voucher&gt; vouchers = new ArrayList&lt;&gt;();&#10;    private OnVoucherClickListener onVoucherClickListener;&#10;&#10;    public interface OnVoucherClickListener {&#10;        void onVoucherClick(Voucher voucher);&#10;    }&#10;&#10;    public void setOnVoucherClickListener(OnVoucherClickListener listener) {&#10;        this.onVoucherClickListener = listener;&#10;    }&#10;&#10;    public void setVouchers(List&lt;Voucher&gt; vouchers) {&#10;        this.vouchers = vouchers;&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    public void addVouchers(List&lt;Voucher&gt; newVouchers) {&#10;        int startPosition = this.vouchers.size();&#10;        this.vouchers.addAll(newVouchers);&#10;        notifyItemRangeInserted(startPosition, newVouchers.size());&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public VoucherViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_voucher, parent, false);&#10;        return new VoucherViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull VoucherViewHolder holder, int position) {&#10;        Voucher voucher = vouchers.get(position);&#10;        holder.bind(voucher);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return vouchers.size();&#10;    }&#10;&#10;    class VoucherViewHolder extends RecyclerView.ViewHolder {&#10;        private TextView tvVoucherCode;&#10;        private TextView tvVoucherValue;&#10;        private TextView tvMinOrder;&#10;        private TextView tvEndDate;&#10;        private TextView tvUsageInfo;&#10;        private View voucherCard;&#10;&#10;        public VoucherViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvVoucherCode = itemView.findViewById(R.id.tv_voucher_code);&#10;            tvVoucherValue = itemView.findViewById(R.id.tv_voucher_value);&#10;            tvMinOrder = itemView.findViewById(R.id.tv_min_order);&#10;            tvEndDate = itemView.findViewById(R.id.tv_end_date);&#10;            tvUsageInfo = itemView.findViewById(R.id.tv_usage_info);&#10;            voucherCard = itemView.findViewById(R.id.voucher_card);&#10;        }&#10;&#10;        public void bind(Voucher voucher) {&#10;            tvVoucherCode.setText(voucher.code);&#10;            tvVoucherValue.setText(&quot;Giảm &quot; + voucher.getDisplayValue());&#10;&#10;            NumberFormat formatter = NumberFormat.getCurrencyInstance(new Locale(&quot;vi&quot;, &quot;VN&quot;));&#10;            String minOrderText = &quot;Đơn tối thiểu &quot; + formatter.format(voucher.minOrderValue);&#10;            tvMinOrder.setText(minOrderText);&#10;&#10;            if (voucher.endDate != null) {&#10;                tvEndDate.setText(&quot;HSD: &quot; + voucher.endDate);&#10;                tvEndDate.setVisibility(View.VISIBLE);&#10;            } else {&#10;                tvEndDate.setVisibility(View.GONE);&#10;            }&#10;&#10;            // Hiển thị thông tin sử dụng&#10;            StringBuilder usageInfo = new StringBuilder();&#10;            if (voucher.usageLimit != null) {&#10;                usageInfo.append(&quot;Còn &quot;).append(voucher.remaining != null ? voucher.remaining : 0)&#10;                        .append(&quot;/&quot;).append(voucher.usageLimit);&#10;            }&#10;            if (voucher.perUserLimit != null) {&#10;                if (usageInfo.length() &gt; 0) usageInfo.append(&quot; • &quot;);&#10;                usageInfo.append(&quot;Bạn đã dùng &quot;).append(voucher.userUsed)&#10;                        .append(&quot;/&quot;).append(voucher.perUserLimit);&#10;            }&#10;&#10;            if (usageInfo.length() &gt; 0) {&#10;                tvUsageInfo.setText(usageInfo.toString());&#10;                tvUsageInfo.setVisibility(View.VISIBLE);&#10;            } else {&#10;                tvUsageInfo.setVisibility(View.GONE);&#10;            }&#10;&#10;            // Xử lý click&#10;            voucherCard.setOnClickListener(v -&gt; {&#10;                if (onVoucherClickListener != null &amp;&amp; voucher.canUse()) {&#10;                    onVoucherClickListener.onVoucherClick(voucher);&#10;                }&#10;            });&#10;&#10;            // Thay đổi giao diện nếu voucher không thể sử dụng&#10;            voucherCard.setAlpha(voucher.canUse() ? 1.0f : 0.5f);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.skymall.ui.voucher;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.Voucher;&#10;&#10;import java.text.NumberFormat;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class VoucherAdapter extends RecyclerView.Adapter&lt;VoucherAdapter.VoucherViewHolder&gt; {&#10;    private List&lt;Voucher&gt; vouchers = new ArrayList&lt;&gt;();&#10;    private OnVoucherClickListener onVoucherClickListener;&#10;&#10;    public interface OnVoucherClickListener {&#10;        void onVoucherClick(Voucher voucher);&#10;    }&#10;&#10;    public void setOnVoucherClickListener(OnVoucherClickListener listener) {&#10;        this.onVoucherClickListener = listener;&#10;    }&#10;&#10;    public void setVouchers(List&lt;Voucher&gt; vouchers) {&#10;        this.vouchers = vouchers;&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    public void addVouchers(List&lt;Voucher&gt; newVouchers) {&#10;        int startPosition = this.vouchers.size();&#10;        this.vouchers.addAll(newVouchers);&#10;        notifyItemRangeInserted(startPosition, newVouchers.size());&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public VoucherViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_voucher, parent, false);&#10;        return new VoucherViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull VoucherViewHolder holder, int position) {&#10;        Voucher voucher = vouchers.get(position);&#10;        holder.bind(voucher);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return vouchers.size();&#10;    }&#10;&#10;    class VoucherViewHolder extends RecyclerView.ViewHolder {&#10;        private TextView tvVoucherCode;&#10;        private TextView tvVoucherValue;&#10;        private TextView tvMinOrder;&#10;        private TextView tvEndDate;&#10;        private TextView tvUsageInfo;&#10;        private View voucherCard;&#10;&#10;        public VoucherViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvVoucherCode = itemView.findViewById(R.id.tv_voucher_code);&#10;            tvVoucherValue = itemView.findViewById(R.id.tv_voucher_value);&#10;            tvMinOrder = itemView.findViewById(R.id.tv_min_order);&#10;            tvEndDate = itemView.findViewById(R.id.tv_end_date);&#10;            tvUsageInfo = itemView.findViewById(R.id.tv_usage_info);&#10;            voucherCard = itemView.findViewById(R.id.voucher_card);&#10;        }&#10;&#10;        public void bind(Voucher voucher) {&#10;            tvVoucherCode.setText(voucher.code);&#10;&#10;            // Format value based on type - sử dụng discountType và discountValue&#10;            String valueText;&#10;            if (&quot;percentage&quot;.equals(voucher.discountType)) {&#10;                valueText = &quot;Giảm &quot; + String.format(&quot;%.0f%%&quot;, voucher.discountValue);&#10;            } else {&#10;                NumberFormat formatter = NumberFormat.getCurrencyInstance(new Locale(&quot;vi&quot;, &quot;VN&quot;));&#10;                valueText = &quot;Giảm &quot; + formatter.format(voucher.discountValue);&#10;            }&#10;            tvVoucherValue.setText(valueText);&#10;&#10;            // Sử dụng minOrderAmount thay vì minOrderValue&#10;            NumberFormat formatter = NumberFormat.getCurrencyInstance(new Locale(&quot;vi&quot;, &quot;VN&quot;));&#10;            String minOrderText = &quot;Đơn tối thiểu &quot; + formatter.format(voucher.minOrderAmount);&#10;            tvMinOrder.setText(minOrderText);&#10;&#10;            // Sử dụng expiryDate thay vì endDate&#10;            if (voucher.expiryDate != null &amp;&amp; !voucher.expiryDate.isEmpty()) {&#10;                tvEndDate.setText(&quot;HSD: &quot; + voucher.expiryDate);&#10;                tvEndDate.setVisibility(View.VISIBLE);&#10;            } else {&#10;                tvEndDate.setVisibility(View.GONE);&#10;            }&#10;&#10;            // Hiển thị thông tin sử dụng - sử dụng các field có sẵn&#10;            StringBuilder usageInfo = new StringBuilder();&#10;            if (voucher.usageLimit &gt; 0) { // usageLimit là int, không phải Integer&#10;                int remaining = voucher.usageLimit - voucher.usedCount;&#10;                usageInfo.append(&quot;Còn &quot;).append(remaining).append(&quot;/&quot;).append(voucher.usageLimit);&#10;            } else {&#10;                usageInfo.append(&quot;Không giới hạn&quot;);&#10;            }&#10;&#10;            if (usageInfo.length() &gt; 0) {&#10;                tvUsageInfo.setText(usageInfo.toString());&#10;                tvUsageInfo.setVisibility(View.VISIBLE);&#10;            } else {&#10;                tvUsageInfo.setVisibility(View.GONE);&#10;            }&#10;&#10;            // Xử lý click - sử dụng isValid() method có sẵn&#10;            voucherCard.setOnClickListener(v -&gt; {&#10;                if (onVoucherClickListener != null &amp;&amp; voucher.isValid()) {&#10;                    onVoucherClickListener.onVoucherClick(voucher);&#10;                }&#10;            });&#10;&#10;            // Thay đổi giao diện nếu voucher không thể sử dụng&#10;            voucherCard.setAlpha(voucher.isValid() ? 1.0f : 0.5f);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/voucher/VoucherSelectDialog.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/skymall/ui/voucher/VoucherSelectDialog.java" />
              <option name="originalContent" value="package com.example.skymall.ui.voucher;&#10;&#10;import android.app.Dialog;&#10;import android.content.Context;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.Voucher;&#10;import com.example.skymall.data.remote.ApiClient;&#10;import com.example.skymall.data.remote.ApiService;&#10;import com.example.skymall.data.remote.DTO.VoucherListResp;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class VoucherSelectDialog extends Dialog {&#10;&#10;    private RecyclerView rvVouchers;&#10;    private TextView tvNoVouchers;&#10;    private VoucherSelectAdapter adapter;&#10;    private ApiService api;&#10;    private Voucher selectedVoucher;&#10;    private OnVoucherSelectedListener listener;&#10;&#10;    public interface OnVoucherSelectedListener {&#10;        void onVoucherSelected(Voucher voucher);&#10;    }&#10;&#10;    public VoucherSelectDialog(@NonNull Context context, Voucher currentVoucher, OnVoucherSelectedListener listener) {&#10;        super(context);&#10;        this.selectedVoucher = currentVoucher;&#10;        this.listener = listener;&#10;    }&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.dialog_voucher_select);&#10;&#10;        initViews();&#10;        setupApi();&#10;        setupRecyclerView();&#10;        loadVouchers();&#10;    }&#10;&#10;    private void initViews() {&#10;        rvVouchers = findViewById(R.id.rvVouchers);&#10;        tvNoVouchers = findViewById(R.id.tvNoVouchers);&#10;&#10;        findViewById(R.id.btnClose).setOnClickListener(v -&gt; dismiss());&#10;        findViewById(R.id.btnClearVoucher).setOnClickListener(v -&gt; {&#10;            if (listener != null) {&#10;                listener.onVoucherSelected(null);&#10;            }&#10;            dismiss();&#10;        });&#10;    }&#10;&#10;    private void setupApi() {&#10;        api = ApiClient.create(getContext());&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        adapter = new VoucherSelectAdapter(new ArrayList&lt;&gt;(), selectedVoucher, voucher -&gt; {&#10;            if (listener != null) {&#10;                listener.onVoucherSelected(voucher);&#10;            }&#10;            dismiss();&#10;        });&#10;        rvVouchers.setLayoutManager(new LinearLayoutManager(getContext()));&#10;        rvVouchers.setAdapter(adapter);&#10;    }&#10;&#10;    private void loadVouchers() {&#10;        api.getVouchers(1, 50).enqueue(new Callback&lt;VoucherListResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;VoucherListResp&gt; call, @NonNull Response&lt;VoucherListResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    List&lt;Voucher&gt; vouchers = response.body().vouchers;&#10;                    if (vouchers.isEmpty()) {&#10;                        tvNoVouchers.setVisibility(View.VISIBLE);&#10;                        rvVouchers.setVisibility(View.GONE);&#10;                    } else {&#10;                        tvNoVouchers.setVisibility(View.GONE);&#10;                        rvVouchers.setVisibility(View.VISIBLE);&#10;                        adapter.updateVouchers(vouchers);&#10;                    }&#10;                } else {&#10;                    Toast.makeText(getContext(), &quot;Không thể tải danh sách voucher&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;VoucherListResp&gt; call, @NonNull Throwable t) {&#10;                Toast.makeText(getContext(), &quot;Lỗi kết nối&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.skymall.ui.voucher;&#10;&#10;import android.app.Dialog;&#10;import android.content.Context;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.skymall.R;&#10;import com.example.skymall.data.model.Voucher;&#10;import com.example.skymall.data.remote.ApiManager;&#10;import com.example.skymall.data.remote.ApiService;&#10;import com.example.skymall.data.remote.DTO.VoucherListResp;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import retrofit2.Call;&#10;import retrofit2.Callback;&#10;import retrofit2.Response;&#10;&#10;public class VoucherSelectDialog extends Dialog {&#10;&#10;    private RecyclerView rvVouchers;&#10;    private TextView tvNoVouchers;&#10;    private VoucherSelectAdapter adapter;&#10;    private ApiService api;&#10;    private final Voucher selectedVoucher;&#10;    private final OnVoucherSelectedListener listener;&#10;&#10;    public interface OnVoucherSelectedListener {&#10;        void onVoucherSelected(Voucher voucher);&#10;    }&#10;&#10;    public VoucherSelectDialog(@NonNull Context context, Voucher currentVoucher, OnVoucherSelectedListener listener) {&#10;        super(context);&#10;        this.selectedVoucher = currentVoucher;&#10;        this.listener = listener;&#10;    }&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.dialog_voucher_select);&#10;&#10;        initViews();&#10;        setupApi();&#10;        setupRecyclerView();&#10;        loadVouchers();&#10;    }&#10;&#10;    private void initViews() {&#10;        rvVouchers = findViewById(R.id.rvVouchers);&#10;        tvNoVouchers = findViewById(R.id.tvNoVouchers);&#10;&#10;        findViewById(R.id.btnClose).setOnClickListener(v -&gt; dismiss());&#10;        findViewById(R.id.btnClearVoucher).setOnClickListener(v -&gt; {&#10;            if (listener != null) {&#10;                listener.onVoucherSelected(null);&#10;            }&#10;            dismiss();&#10;        });&#10;    }&#10;&#10;    private void setupApi() {&#10;        // Sử dụng ApiManager thống nhất&#10;        api = ApiManager.getInstance(getContext()).getApiService();&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        adapter = new VoucherSelectAdapter(new ArrayList&lt;&gt;(), selectedVoucher, voucher -&gt; {&#10;            if (listener != null) {&#10;                listener.onVoucherSelected(voucher);&#10;            }&#10;            dismiss();&#10;        });&#10;        rvVouchers.setLayoutManager(new LinearLayoutManager(getContext()));&#10;        rvVouchers.setAdapter(adapter);&#10;    }&#10;&#10;    private void loadVouchers() {&#10;        api.getVouchers(1, 50).enqueue(new Callback&lt;VoucherListResp&gt;() {&#10;            @Override&#10;            public void onResponse(@NonNull Call&lt;VoucherListResp&gt; call, @NonNull Response&lt;VoucherListResp&gt; response) {&#10;                if (response.isSuccessful() &amp;&amp; response.body() != null) {&#10;                    List&lt;Voucher&gt; vouchers = response.body().vouchers;&#10;                    if (vouchers.isEmpty()) {&#10;                        tvNoVouchers.setVisibility(View.VISIBLE);&#10;                        rvVouchers.setVisibility(View.GONE);&#10;                    } else {&#10;                        tvNoVouchers.setVisibility(View.GONE);&#10;                        rvVouchers.setVisibility(View.VISIBLE);&#10;                        adapter.updateVouchers(vouchers);&#10;                    }&#10;                } else {&#10;                    Toast.makeText(getContext(), &quot;Không thể tải danh sách voucher&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(@NonNull Call&lt;VoucherListResp&gt; call, @NonNull Throwable t) {&#10;                Toast.makeText(getContext(), &quot;Lỗi kết nối&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/circle_gray.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/circle_gray.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;#E0E0E0&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_close.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_close.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;@android:color/white&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M19,6.41L17.59,5 12,10.59 6.41,5 5,6.41 10.59,12 5,17.59 6.41,19 12,13.41 17.59,19 19,17.59 13.41,12z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_cart.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_cart.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/rowSelectAll&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;48dp&quot;&#10;        android:paddingStart=&quot;12dp&quot;&#10;        android:paddingEnd=&quot;12dp&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;CheckBox&#10;            android:id=&quot;@+id/cbSelectAll&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Chọn tất cả&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSelectedCount&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;(0)&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- SwipeRefreshLayout wrapping the RecyclerView --&gt;&#10;    &lt;androidx.swiperefreshlayout.widget.SwipeRefreshLayout&#10;        android:id=&quot;@+id/swipeRefresh&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/rowSelectAll&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@id/bottomBar&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/rvCart&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:clipToPadding=&quot;false&quot;&#10;            android:paddingBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;/androidx.swiperefreshlayout.widget.SwipeRefreshLayout&gt;&#10;&#10;    &lt;!-- Bottom bar with total price and checkout button --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/bottomBar&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;64dp&quot;&#10;        android:background=&quot;@android:color/white&quot;&#10;        android:elevation=&quot;6dp&quot;&#10;        android:paddingStart=&quot;12dp&quot;&#10;        android:paddingEnd=&quot;12dp&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;Tổng tiền:&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvTotalPrice&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;0đ&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;            android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnCheckout&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Mua ngay&quot;&#10;            android:backgroundTint=&quot;@android:color/holo_orange_dark&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;#F5F5F5&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- Search Bar --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:background=&quot;@android:color/white&quot;&#10;            android:elevation=&quot;2dp&quot;&#10;            android:padding=&quot;12dp&quot;&gt;&#10;&#10;            &lt;EditText&#10;                android:id=&quot;@+id/etSearch&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:background=&quot;@drawable/bg_search_box&quot;&#10;                android:drawableStart=&quot;@drawable/ic_search&quot;&#10;                android:drawablePadding=&quot;12dp&quot;&#10;                android:hint=&quot;Tìm kiếm sản phẩm...&quot;&#10;                android:paddingStart=&quot;16dp&quot;&#10;                android:paddingEnd=&quot;16dp&quot;&#10;                android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Banner Section --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:background=&quot;@android:color/white&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:paddingBottom=&quot;16dp&quot;&gt;&#10;&#10;            &lt;androidx.viewpager2.widget.ViewPager2&#10;                android:id=&quot;@+id/vpBanner&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;200dp&quot;&#10;                android:layout_marginStart=&quot;12dp&quot;&#10;                android:layout_marginEnd=&quot;12dp&quot;&#10;                android:layout_marginTop=&quot;12dp&quot; /&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:id=&quot;@+id/dots&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_gravity=&quot;center&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:orientation=&quot;horizontal&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Categories Section --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:background=&quot;@android:color/white&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:padding=&quot;12dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Danh mục&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@android:color/black&quot;&#10;                android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;            &lt;androidx.recyclerview.widget.RecyclerView&#10;                android:id=&quot;@+id/rvCategories&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:nestedScrollingEnabled=&quot;false&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Flash Sale Section --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:background=&quot;@android:color/white&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:padding=&quot;12dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:text=&quot;⚡ Flash Sale&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;@android:color/holo_red_dark&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Xem thêm &gt;&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;androidx.recyclerview.widget.RecyclerView&#10;                android:id=&quot;@+id/rvFlashSale&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:clipToPadding=&quot;false&quot;&#10;                android:paddingStart=&quot;4dp&quot;&#10;                android:paddingEnd=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Recommended Products Section --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:background=&quot;@android:color/white&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:padding=&quot;12dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Gợi ý hôm nay&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@android:color/black&quot;&#10;                android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;            &lt;androidx.recyclerview.widget.RecyclerView&#10;                android:id=&quot;@+id/rvRecommended&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:nestedScrollingEnabled=&quot;false&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    android:background=&quot;#F5F5F5&quot;&gt;&#13;&#10;&#13;&#10;    &lt;LinearLayout&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:orientation=&quot;vertical&quot;&gt;&#13;&#10;&#13;&#10;        &lt;!-- Search Bar --&gt;&#13;&#10;        &lt;LinearLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:background=&quot;@android:color/white&quot;&#13;&#10;            android:elevation=&quot;2dp&quot;&#13;&#10;            android:padding=&quot;12dp&quot;&gt;&#13;&#10;&#13;&#10;            &lt;EditText&#13;&#10;                android:id=&quot;@+id/etSearch&quot;&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;48dp&quot;&#13;&#10;                android:background=&quot;@drawable/bg_search_box&quot;&#13;&#10;                android:drawableStart=&quot;@drawable/ic_search&quot;&#13;&#10;                android:drawablePadding=&quot;12dp&quot;&#13;&#10;                android:hint=&quot;Tìm kiếm sản phẩm...&quot;&#13;&#10;                android:paddingStart=&quot;16dp&quot;&#13;&#10;                android:paddingEnd=&quot;16dp&quot;&#13;&#10;                android:textSize=&quot;14sp&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;        &lt;!-- Banner Section --&gt;&#13;&#10;        &lt;LinearLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:orientation=&quot;vertical&quot;&#13;&#10;            android:background=&quot;@android:color/white&quot;&#13;&#10;            android:layout_marginTop=&quot;8dp&quot;&#13;&#10;            android:paddingBottom=&quot;16dp&quot;&gt;&#13;&#10;&#13;&#10;            &lt;androidx.viewpager2.widget.ViewPager2&#13;&#10;                android:id=&quot;@+id/vpBanner&quot;&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;200dp&quot;&#13;&#10;                android:layout_marginStart=&quot;12dp&quot;&#13;&#10;                android:layout_marginEnd=&quot;12dp&quot;&#13;&#10;                android:layout_marginTop=&quot;12dp&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;LinearLayout&#13;&#10;                android:id=&quot;@+id/dots&quot;&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_gravity=&quot;center&quot;&#13;&#10;                android:layout_marginTop=&quot;8dp&quot;&#13;&#10;                android:orientation=&quot;horizontal&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;        &lt;!-- Categories Section --&gt;&#13;&#10;        &lt;LinearLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:orientation=&quot;vertical&quot;&#13;&#10;            android:background=&quot;@android:color/white&quot;&#13;&#10;            android:layout_marginTop=&quot;8dp&quot;&#13;&#10;            android:padding=&quot;12dp&quot;&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:text=&quot;Danh mục&quot;&#13;&#10;                android:textSize=&quot;16sp&quot;&#13;&#10;                android:textStyle=&quot;bold&quot;&#13;&#10;                android:textColor=&quot;@android:color/black&quot;&#13;&#10;                android:layout_marginBottom=&quot;12dp&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;androidx.recyclerview.widget.RecyclerView&#13;&#10;                android:id=&quot;@+id/rvCategories&quot;&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:nestedScrollingEnabled=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;        &lt;!-- Flash Sale Section --&gt;&#13;&#10;        &lt;LinearLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:orientation=&quot;vertical&quot;&#13;&#10;            android:background=&quot;@android:color/white&quot;&#13;&#10;            android:layout_marginTop=&quot;8dp&quot;&#13;&#10;            android:padding=&quot;12dp&quot;&gt;&#13;&#10;&#13;&#10;            &lt;LinearLayout&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:orientation=&quot;horizontal&quot;&#13;&#10;                android:layout_marginBottom=&quot;12dp&quot;&gt;&#13;&#10;&#13;&#10;                &lt;TextView&#13;&#10;                    android:layout_width=&quot;0dp&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:layout_weight=&quot;1&quot;&#13;&#10;                    android:text=&quot;⚡ Flash Sale&quot;&#13;&#10;                    android:textSize=&quot;16sp&quot;&#13;&#10;                    android:textStyle=&quot;bold&quot;&#13;&#10;                    android:textColor=&quot;@color/accent&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;TextView&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;Xem thêm &gt;&quot;&#13;&#10;                    android:textSize=&quot;12sp&quot;&#13;&#10;                    android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;            &lt;androidx.recyclerview.widget.RecyclerView&#13;&#10;                android:id=&quot;@+id/rvFlashSale&quot;&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:clipToPadding=&quot;false&quot;&#13;&#10;                android:paddingStart=&quot;4dp&quot;&#13;&#10;                android:paddingEnd=&quot;4dp&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;        &lt;!-- Recommended Products Section --&gt;&#13;&#10;        &lt;LinearLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:orientation=&quot;vertical&quot;&#13;&#10;            android:background=&quot;@android:color/white&quot;&#13;&#10;            android:layout_marginTop=&quot;8dp&quot;&#13;&#10;            android:padding=&quot;12dp&quot;&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:text=&quot;Gợi ý hôm nay&quot;&#13;&#10;                android:textSize=&quot;16sp&quot;&#13;&#10;                android:textStyle=&quot;bold&quot;&#13;&#10;                android:textColor=&quot;@android:color/black&quot;&#13;&#10;                android:layout_marginBottom=&quot;12dp&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;androidx.recyclerview.widget.RecyclerView&#13;&#10;                android:id=&quot;@+id/rvRecommended&quot;&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:nestedScrollingEnabled=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;    &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_banner.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_banner.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ImageView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:id=&quot;@+id/ivBanner&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:scaleType=&quot;centerCrop&quot;&#10;    android:background=&quot;@drawable/rounded_background&quot;&#10;    android:clipToOutline=&quot;true&quot; /&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ImageView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:id=&quot;@+id/ivBanner&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:scaleType=&quot;centerCrop&quot;&#10;    android:background=&quot;@drawable/image_placeholder_bg&quot;&#10;    android:clipToOutline=&quot;true&quot; /&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_category.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_category.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;8dp&quot;&#10;    android:gravity=&quot;center&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/ivCategoryIcon&quot;&#10;        android:layout_width=&quot;48dp&quot;&#10;        android:layout_height=&quot;48dp&quot;&#10;        android:scaleType=&quot;centerCrop&quot;&#10;        android:background=&quot;@drawable/category_background&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvCategoryName&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Category&quot;&#10;        android:textSize=&quot;12sp&quot;&#10;        android:textAlignment=&quot;center&quot;&#10;        android:maxLines=&quot;2&quot;&#10;        android:ellipsize=&quot;end&quot;&#10;        android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;8dp&quot;&#10;    android:gravity=&quot;center&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/ivCategoryIcon&quot;&#10;        android:layout_width=&quot;48dp&quot;&#10;        android:layout_height=&quot;48dp&quot;&#10;        android:scaleType=&quot;centerCrop&quot;&#10;        android:background=&quot;@drawable/circle_background&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvCategoryName&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Category&quot;&#10;        android:textSize=&quot;12sp&quot;&#10;        android:textAlignment=&quot;center&quot;&#10;        android:maxLines=&quot;2&quot;&#10;        android:ellipsize=&quot;end&quot;&#10;        android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_flash_sale.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_flash_sale.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;160dp&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;6dp&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:background=&quot;@drawable/chip_bg_warning&quot;&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;120dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/ivProduct&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:scaleType=&quot;centerCrop&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvDiscount&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_gravity=&quot;top|end&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:background=&quot;@drawable/discount_badge&quot;&#10;                android:padding=&quot;4dp&quot;&#10;                android:text=&quot;-50%&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                android:textSize=&quot;10sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;/FrameLayout&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;8dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvProductName&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Product Name&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:maxLines=&quot;2&quot;&#10;                android:ellipsize=&quot;end&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvOriginalPrice&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;100,000đ&quot;&#10;                android:textSize=&quot;10sp&quot;&#10;                android:textColor=&quot;@android:color/darker_gray&quot;&#10;                android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvDiscountedPrice&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;50,000đ&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@android:color/holo_red_dark&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;160dp&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;6dp&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:background=&quot;@drawable/chip_bg_warning&quot;&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;120dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/ivProduct&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:scaleType=&quot;centerCrop&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvDiscount&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_gravity=&quot;top|end&quot;&#10;                android:layout_margin=&quot;8dp&quot;&#10;                android:background=&quot;@drawable/discount_badge&quot;&#10;                android:padding=&quot;4dp&quot;&#10;                android:text=&quot;-50%&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                android:textSize=&quot;10sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;/FrameLayout&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;8dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvProductName&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Product Name&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:maxLines=&quot;2&quot;&#10;                android:ellipsize=&quot;end&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvOriginalPrice&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;100,000đ&quot;&#10;                android:textSize=&quot;10sp&quot;&#10;                android:textColor=&quot;@android:color/darker_gray&quot;&#10;                android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvDiscountedPrice&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;50,000đ&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/price_color&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_product_grid.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_product_grid.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;4dp&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#10;    app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/ivProduct&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;120dp&quot;&#10;            android:scaleType=&quot;centerCrop&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;8dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvProductName&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Product Name&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:maxLines=&quot;2&quot;&#10;                android:ellipsize=&quot;end&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvPrice&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;100,000đ&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@android:color/holo_red_dark&quot;&#10;                android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvStock&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Còn 10 sản phẩm&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;wrap_content&quot;&#13;&#10;    android:layout_margin=&quot;4dp&quot;&#13;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#13;&#10;    app:cardElevation=&quot;2dp&quot;&gt;&#13;&#10;&#13;&#10;    &lt;LinearLayout&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:orientation=&quot;vertical&quot;&gt;&#13;&#10;&#13;&#10;        &lt;ImageView&#13;&#10;            android:id=&quot;@+id/ivProduct&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;120dp&quot;&#13;&#10;            android:scaleType=&quot;centerCrop&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;LinearLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:orientation=&quot;vertical&quot;&#13;&#10;            android:padding=&quot;8dp&quot;&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:id=&quot;@+id/tvProductName&quot;&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:text=&quot;Product Name&quot;&#13;&#10;                android:textSize=&quot;14sp&quot;&#13;&#10;                android:textStyle=&quot;bold&quot;&#13;&#10;                android:maxLines=&quot;2&quot;&#13;&#10;                android:ellipsize=&quot;end&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:id=&quot;@+id/tvPrice&quot;&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:text=&quot;100,000đ&quot;&#13;&#10;                android:textSize=&quot;16sp&quot;&#13;&#10;                android:textStyle=&quot;bold&quot;&#13;&#10;                android:textColor=&quot;@color/price_color&quot;&#13;&#10;                android:layout_marginTop=&quot;4dp&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:id=&quot;@+id/tvStock&quot;&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:text=&quot;Còn 10 sản phẩm&quot;&#13;&#10;                android:textSize=&quot;12sp&quot;&#13;&#10;                android:layout_marginTop=&quot;2dp&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;    &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>